
#include "jlcxx/array.hpp"
#include "jlcxx/jlcxx.hpp"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"
#include "jlcxx/tuple.hpp"

#include "jlcv2.hpp"

using namespace cv;
using namespace std;
using namespace jlcxx;


namespace jlcxx
{
template <typename T>
struct IsSmartPointerType<cv::Ptr<T>> : std::true_type
{
};
template <typename T>
struct ConstructorPointerType<cv::Ptr<T>>
{
    typedef T *type;
};

template<typename T, int Val>
struct BuildParameterList<cv::Vec<T, Val>>
{
typedef ParameterList<T, std::integral_constant<int, Val>> type;
};

template <>
struct SuperType<cv::GeneralizedHough>
{
    typedef cv::Algorithm type;
};
                                    
template <>
struct SuperType<cv::GeneralizedHoughBallard>
{
    typedef cv::GeneralizedHough type;
};
                                    
template <>
struct SuperType<cv::GeneralizedHoughGuil>
{
    typedef cv::GeneralizedHough type;
};
                                    
template <>
struct SuperType<cv::CLAHE>
{
    typedef cv::Algorithm type;
};
                                    
template <>
struct SuperType<cv::LineSegmentDetector>
{
    typedef cv::Algorithm type;
};
                                    
template <>
struct SuperType<cv::dnn::Layer>
{
    typedef cv::Algorithm type;
};
                                    
template <>
struct SuperType<cv::dnn::Model>
{
    typedef cv::dnn::Net type;
};
                                    
template <>
struct SuperType<cv::dnn::ClassificationModel>
{
    typedef cv::dnn::Model type;
};
                                    
template <>
struct SuperType<cv::dnn::KeypointsModel>
{
    typedef cv::dnn::Model type;
};
                                    
template <>
struct SuperType<cv::dnn::SegmentationModel>
{
    typedef cv::dnn::Model type;
};
                                    
template <>
struct SuperType<cv::dnn::DetectionModel>
{
    typedef cv::dnn::Model type;
};
                                    

} // namespace jlcxx
JLCXX_MODULE cv_wrap(jlcxx::Module &mod)
{
    mod.map_type<RotatedRect>("RotatedRect");
    mod.map_type<TermCriteria>("TermCriteria");
    mod.map_type<Range>("Range");

    mod.add_type<Parametric<TypeVar<1>, TypeVar<2>>>("CxxVec")
        .apply<Vec4f, Vec6f, Vec3d, Vec2d>([](auto wrapped){
            typedef typename decltype(wrapped)::type WrappedT;
            typedef typename get_template_type_vec<WrappedT>::type T;
            wrapped.template constructor<const T*>();
        });

    mod.add_type<Mat>("CxxMat").constructor<int, const int *, int, void *, const size_t *>();

    mod.method("jlopencv_core_get_sizet", [](){return sizeof(size_t);});
    jlcxx::add_smart_pointer<cv::Ptr>(mod, "cv_Ptr");
    mod.method("jlopencv_core_Mat_mutable_data", [](Mat m) {
        return make_tuple(m.data, m.type(), m.channels(), m.size[1], m.size[0], m.step[1], m.step[0]);
    });


    mod.add_type<Parametric<TypeVar<1>>>("CxxScalar")
        .apply<Scalar_<int>, Scalar_<float>, Scalar_<double>>([](auto wrapped) {
                typedef typename decltype(wrapped)::type WrappedT;
                typedef typename get_template_type<WrappedT>::type T;
                wrapped.template constructor<T, T, T, T>();
            });


//
// Manual Wrapping BEGIN
//

#ifdef HAVE_OPENCV_HIGHGUI
    mod.method("createButton", [](const string & bar_name, jl_function_t* on_change, int type, bool initial_button_state) {createButton(bar_name, [](int s, void* c) {
        JuliaFunction f((jl_function_t*)c);
        f(forward<int>(s));
    }, (void*)on_change, type, initial_button_state);});

    mod.method("setMouseCallback", [](const string & winname, jl_function_t* onMouse) {
        setMouseCallback(winname, [](int event, int x, int y, int flags, void* c) {
        JuliaFunction f((jl_function_t*)c);
        f(forward<int>(event), forward<int>(x), forward<int>(y), forward<int>(flags));
    }, (void*)onMouse);});

    mod.method("createTrackbar", [](const String &trackbarname, const String &winname, int& value, int count, jl_function_t* onChange) {
        createTrackbar(trackbarname, winname, &value, count, [](int s, void* c) {
        JuliaFunction f((jl_function_t*)c);
        f(forward<int>(s));
    }, (void*)onChange);});

#endif


//
// Manual Wrapping END
//

    using namespace cv;
mod.add_type<cv::Algorithm>("Algorithm");
mod.add_type<cv::FileStorage>("FileStorage");
mod.add_type<cv::FileNode>("FileNode");
mod.add_type<cv::KeyPoint>("KeyPoint");
mod.add_type<cv::DMatch>("DMatch");
mod.add_type<cv::Moments>("Moments");
mod.add_type<cv::TickMeter>("TickMeter");
mod.add_type<cv::GeneralizedHough>("GeneralizedHough", jlcxx::julia_base_type<cv::Algorithm>());
mod.add_type<cv::GeneralizedHoughBallard>("GeneralizedHoughBallard", jlcxx::julia_base_type<cv::GeneralizedHough>());
mod.add_type<cv::GeneralizedHoughGuil>("GeneralizedHoughGuil", jlcxx::julia_base_type<cv::GeneralizedHough>());
mod.add_type<cv::CLAHE>("CLAHE", jlcxx::julia_base_type<cv::Algorithm>());
mod.add_type<cv::Subdiv2D>("Subdiv2D");
mod.add_type<cv::LineSegmentDetector>("LineSegmentDetector", jlcxx::julia_base_type<cv::Algorithm>());
mod.add_type<cv::VideoCapture>("VideoCapture");
mod.add_type<cv::VideoWriter>("VideoWriter");
using namespace cv::cuda;
using namespace cv::Error;
using namespace cv::cudev;
using namespace cv::ipp;
using namespace cv::ogl;
using namespace cv::utils;
   mod.add_type<AsyncArray>("AsyncArray");
using namespace cv::internal;
using namespace cv::traits;
using namespace cv::samples;
using namespace cv::dnn;
mod.add_type<cv::dnn::Layer>("Layer", jlcxx::julia_base_type<cv::Algorithm>());
mod.add_type<cv::dnn::Net>("Net");
mod.add_type<cv::dnn::Model>("Model", jlcxx::julia_base_type<cv::dnn::Net>());
mod.add_type<cv::dnn::ClassificationModel>("ClassificationModel", jlcxx::julia_base_type<cv::dnn::Model>());
mod.add_type<cv::dnn::KeypointsModel>("KeypointsModel", jlcxx::julia_base_type<cv::dnn::Model>());
mod.add_type<cv::dnn::SegmentationModel>("SegmentationModel", jlcxx::julia_base_type<cv::dnn::Model>());
mod.add_type<cv::dnn::DetectionModel>("DetectionModel", jlcxx::julia_base_type<cv::dnn::Model>());
   mod.add_type<LayerId>("LayerId");


;mod.method("jlopencv_cv_cv_FileStorage_cv_FileStorage_FileStorage", []() {  return jlcxx::create<cv::FileStorage>();});mod.method("jlopencv_cv_cv_FileStorage_cv_FileStorage_FileStorage", [](string& filename, int& flags, string& encoding) {  return jlcxx::create<cv::FileStorage>(filename ,flags ,encoding);});

;
    mod.method("jlopencv_cv_cv_FileStorage_cv_FileStorage_open",  [](cv::FileStorage& cobj, string& filename, int& flags, string& encoding) { auto retval = cobj.open(filename, flags, encoding);  return retval;});
    mod.method("jlopencv_cv_cv_FileStorage_cv_FileStorage_isOpened",  [](cv::FileStorage& cobj) { auto retval = cobj.isOpened();  return retval;});
    mod.method("jlopencv_cv_cv_FileStorage_cv_FileStorage_release",  [](cv::FileStorage& cobj) { cobj.release();  ;});
    mod.method("jlopencv_cv_cv_FileStorage_cv_FileStorage_releaseAndGetString",  [](cv::FileStorage& cobj) { auto retval = cobj.releaseAndGetString();  return retval;});
    mod.method("jlopencv_cv_cv_FileStorage_cv_FileStorage_getFirstTopLevelNode",  [](cv::FileStorage& cobj) { auto retval = cobj.getFirstTopLevelNode();  return retval;});
    mod.method("jlopencv_cv_cv_FileStorage_cv_FileStorage_root",  [](cv::FileStorage& cobj, int& streamidx) { auto retval = cobj.root(streamidx);  return retval;});
    mod.method("jlopencv_cv_cv_FileStorage_cv_FileStorage_write",  [](cv::FileStorage& cobj, string& name, int& val) { cobj.write(name, val);  ;});
    mod.method("jlopencv_cv_cv_FileStorage_cv_FileStorage_write",  [](cv::FileStorage& cobj, string& name, double& val) { cobj.write(name, val);  ;});
    mod.method("jlopencv_cv_cv_FileStorage_cv_FileStorage_write",  [](cv::FileStorage& cobj, string& name, string& val) { cobj.write(name, val);  ;});
    mod.method("jlopencv_cv_cv_FileStorage_cv_FileStorage_write",  [](cv::FileStorage& cobj, string& name, Mat& val) { cobj.write(name, val);  ;});
    mod.method("jlopencv_cv_cv_FileStorage_cv_FileStorage_write",  [](cv::FileStorage& cobj, string& name, vector<string>& val) { cobj.write(name, val);  ;});
    mod.method("jlopencv_cv_cv_FileStorage_cv_FileStorage_writeComment",  [](cv::FileStorage& cobj, string& comment, bool append) { cobj.writeComment(comment, append);  ;});
    mod.method("jlopencv_cv_cv_FileStorage_cv_FileStorage_startWriteStruct",  [](cv::FileStorage& cobj, string& name, int& flags, string& typeName) { cobj.startWriteStruct(name, flags, typeName);  ;});
    mod.method("jlopencv_cv_cv_FileStorage_cv_FileStorage_endWriteStruct",  [](cv::FileStorage& cobj) { cobj.endWriteStruct();  ;});
    mod.method("jlopencv_cv_cv_FileStorage_cv_FileStorage_getFormat",  [](cv::FileStorage& cobj) { auto retval = cobj.getFormat();  return retval;});mod.method("jlopencv_cv_cv_FileNode_cv_FileNode_FileNode", []() {  return jlcxx::create<cv::FileNode>();});

;
    mod.method("jlopencv_cv_cv_FileNode_cv_FileNode_keys",  [](cv::FileNode& cobj) { auto retval = cobj.keys();  return retval;});
    mod.method("jlopencv_cv_cv_FileNode_cv_FileNode_type",  [](cv::FileNode& cobj) { auto retval = cobj.type();  return retval;});
    mod.method("jlopencv_cv_cv_FileNode_cv_FileNode_empty",  [](cv::FileNode& cobj) { auto retval = cobj.empty();  return retval;});
    mod.method("jlopencv_cv_cv_FileNode_cv_FileNode_isNone",  [](cv::FileNode& cobj) { auto retval = cobj.isNone();  return retval;});
    mod.method("jlopencv_cv_cv_FileNode_cv_FileNode_isSeq",  [](cv::FileNode& cobj) { auto retval = cobj.isSeq();  return retval;});
    mod.method("jlopencv_cv_cv_FileNode_cv_FileNode_isMap",  [](cv::FileNode& cobj) { auto retval = cobj.isMap();  return retval;});
    mod.method("jlopencv_cv_cv_FileNode_cv_FileNode_isInt",  [](cv::FileNode& cobj) { auto retval = cobj.isInt();  return retval;});
    mod.method("jlopencv_cv_cv_FileNode_cv_FileNode_isReal",  [](cv::FileNode& cobj) { auto retval = cobj.isReal();  return retval;});
    mod.method("jlopencv_cv_cv_FileNode_cv_FileNode_isString",  [](cv::FileNode& cobj) { auto retval = cobj.isString();  return retval;});
    mod.method("jlopencv_cv_cv_FileNode_cv_FileNode_isNamed",  [](cv::FileNode& cobj) { auto retval = cobj.isNamed();  return retval;});
    mod.method("jlopencv_cv_cv_FileNode_cv_FileNode_name",  [](cv::FileNode& cobj) { auto retval = cobj.name();  return retval;});
    mod.method("jlopencv_cv_cv_FileNode_cv_FileNode_size",  [](cv::FileNode& cobj) { auto retval = cobj.size();  return retval;});
    mod.method("jlopencv_cv_cv_FileNode_cv_FileNode_rawSize",  [](cv::FileNode& cobj) { auto retval = cobj.rawSize();  return retval;});
    mod.method("jlopencv_cv_cv_FileNode_cv_FileNode_real",  [](cv::FileNode& cobj) { auto retval = cobj.real();  return retval;});
    mod.method("jlopencv_cv_cv_FileNode_cv_FileNode_string",  [](cv::FileNode& cobj) { auto retval = cobj.string();  return retval;});
    mod.method("jlopencv_cv_cv_FileNode_cv_FileNode_mat",  [](cv::FileNode& cobj) { auto retval = cobj.mat();  return retval;});mod.method("jlopencv_cv_cv_KeyPoint_cv_KeyPoint_KeyPoint", []() {  return jlcxx::create<cv::KeyPoint>();});mod.method("jlopencv_cv_cv_KeyPoint_cv_KeyPoint_KeyPoint", [](float& x, float& y, float& _size, float& _angle, float& _response, int& _octave, int& _class_id) {  return jlcxx::create<cv::KeyPoint>(x ,y ,_size ,_angle ,_response ,_octave ,_class_id);});

mod.method("jlopencv_KeyPoint_set_pt", [](cv::KeyPoint &cobj,const force_enum_int<Point2f>::Type &v) {cobj.pt=(Point2f)v;});
mod.method("jlopencv_KeyPoint_set_size", [](cv::KeyPoint &cobj,const force_enum_int<float>::Type &v) {cobj.size=(float)v;});
mod.method("jlopencv_KeyPoint_set_angle", [](cv::KeyPoint &cobj,const force_enum_int<float>::Type &v) {cobj.angle=(float)v;});
mod.method("jlopencv_KeyPoint_set_response", [](cv::KeyPoint &cobj,const force_enum_int<float>::Type &v) {cobj.response=(float)v;});
mod.method("jlopencv_KeyPoint_set_octave", [](cv::KeyPoint &cobj,const force_enum_int<int>::Type &v) {cobj.octave=(int)v;});
mod.method("jlopencv_KeyPoint_set_class_id", [](cv::KeyPoint &cobj,const force_enum_int<int>::Type &v) {cobj.class_id=(int)v;});

mod.method("jlopencv_KeyPoint_get_pt", [](const cv::KeyPoint &cobj) {return cobj.pt;});
mod.method("jlopencv_KeyPoint_get_size", [](const cv::KeyPoint &cobj) {return cobj.size;});
mod.method("jlopencv_KeyPoint_get_angle", [](const cv::KeyPoint &cobj) {return cobj.angle;});
mod.method("jlopencv_KeyPoint_get_response", [](const cv::KeyPoint &cobj) {return cobj.response;});
mod.method("jlopencv_KeyPoint_get_octave", [](const cv::KeyPoint &cobj) {return cobj.octave;});
mod.method("jlopencv_KeyPoint_get_class_id", [](const cv::KeyPoint &cobj) {return cobj.class_id;});;mod.method("jlopencv_cv_cv_DMatch_cv_DMatch_DMatch", []() {  return jlcxx::create<cv::DMatch>();});mod.method("jlopencv_cv_cv_DMatch_cv_DMatch_DMatch", [](int& _queryIdx, int& _trainIdx, float& _distance) {  return jlcxx::create<cv::DMatch>(_queryIdx ,_trainIdx ,_distance);});mod.method("jlopencv_cv_cv_DMatch_cv_DMatch_DMatch", [](int& _queryIdx, int& _trainIdx, int& _imgIdx, float& _distance) {  return jlcxx::create<cv::DMatch>(_queryIdx ,_trainIdx ,_imgIdx ,_distance);});

mod.method("jlopencv_DMatch_set_queryIdx", [](cv::DMatch &cobj,const force_enum_int<int>::Type &v) {cobj.queryIdx=(int)v;});
mod.method("jlopencv_DMatch_set_trainIdx", [](cv::DMatch &cobj,const force_enum_int<int>::Type &v) {cobj.trainIdx=(int)v;});
mod.method("jlopencv_DMatch_set_imgIdx", [](cv::DMatch &cobj,const force_enum_int<int>::Type &v) {cobj.imgIdx=(int)v;});
mod.method("jlopencv_DMatch_set_distance", [](cv::DMatch &cobj,const force_enum_int<float>::Type &v) {cobj.distance=(float)v;});

mod.method("jlopencv_DMatch_get_queryIdx", [](const cv::DMatch &cobj) {return cobj.queryIdx;});
mod.method("jlopencv_DMatch_get_trainIdx", [](const cv::DMatch &cobj) {return cobj.trainIdx;});
mod.method("jlopencv_DMatch_get_imgIdx", [](const cv::DMatch &cobj) {return cobj.imgIdx;});
mod.method("jlopencv_DMatch_get_distance", [](const cv::DMatch &cobj) {return cobj.distance;});;

mod.method("jlopencv_Moments_set_m00", [](cv::Moments &cobj,const force_enum_int<double>::Type &v) {cobj.m00=(double)v;});
mod.method("jlopencv_Moments_set_m10", [](cv::Moments &cobj,const force_enum_int<double>::Type &v) {cobj.m10=(double)v;});
mod.method("jlopencv_Moments_set_m01", [](cv::Moments &cobj,const force_enum_int<double>::Type &v) {cobj.m01=(double)v;});
mod.method("jlopencv_Moments_set_m20", [](cv::Moments &cobj,const force_enum_int<double>::Type &v) {cobj.m20=(double)v;});
mod.method("jlopencv_Moments_set_m11", [](cv::Moments &cobj,const force_enum_int<double>::Type &v) {cobj.m11=(double)v;});
mod.method("jlopencv_Moments_set_m02", [](cv::Moments &cobj,const force_enum_int<double>::Type &v) {cobj.m02=(double)v;});
mod.method("jlopencv_Moments_set_m30", [](cv::Moments &cobj,const force_enum_int<double>::Type &v) {cobj.m30=(double)v;});
mod.method("jlopencv_Moments_set_m21", [](cv::Moments &cobj,const force_enum_int<double>::Type &v) {cobj.m21=(double)v;});
mod.method("jlopencv_Moments_set_m12", [](cv::Moments &cobj,const force_enum_int<double>::Type &v) {cobj.m12=(double)v;});
mod.method("jlopencv_Moments_set_m03", [](cv::Moments &cobj,const force_enum_int<double>::Type &v) {cobj.m03=(double)v;});
mod.method("jlopencv_Moments_set_mu20", [](cv::Moments &cobj,const force_enum_int<double>::Type &v) {cobj.mu20=(double)v;});
mod.method("jlopencv_Moments_set_mu11", [](cv::Moments &cobj,const force_enum_int<double>::Type &v) {cobj.mu11=(double)v;});
mod.method("jlopencv_Moments_set_mu02", [](cv::Moments &cobj,const force_enum_int<double>::Type &v) {cobj.mu02=(double)v;});
mod.method("jlopencv_Moments_set_mu30", [](cv::Moments &cobj,const force_enum_int<double>::Type &v) {cobj.mu30=(double)v;});
mod.method("jlopencv_Moments_set_mu21", [](cv::Moments &cobj,const force_enum_int<double>::Type &v) {cobj.mu21=(double)v;});
mod.method("jlopencv_Moments_set_mu12", [](cv::Moments &cobj,const force_enum_int<double>::Type &v) {cobj.mu12=(double)v;});
mod.method("jlopencv_Moments_set_mu03", [](cv::Moments &cobj,const force_enum_int<double>::Type &v) {cobj.mu03=(double)v;});
mod.method("jlopencv_Moments_set_nu20", [](cv::Moments &cobj,const force_enum_int<double>::Type &v) {cobj.nu20=(double)v;});
mod.method("jlopencv_Moments_set_nu11", [](cv::Moments &cobj,const force_enum_int<double>::Type &v) {cobj.nu11=(double)v;});
mod.method("jlopencv_Moments_set_nu02", [](cv::Moments &cobj,const force_enum_int<double>::Type &v) {cobj.nu02=(double)v;});
mod.method("jlopencv_Moments_set_nu30", [](cv::Moments &cobj,const force_enum_int<double>::Type &v) {cobj.nu30=(double)v;});
mod.method("jlopencv_Moments_set_nu21", [](cv::Moments &cobj,const force_enum_int<double>::Type &v) {cobj.nu21=(double)v;});
mod.method("jlopencv_Moments_set_nu12", [](cv::Moments &cobj,const force_enum_int<double>::Type &v) {cobj.nu12=(double)v;});
mod.method("jlopencv_Moments_set_nu03", [](cv::Moments &cobj,const force_enum_int<double>::Type &v) {cobj.nu03=(double)v;});

mod.method("jlopencv_Moments_get_m00", [](const cv::Moments &cobj) {return cobj.m00;});
mod.method("jlopencv_Moments_get_m10", [](const cv::Moments &cobj) {return cobj.m10;});
mod.method("jlopencv_Moments_get_m01", [](const cv::Moments &cobj) {return cobj.m01;});
mod.method("jlopencv_Moments_get_m20", [](const cv::Moments &cobj) {return cobj.m20;});
mod.method("jlopencv_Moments_get_m11", [](const cv::Moments &cobj) {return cobj.m11;});
mod.method("jlopencv_Moments_get_m02", [](const cv::Moments &cobj) {return cobj.m02;});
mod.method("jlopencv_Moments_get_m30", [](const cv::Moments &cobj) {return cobj.m30;});
mod.method("jlopencv_Moments_get_m21", [](const cv::Moments &cobj) {return cobj.m21;});
mod.method("jlopencv_Moments_get_m12", [](const cv::Moments &cobj) {return cobj.m12;});
mod.method("jlopencv_Moments_get_m03", [](const cv::Moments &cobj) {return cobj.m03;});
mod.method("jlopencv_Moments_get_mu20", [](const cv::Moments &cobj) {return cobj.mu20;});
mod.method("jlopencv_Moments_get_mu11", [](const cv::Moments &cobj) {return cobj.mu11;});
mod.method("jlopencv_Moments_get_mu02", [](const cv::Moments &cobj) {return cobj.mu02;});
mod.method("jlopencv_Moments_get_mu30", [](const cv::Moments &cobj) {return cobj.mu30;});
mod.method("jlopencv_Moments_get_mu21", [](const cv::Moments &cobj) {return cobj.mu21;});
mod.method("jlopencv_Moments_get_mu12", [](const cv::Moments &cobj) {return cobj.mu12;});
mod.method("jlopencv_Moments_get_mu03", [](const cv::Moments &cobj) {return cobj.mu03;});
mod.method("jlopencv_Moments_get_nu20", [](const cv::Moments &cobj) {return cobj.nu20;});
mod.method("jlopencv_Moments_get_nu11", [](const cv::Moments &cobj) {return cobj.nu11;});
mod.method("jlopencv_Moments_get_nu02", [](const cv::Moments &cobj) {return cobj.nu02;});
mod.method("jlopencv_Moments_get_nu30", [](const cv::Moments &cobj) {return cobj.nu30;});
mod.method("jlopencv_Moments_get_nu21", [](const cv::Moments &cobj) {return cobj.nu21;});
mod.method("jlopencv_Moments_get_nu12", [](const cv::Moments &cobj) {return cobj.nu12;});
mod.method("jlopencv_Moments_get_nu03", [](const cv::Moments &cobj) {return cobj.nu03;});;

;

;

;

;

;mod.method("jlopencv_cv_cv_Subdiv2D_cv_Subdiv2D_Subdiv2D", []() {  return jlcxx::create<cv::Subdiv2D>();});mod.method("jlopencv_cv_cv_Subdiv2D_cv_Subdiv2D_Subdiv2D", [](Rect& rect) {  return jlcxx::create<cv::Subdiv2D>(rect);});

;
    mod.method("jlopencv_cv_cv_Subdiv2D_cv_Subdiv2D_initDelaunay",  [](cv::Subdiv2D& cobj, Rect& rect) { cobj.initDelaunay(rect);  ;});
    mod.method("jlopencv_cv_cv_Subdiv2D_cv_Subdiv2D_insert",  [](cv::Subdiv2D& cobj, Point2f& pt) { auto retval = cobj.insert(pt);  return retval;});
    mod.method("jlopencv_cv_cv_Subdiv2D_cv_Subdiv2D_insert",  [](cv::Subdiv2D& cobj, vector<Point2f>& ptvec) { cobj.insert(ptvec);  ;});
    mod.method("jlopencv_cv_cv_Subdiv2D_cv_Subdiv2D_locate",  [](cv::Subdiv2D& cobj, Point2f& pt) {int edge;int vertex; auto retval = cobj.locate(pt, edge, vertex);  return make_tuple(move(retval),move(edge),move(vertex));});
    mod.method("jlopencv_cv_cv_Subdiv2D_cv_Subdiv2D_findNearest",  [](cv::Subdiv2D& cobj, Point2f& pt) {Point2f nearestPt; auto retval = cobj.findNearest(pt, &nearestPt);  return make_tuple(move(retval),move(nearestPt));});
    mod.method("jlopencv_cv_cv_Subdiv2D_cv_Subdiv2D_getEdgeList",  [](cv::Subdiv2D& cobj) {vector<Vec4f> edgeList; cobj.getEdgeList(edgeList);  return edgeList;});
    mod.method("jlopencv_cv_cv_Subdiv2D_cv_Subdiv2D_getLeadingEdgeList",  [](cv::Subdiv2D& cobj) {vector<int> leadingEdgeList; cobj.getLeadingEdgeList(leadingEdgeList);  return leadingEdgeList;});
    mod.method("jlopencv_cv_cv_Subdiv2D_cv_Subdiv2D_getTriangleList",  [](cv::Subdiv2D& cobj) {vector<Vec6f> triangleList; cobj.getTriangleList(triangleList);  return triangleList;});
    mod.method("jlopencv_cv_cv_Subdiv2D_cv_Subdiv2D_getVoronoiFacetList",  [](cv::Subdiv2D& cobj, vector<int>& idx) {vector<vector<Point2f>> facetList;vector<Point2f> facetCenters; cobj.getVoronoiFacetList(idx, facetList, facetCenters);  return make_tuple(move(facetList),move(facetCenters));});
    mod.method("jlopencv_cv_cv_Subdiv2D_cv_Subdiv2D_getVertex",  [](cv::Subdiv2D& cobj, int& vertex) {int firstEdge; auto retval = cobj.getVertex(vertex, &firstEdge);  return make_tuple(move(retval),move(firstEdge));});
    mod.method("jlopencv_cv_cv_Subdiv2D_cv_Subdiv2D_getEdge",  [](cv::Subdiv2D& cobj, int& edge, int& nextEdgeType) { auto retval = cobj.getEdge(edge, nextEdgeType);  return retval;});
    mod.method("jlopencv_cv_cv_Subdiv2D_cv_Subdiv2D_nextEdge",  [](cv::Subdiv2D& cobj, int& edge) { auto retval = cobj.nextEdge(edge);  return retval;});
    mod.method("jlopencv_cv_cv_Subdiv2D_cv_Subdiv2D_rotateEdge",  [](cv::Subdiv2D& cobj, int& edge, int& rotate) { auto retval = cobj.rotateEdge(edge, rotate);  return retval;});
    mod.method("jlopencv_cv_cv_Subdiv2D_cv_Subdiv2D_symEdge",  [](cv::Subdiv2D& cobj, int& edge) { auto retval = cobj.symEdge(edge);  return retval;});
    mod.method("jlopencv_cv_cv_Subdiv2D_cv_Subdiv2D_edgeOrg",  [](cv::Subdiv2D& cobj, int& edge) {Point2f orgpt; auto retval = cobj.edgeOrg(edge, &orgpt);  return make_tuple(move(retval),move(orgpt));});
    mod.method("jlopencv_cv_cv_Subdiv2D_cv_Subdiv2D_edgeDst",  [](cv::Subdiv2D& cobj, int& edge) {Point2f dstpt; auto retval = cobj.edgeDst(edge, &dstpt);  return make_tuple(move(retval),move(dstpt));});

;mod.method("jlopencv_cv_cv_VideoCapture_cv_VideoCapture_VideoCapture", []() {  return jlcxx::create<cv::VideoCapture>();});mod.method("jlopencv_cv_cv_VideoCapture_cv_VideoCapture_VideoCapture", [](string& filename, int& apiPreference) {  return jlcxx::create<cv::VideoCapture>(filename ,apiPreference);});mod.method("jlopencv_cv_cv_VideoCapture_cv_VideoCapture_VideoCapture", [](int& index, int& apiPreference) {  return jlcxx::create<cv::VideoCapture>(index ,apiPreference);});

;
    mod.method("jlopencv_cv_cv_VideoCapture_cv_VideoCapture_open",  [](cv::VideoCapture& cobj, string& filename, int& apiPreference) { auto retval = cobj.open(filename, apiPreference);  return retval;});
    mod.method("jlopencv_cv_cv_VideoCapture_cv_VideoCapture_open",  [](cv::VideoCapture& cobj, int& index, int& apiPreference) { auto retval = cobj.open(index, apiPreference);  return retval;});
    mod.method("jlopencv_cv_cv_VideoCapture_cv_VideoCapture_isOpened",  [](cv::VideoCapture& cobj) { auto retval = cobj.isOpened();  return retval;});
    mod.method("jlopencv_cv_cv_VideoCapture_cv_VideoCapture_release",  [](cv::VideoCapture& cobj) { cobj.release();  ;});
    mod.method("jlopencv_cv_cv_VideoCapture_cv_VideoCapture_grab",  [](cv::VideoCapture& cobj) { auto retval = cobj.grab();  return retval;});
    mod.method("jlopencv_cv_cv_VideoCapture_cv_VideoCapture_retrieve",  [](cv::VideoCapture& cobj, Mat& image, int& flag) { auto retval = cobj.retrieve(image, flag);  return make_tuple(move(retval),move(image));});
    mod.method("jlopencv_cv_cv_VideoCapture_cv_VideoCapture_read",  [](cv::VideoCapture& cobj, Mat& image) { auto retval = cobj.read(image);  return make_tuple(move(retval),move(image));});
    mod.method("jlopencv_cv_cv_VideoCapture_cv_VideoCapture_set",  [](cv::VideoCapture& cobj, int& propId, double& value) { auto retval = cobj.set(propId, value);  return retval;});
    mod.method("jlopencv_cv_cv_VideoCapture_cv_VideoCapture_get",  [](cv::VideoCapture& cobj, int& propId) { auto retval = cobj.get(propId);  return retval;});
    mod.method("jlopencv_cv_cv_VideoCapture_cv_VideoCapture_getBackendName",  [](cv::VideoCapture& cobj) { auto retval = cobj.getBackendName();  return retval;});
    mod.method("jlopencv_cv_cv_VideoCapture_cv_VideoCapture_setExceptionMode",  [](cv::VideoCapture& cobj, bool enable) { cobj.setExceptionMode(enable);  ;});
    mod.method("jlopencv_cv_cv_VideoCapture_cv_VideoCapture_getExceptionMode",  [](cv::VideoCapture& cobj) { auto retval = cobj.getExceptionMode();  return retval;});mod.method("jlopencv_cv_cv_VideoWriter_cv_VideoWriter_VideoWriter", []() {  return jlcxx::create<cv::VideoWriter>();});mod.method("jlopencv_cv_cv_VideoWriter_cv_VideoWriter_VideoWriter", [](string& filename, int& fourcc, double& fps, Size& frameSize, bool isColor) {  return jlcxx::create<cv::VideoWriter>(filename ,fourcc ,fps ,frameSize ,isColor);});mod.method("jlopencv_cv_cv_VideoWriter_cv_VideoWriter_VideoWriter", [](string& filename, int& apiPreference, int& fourcc, double& fps, Size& frameSize, bool isColor) {  return jlcxx::create<cv::VideoWriter>(filename ,apiPreference ,fourcc ,fps ,frameSize ,isColor);});mod.method("jlopencv_cv_cv_VideoWriter_cv_VideoWriter_VideoWriter", [](string& filename, int& fourcc, double& fps, Size& frameSize, vector<int>& params) {  return jlcxx::create<cv::VideoWriter>(filename ,fourcc ,fps ,frameSize ,params);});mod.method("jlopencv_cv_cv_VideoWriter_cv_VideoWriter_VideoWriter", [](string& filename, int& apiPreference, int& fourcc, double& fps, Size& frameSize, vector<int>& params) {  return jlcxx::create<cv::VideoWriter>(filename ,apiPreference ,fourcc ,fps ,frameSize ,params);});

;
    mod.method("jlopencv_cv_cv_VideoWriter_cv_VideoWriter_open",  [](cv::VideoWriter& cobj, string& filename, int& fourcc, double& fps, Size& frameSize, bool isColor) { auto retval = cobj.open(filename, fourcc, fps, frameSize, isColor);  return retval;});
    mod.method("jlopencv_cv_cv_VideoWriter_cv_VideoWriter_open",  [](cv::VideoWriter& cobj, string& filename, int& apiPreference, int& fourcc, double& fps, Size& frameSize, bool isColor) { auto retval = cobj.open(filename, apiPreference, fourcc, fps, frameSize, isColor);  return retval;});
    mod.method("jlopencv_cv_cv_VideoWriter_cv_VideoWriter_open",  [](cv::VideoWriter& cobj, string& filename, int& fourcc, double& fps, Size& frameSize, vector<int>& params) { auto retval = cobj.open(filename, fourcc, fps, frameSize, params);  return retval;});
    mod.method("jlopencv_cv_cv_VideoWriter_cv_VideoWriter_open",  [](cv::VideoWriter& cobj, string& filename, int& apiPreference, int& fourcc, double& fps, Size& frameSize, vector<int>& params) { auto retval = cobj.open(filename, apiPreference, fourcc, fps, frameSize, params);  return retval;});
    mod.method("jlopencv_cv_cv_VideoWriter_cv_VideoWriter_isOpened",  [](cv::VideoWriter& cobj) { auto retval = cobj.isOpened();  return retval;});
    mod.method("jlopencv_cv_cv_VideoWriter_cv_VideoWriter_release",  [](cv::VideoWriter& cobj) { cobj.release();  ;});
    mod.method("jlopencv_cv_cv_VideoWriter_cv_VideoWriter_write",  [](cv::VideoWriter& cobj, Mat& image) { cobj.write(image);  ;});
    mod.method("jlopencv_cv_cv_VideoWriter_cv_VideoWriter_set",  [](cv::VideoWriter& cobj, int& propId, double& value) { auto retval = cobj.set(propId, value);  return retval;});
    mod.method("jlopencv_cv_cv_VideoWriter_cv_VideoWriter_get",  [](cv::VideoWriter& cobj, int& propId) { auto retval = cobj.get(propId);  return retval;});
    mod.method("jlopencv_cv_cv_VideoWriter_cv_VideoWriter_getBackendName",  [](cv::VideoWriter& cobj) { auto retval = cobj.getBackendName();  return retval;});
    mod.method("jlopencv_cv_cv_borderInterpolate",  [](int& p, int& len, int& borderType) { auto retval = cv::borderInterpolate(p, len, borderType); return retval;});
    mod.method("jlopencv_cv_cv_copyMakeBorder",  [](Mat& src, int& top, int& bottom, int& left, int& right, int& borderType, Mat& dst, Scalar& value) { cv::copyMakeBorder(src, dst, top, bottom, left, right, borderType, value); return dst;});
    mod.method("jlopencv_cv_cv_add",  [](Mat& src1, Mat& src2, Mat& dst, Mat& mask, int& dtype) { cv::add(src1, src2, dst, mask, dtype); return dst;});
    mod.method("jlopencv_cv_cv_subtract",  [](Mat& src1, Mat& src2, Mat& dst, Mat& mask, int& dtype) { cv::subtract(src1, src2, dst, mask, dtype); return dst;});
    mod.method("jlopencv_cv_cv_multiply",  [](Mat& src1, Mat& src2, Mat& dst, double& scale, int& dtype) { cv::multiply(src1, src2, dst, scale, dtype); return dst;});
    mod.method("jlopencv_cv_cv_divide",  [](Mat& src1, Mat& src2, Mat& dst, double& scale, int& dtype) { cv::divide(src1, src2, dst, scale, dtype); return dst;});
    mod.method("jlopencv_cv_cv_divide",  [](double& scale, Mat& src2, Mat& dst, int& dtype) { cv::divide(scale, src2, dst, dtype); return dst;});
    mod.method("jlopencv_cv_cv_scaleAdd",  [](Mat& src1, double& alpha, Mat& src2, Mat& dst) { cv::scaleAdd(src1, alpha, src2, dst); return dst;});
    mod.method("jlopencv_cv_cv_addWeighted",  [](Mat& src1, double& alpha, Mat& src2, double& beta, double& gamma, Mat& dst, int& dtype) { cv::addWeighted(src1, alpha, src2, beta, gamma, dst, dtype); return dst;});
    mod.method("jlopencv_cv_cv_convertScaleAbs",  [](Mat& src, Mat& dst, double& alpha, double& beta) { cv::convertScaleAbs(src, dst, alpha, beta); return dst;});
    mod.method("jlopencv_cv_cv_convertFp16",  [](Mat& src, Mat& dst) { cv::convertFp16(src, dst); return dst;});
    mod.method("jlopencv_cv_cv_LUT",  [](Mat& src, Mat& lut, Mat& dst) { cv::LUT(src, lut, dst); return dst;});
    mod.method("jlopencv_cv_cv_sum",  [](Mat& src) { auto retval = cv::sum(src); return retval;});
    mod.method("jlopencv_cv_cv_countNonZero",  [](Mat& src) { auto retval = cv::countNonZero(src); return retval;});
    mod.method("jlopencv_cv_cv_findNonZero",  [](Mat& src, Mat& idx) { cv::findNonZero(src, idx); return idx;});
    mod.method("jlopencv_cv_cv_mean",  [](Mat& src, Mat& mask) { auto retval = cv::mean(src, mask); return retval;});
    mod.method("jlopencv_cv_cv_meanStdDev",  [](Mat& src, Mat& mean, Mat& stddev, Mat& mask) { cv::meanStdDev(src, mean, stddev, mask); return make_tuple(move(mean),move(stddev));});
    mod.method("jlopencv_cv_cv_norm",  [](Mat& src1, int& normType, Mat& mask) { auto retval = cv::norm(src1, normType, mask); return retval;});
    mod.method("jlopencv_cv_cv_norm",  [](Mat& src1, Mat& src2, int& normType, Mat& mask) { auto retval = cv::norm(src1, src2, normType, mask); return retval;});
    mod.method("jlopencv_cv_cv_PSNR",  [](Mat& src1, Mat& src2, double& R) { auto retval = cv::PSNR(src1, src2, R); return retval;});
    mod.method("jlopencv_cv_cv_batchDistance",  [](Mat& src1, Mat& src2, int& dtype, Mat& dist, Mat& nidx, int& normType, int& K, Mat& mask, int& update, bool crosscheck) { cv::batchDistance(src1, src2, dist, dtype, nidx, normType, K, mask, update, crosscheck); return make_tuple(move(dist),move(nidx));});
    mod.method("jlopencv_cv_cv_normalize",  [](Mat& src, Mat& dst, double& alpha, double& beta, int& norm_type, int& dtype, Mat& mask) { cv::normalize(src, dst, alpha, beta, norm_type, dtype, mask); return dst;});
    mod.method("jlopencv_cv_cv_minMaxLoc",  [](Mat& src, Mat& mask) {double minVal;double maxVal;Point minLoc;Point maxLoc; cv::minMaxLoc(src, &minVal, &maxVal, &minLoc, &maxLoc, mask); return make_tuple(move(minVal),move(maxVal),move(minLoc),move(maxLoc));});
    mod.method("jlopencv_cv_cv_reduce",  [](Mat& src, int& dim, int& rtype, Mat& dst, int& dtype) { cv::reduce(src, dst, dim, rtype, dtype); return dst;});
    mod.method("jlopencv_cv_cv_merge",  [](vector<Mat>& mv, Mat& dst) { cv::merge(mv, dst); return dst;});
    mod.method("jlopencv_cv_cv_split",  [](Mat& m, vector<Mat>& mv) { cv::split(m, mv); return mv;});
    mod.method("jlopencv_cv_cv_mixChannels",  [](vector<Mat>& src, vector<Mat>& dst, vector<int>& fromTo) { cv::mixChannels(src, dst, fromTo); return dst;});
    mod.method("jlopencv_cv_cv_extractChannel",  [](Mat& src, int& coi, Mat& dst) { cv::extractChannel(src, dst, coi); return dst;});
    mod.method("jlopencv_cv_cv_insertChannel",  [](Mat& src, Mat& dst, int& coi) { cv::insertChannel(src, dst, coi); return dst;});
    mod.method("jlopencv_cv_cv_flip",  [](Mat& src, int& flipCode, Mat& dst) { cv::flip(src, dst, flipCode); return dst;});
    mod.method("jlopencv_cv_cv_rotate",  [](Mat& src, int& rotateCode, Mat& dst) { cv::rotate(src, dst, rotateCode); return dst;});
    mod.method("jlopencv_cv_cv_repeat",  [](Mat& src, int& ny, int& nx, Mat& dst) { cv::repeat(src, ny, nx, dst); return dst;});
    mod.method("jlopencv_cv_cv_hconcat",  [](vector<Mat>& src, Mat& dst) { cv::hconcat(src, dst); return dst;});
    mod.method("jlopencv_cv_cv_vconcat",  [](vector<Mat>& src, Mat& dst) { cv::vconcat(src, dst); return dst;});
    mod.method("jlopencv_cv_cv_bitwise_and",  [](Mat& src1, Mat& src2, Mat& dst, Mat& mask) { cv::bitwise_and(src1, src2, dst, mask); return dst;});
    mod.method("jlopencv_cv_cv_bitwise_or",  [](Mat& src1, Mat& src2, Mat& dst, Mat& mask) { cv::bitwise_or(src1, src2, dst, mask); return dst;});
    mod.method("jlopencv_cv_cv_bitwise_xor",  [](Mat& src1, Mat& src2, Mat& dst, Mat& mask) { cv::bitwise_xor(src1, src2, dst, mask); return dst;});
    mod.method("jlopencv_cv_cv_bitwise_not",  [](Mat& src, Mat& dst, Mat& mask) { cv::bitwise_not(src, dst, mask); return dst;});
    mod.method("jlopencv_cv_cv_absdiff",  [](Mat& src1, Mat& src2, Mat& dst) { cv::absdiff(src1, src2, dst); return dst;});
    mod.method("jlopencv_cv_cv_copyTo",  [](Mat& src, Mat& mask, Mat& dst) { cv::copyTo(src, dst, mask); return dst;});
    mod.method("jlopencv_cv_cv_inRange",  [](Mat& src, Mat& lowerb, Mat& upperb, Mat& dst) { cv::inRange(src, lowerb, upperb, dst); return dst;});
    mod.method("jlopencv_cv_cv_compare",  [](Mat& src1, Mat& src2, int& cmpop, Mat& dst) { cv::compare(src1, src2, dst, cmpop); return dst;});
    mod.method("jlopencv_cv_cv_min",  [](Mat& src1, Mat& src2, Mat& dst) { cv::min(src1, src2, dst); return dst;});
    mod.method("jlopencv_cv_cv_max",  [](Mat& src1, Mat& src2, Mat& dst) { cv::max(src1, src2, dst); return dst;});
    mod.method("jlopencv_cv_cv_sqrt",  [](Mat& src, Mat& dst) { cv::sqrt(src, dst); return dst;});
    mod.method("jlopencv_cv_cv_pow",  [](Mat& src, double& power, Mat& dst) { cv::pow(src, power, dst); return dst;});
    mod.method("jlopencv_cv_cv_exp",  [](Mat& src, Mat& dst) { cv::exp(src, dst); return dst;});
    mod.method("jlopencv_cv_cv_log",  [](Mat& src, Mat& dst) { cv::log(src, dst); return dst;});
    mod.method("jlopencv_cv_cv_polarToCart",  [](Mat& magnitude, Mat& angle, Mat& x, Mat& y, bool angleInDegrees) { cv::polarToCart(magnitude, angle, x, y, angleInDegrees); return make_tuple(move(x),move(y));});
    mod.method("jlopencv_cv_cv_cartToPolar",  [](Mat& x, Mat& y, Mat& magnitude, Mat& angle, bool angleInDegrees) { cv::cartToPolar(x, y, magnitude, angle, angleInDegrees); return make_tuple(move(magnitude),move(angle));});
    mod.method("jlopencv_cv_cv_phase",  [](Mat& x, Mat& y, Mat& angle, bool angleInDegrees) { cv::phase(x, y, angle, angleInDegrees); return angle;});
    mod.method("jlopencv_cv_cv_magnitude",  [](Mat& x, Mat& y, Mat& magnitude) { cv::magnitude(x, y, magnitude); return magnitude;});
    mod.method("jlopencv_cv_cv_checkRange",  [](Mat& a, bool quiet, double& minVal, double& maxVal) {Point pos; auto retval = cv::checkRange(a, quiet, &pos, minVal, maxVal); return make_tuple(move(retval),move(pos));});
    mod.method("jlopencv_cv_cv_patchNaNs",  [](Mat& a, double& val) { cv::patchNaNs(a, val); return a;});
    mod.method("jlopencv_cv_cv_gemm",  [](Mat& src1, Mat& src2, double& alpha, Mat& src3, double& beta, Mat& dst, int& flags) { cv::gemm(src1, src2, alpha, src3, beta, dst, flags); return dst;});
    mod.method("jlopencv_cv_cv_mulTransposed",  [](Mat& src, bool aTa, Mat& dst, Mat& delta, double& scale, int& dtype) { cv::mulTransposed(src, dst, aTa, delta, scale, dtype); return dst;});
    mod.method("jlopencv_cv_cv_transpose",  [](Mat& src, Mat& dst) { cv::transpose(src, dst); return dst;});
    mod.method("jlopencv_cv_cv_transform",  [](Mat& src, Mat& m, Mat& dst) { cv::transform(src, dst, m); return dst;});
    mod.method("jlopencv_cv_cv_perspectiveTransform",  [](Mat& src, Mat& m, Mat& dst) { cv::perspectiveTransform(src, dst, m); return dst;});
    mod.method("jlopencv_cv_cv_completeSymm",  [](Mat& m, bool lowerToUpper) { cv::completeSymm(m, lowerToUpper); return m;});
    mod.method("jlopencv_cv_cv_setIdentity",  [](Mat& mtx, Scalar& s) { cv::setIdentity(mtx, s); return mtx;});
    mod.method("jlopencv_cv_cv_determinant",  [](Mat& mtx) { auto retval = cv::determinant(mtx); return retval;});
    mod.method("jlopencv_cv_cv_trace",  [](Mat& mtx) { auto retval = cv::trace(mtx); return retval;});
    mod.method("jlopencv_cv_cv_invert",  [](Mat& src, Mat& dst, int& flags) { auto retval = cv::invert(src, dst, flags); return make_tuple(move(retval),move(dst));});
    mod.method("jlopencv_cv_cv_solve",  [](Mat& src1, Mat& src2, Mat& dst, int& flags) { auto retval = cv::solve(src1, src2, dst, flags); return make_tuple(move(retval),move(dst));});
    mod.method("jlopencv_cv_cv_sort",  [](Mat& src, int& flags, Mat& dst) { cv::sort(src, dst, flags); return dst;});
    mod.method("jlopencv_cv_cv_sortIdx",  [](Mat& src, int& flags, Mat& dst) { cv::sortIdx(src, dst, flags); return dst;});
    mod.method("jlopencv_cv_cv_solveCubic",  [](Mat& coeffs, Mat& roots) { auto retval = cv::solveCubic(coeffs, roots); return make_tuple(move(retval),move(roots));});
    mod.method("jlopencv_cv_cv_solvePoly",  [](Mat& coeffs, Mat& roots, int& maxIters) { auto retval = cv::solvePoly(coeffs, roots, maxIters); return make_tuple(move(retval),move(roots));});
    mod.method("jlopencv_cv_cv_eigen",  [](Mat& src, Mat& eigenvalues, Mat& eigenvectors) { auto retval = cv::eigen(src, eigenvalues, eigenvectors); return make_tuple(move(retval),move(eigenvalues),move(eigenvectors));});
    mod.method("jlopencv_cv_cv_eigenNonSymmetric",  [](Mat& src, Mat& eigenvalues, Mat& eigenvectors) { cv::eigenNonSymmetric(src, eigenvalues, eigenvectors); return make_tuple(move(eigenvalues),move(eigenvectors));});
    mod.method("jlopencv_cv_cv_calcCovarMatrix",  [](Mat& samples, Mat& mean, int& flags, Mat& covar, int& ctype) { cv::calcCovarMatrix(samples, covar, mean, flags, ctype); return make_tuple(move(covar),move(mean));});
    mod.method("jlopencv_cv_cv_PCACompute",  [](Mat& data, Mat& mean, Mat& eigenvectors, int& maxComponents) { cv::PCACompute(data, mean, eigenvectors, maxComponents); return make_tuple(move(mean),move(eigenvectors));});
    mod.method("jlopencv_cv_cv_PCACompute",  [](Mat& data, Mat& mean, Mat& eigenvectors, Mat& eigenvalues, int& maxComponents) { cv::PCACompute(data, mean, eigenvectors, eigenvalues, maxComponents); return make_tuple(move(mean),move(eigenvectors),move(eigenvalues));});
    mod.method("jlopencv_cv_cv_PCACompute",  [](Mat& data, Mat& mean, double& retainedVariance, Mat& eigenvectors) { cv::PCACompute(data, mean, eigenvectors, retainedVariance); return make_tuple(move(mean),move(eigenvectors));});
    mod.method("jlopencv_cv_cv_PCACompute",  [](Mat& data, Mat& mean, double& retainedVariance, Mat& eigenvectors, Mat& eigenvalues) { cv::PCACompute(data, mean, eigenvectors, eigenvalues, retainedVariance); return make_tuple(move(mean),move(eigenvectors),move(eigenvalues));});
    mod.method("jlopencv_cv_cv_PCAProject",  [](Mat& data, Mat& mean, Mat& eigenvectors, Mat& result) { cv::PCAProject(data, mean, eigenvectors, result); return result;});
    mod.method("jlopencv_cv_cv_PCABackProject",  [](Mat& data, Mat& mean, Mat& eigenvectors, Mat& result) { cv::PCABackProject(data, mean, eigenvectors, result); return result;});
    mod.method("jlopencv_cv_cv_SVDecomp",  [](Mat& src, Mat& w, Mat& u, Mat& vt, int& flags) { cv::SVDecomp(src, w, u, vt, flags); return make_tuple(move(w),move(u),move(vt));});
    mod.method("jlopencv_cv_cv_SVBackSubst",  [](Mat& w, Mat& u, Mat& vt, Mat& rhs, Mat& dst) { cv::SVBackSubst(w, u, vt, rhs, dst); return dst;});
    mod.method("jlopencv_cv_cv_Mahalanobis",  [](Mat& v1, Mat& v2, Mat& icovar) { auto retval = cv::Mahalanobis(v1, v2, icovar); return retval;});
    mod.method("jlopencv_cv_cv_dft",  [](Mat& src, Mat& dst, int& flags, int& nonzeroRows) { cv::dft(src, dst, flags, nonzeroRows); return dst;});
    mod.method("jlopencv_cv_cv_idft",  [](Mat& src, Mat& dst, int& flags, int& nonzeroRows) { cv::idft(src, dst, flags, nonzeroRows); return dst;});
    mod.method("jlopencv_cv_cv_dct",  [](Mat& src, Mat& dst, int& flags) { cv::dct(src, dst, flags); return dst;});
    mod.method("jlopencv_cv_cv_idct",  [](Mat& src, Mat& dst, int& flags) { cv::idct(src, dst, flags); return dst;});
    mod.method("jlopencv_cv_cv_mulSpectrums",  [](Mat& a, Mat& b, int& flags, Mat& c, bool conjB) { cv::mulSpectrums(a, b, c, flags, conjB); return c;});
    mod.method("jlopencv_cv_cv_getOptimalDFTSize",  [](int& vecsize) { auto retval = cv::getOptimalDFTSize(vecsize); return retval;});
    mod.method("jlopencv_cv_cv_setRNGSeed",  [](int& seed) { cv::setRNGSeed(seed); ;});
    mod.method("jlopencv_cv_cv_randu",  [](Mat& dst, Mat& low, Mat& high) { cv::randu(dst, low, high); return dst;});
    mod.method("jlopencv_cv_cv_randn",  [](Mat& dst, Mat& mean, Mat& stddev) { cv::randn(dst, mean, stddev); return dst;});
    mod.method("jlopencv_cv_cv_randShuffle",  [](Mat& dst, double& iterFactor) { cv::randShuffle(dst, iterFactor); return dst;});
    mod.method("jlopencv_cv_cv_kmeans",  [](Mat& data, int& K, Mat& bestLabels, TermCriteria& criteria, int& attempts, int& flags, Mat& centers) { auto retval = cv::kmeans(data, K, bestLabels, criteria, attempts, flags, centers); return make_tuple(move(retval),move(bestLabels),move(centers));});
    mod.method("jlopencv_cv_cv_cubeRoot",  [](float& val) { auto retval = cv::cubeRoot(val); return retval;});
    mod.method("jlopencv_cv_cv_fastAtan2",  [](float& y, float& x) { auto retval = cv::fastAtan2(y, x); return retval;});
    mod.method("jlopencv_cv_cv_solveLP",  [](Mat& Func, Mat& Constr, Mat& z) { auto retval = cv::solveLP(Func, Constr, z); return make_tuple(move(retval),move(z));});
    mod.method("jlopencv_cv_cv_KeyPoint_convert",  [](vector<KeyPoint>& keypoints, vector<int>& keypointIndexes) {vector<Point2f> points2f; cv::KeyPoint::convert(keypoints, points2f, keypointIndexes); return points2f;});
    mod.method("jlopencv_cv_cv_KeyPoint_convert",  [](vector<Point2f>& points2f, float& size, float& response, int& octave, int& class_id) {vector<KeyPoint> keypoints; cv::KeyPoint::convert(points2f, keypoints, size, response, octave, class_id); return keypoints;});
    mod.method("jlopencv_cv_cv_KeyPoint_overlap",  [](KeyPoint& kp1, KeyPoint& kp2) { auto retval = cv::KeyPoint::overlap(kp1, kp2); return retval;});
    mod.method("jlopencv_cv_cv_setNumThreads",  [](int& nthreads) { cv::setNumThreads(nthreads); ;});
    mod.method("jlopencv_cv_cv_getNumThreads",  []() { auto retval = cv::getNumThreads(); return retval;});
    mod.method("jlopencv_cv_cv_getThreadNum",  []() { auto retval = cv::getThreadNum(); return retval;});
    mod.method("jlopencv_cv_cv_getBuildInformation",  []() { auto retval = cv::getBuildInformation(); return retval;});
    mod.method("jlopencv_cv_cv_getVersionString",  []() { auto retval = cv::getVersionString(); return retval;});
    mod.method("jlopencv_cv_cv_getVersionMajor",  []() { auto retval = cv::getVersionMajor(); return retval;});
    mod.method("jlopencv_cv_cv_getVersionMinor",  []() { auto retval = cv::getVersionMinor(); return retval;});
    mod.method("jlopencv_cv_cv_getVersionRevision",  []() { auto retval = cv::getVersionRevision(); return retval;});
    mod.method("jlopencv_cv_cv_getTickCount",  []() { auto retval = cv::getTickCount(); return retval;});
    mod.method("jlopencv_cv_cv_getTickFrequency",  []() { auto retval = cv::getTickFrequency(); return retval;});
    mod.method("jlopencv_cv_cv_getGaussianKernel",  [](int& ksize, double& sigma, int& ktype) { auto retval = cv::getGaussianKernel(ksize, sigma, ktype); return retval;});
    mod.method("jlopencv_cv_cv_getDerivKernels",  [](int& dx, int& dy, int& ksize, Mat& kx, Mat& ky, bool normalize, int& ktype) { cv::getDerivKernels(kx, ky, dx, dy, ksize, normalize, ktype); return make_tuple(move(kx),move(ky));});
    mod.method("jlopencv_cv_cv_getGaborKernel",  [](Size& ksize, double& sigma, double& theta, double& lambd, double& gamma, double& psi, int& ktype) { auto retval = cv::getGaborKernel(ksize, sigma, theta, lambd, gamma, psi, ktype); return retval;});
    mod.method("jlopencv_cv_cv_getStructuringElement",  [](int& shape, Size& ksize, Point& anchor) { auto retval = cv::getStructuringElement(shape, ksize, anchor); return retval;});
    mod.method("jlopencv_cv_cv_medianBlur",  [](Mat& src, int& ksize, Mat& dst) { cv::medianBlur(src, dst, ksize); return dst;});
    mod.method("jlopencv_cv_cv_GaussianBlur",  [](Mat& src, Size& ksize, double& sigmaX, Mat& dst, double& sigmaY, int& borderType) { cv::GaussianBlur(src, dst, ksize, sigmaX, sigmaY, borderType); return dst;});
    mod.method("jlopencv_cv_cv_bilateralFilter",  [](Mat& src, int& d, double& sigmaColor, double& sigmaSpace, Mat& dst, int& borderType) { cv::bilateralFilter(src, dst, d, sigmaColor, sigmaSpace, borderType); return dst;});
    mod.method("jlopencv_cv_cv_boxFilter",  [](Mat& src, int& ddepth, Size& ksize, Mat& dst, Point& anchor, bool normalize, int& borderType) { cv::boxFilter(src, dst, ddepth, ksize, anchor, normalize, borderType); return dst;});
    mod.method("jlopencv_cv_cv_sqrBoxFilter",  [](Mat& src, int& ddepth, Size& ksize, Mat& dst, Point& anchor, bool normalize, int& borderType) { cv::sqrBoxFilter(src, dst, ddepth, ksize, anchor, normalize, borderType); return dst;});
    mod.method("jlopencv_cv_cv_blur",  [](Mat& src, Size& ksize, Mat& dst, Point& anchor, int& borderType) { cv::blur(src, dst, ksize, anchor, borderType); return dst;});
    mod.method("jlopencv_cv_cv_filter2D",  [](Mat& src, int& ddepth, Mat& kernel, Mat& dst, Point& anchor, double& delta, int& borderType) { cv::filter2D(src, dst, ddepth, kernel, anchor, delta, borderType); return dst;});
    mod.method("jlopencv_cv_cv_sepFilter2D",  [](Mat& src, int& ddepth, Mat& kernelX, Mat& kernelY, Mat& dst, Point& anchor, double& delta, int& borderType) { cv::sepFilter2D(src, dst, ddepth, kernelX, kernelY, anchor, delta, borderType); return dst;});
    mod.method("jlopencv_cv_cv_Sobel",  [](Mat& src, int& ddepth, int& dx, int& dy, Mat& dst, int& ksize, double& scale, double& delta, int& borderType) { cv::Sobel(src, dst, ddepth, dx, dy, ksize, scale, delta, borderType); return dst;});
    mod.method("jlopencv_cv_cv_spatialGradient",  [](Mat& src, Mat& dx, Mat& dy, int& ksize, int& borderType) { cv::spatialGradient(src, dx, dy, ksize, borderType); return make_tuple(move(dx),move(dy));});
    mod.method("jlopencv_cv_cv_Scharr",  [](Mat& src, int& ddepth, int& dx, int& dy, Mat& dst, double& scale, double& delta, int& borderType) { cv::Scharr(src, dst, ddepth, dx, dy, scale, delta, borderType); return dst;});
    mod.method("jlopencv_cv_cv_Laplacian",  [](Mat& src, int& ddepth, Mat& dst, int& ksize, double& scale, double& delta, int& borderType) { cv::Laplacian(src, dst, ddepth, ksize, scale, delta, borderType); return dst;});
    mod.method("jlopencv_cv_cv_Canny",  [](Mat& image, double& threshold1, double& threshold2, Mat& edges, int& apertureSize, bool L2gradient) { cv::Canny(image, edges, threshold1, threshold2, apertureSize, L2gradient); return edges;});
    mod.method("jlopencv_cv_cv_Canny",  [](Mat& dx, Mat& dy, double& threshold1, double& threshold2, Mat& edges, bool L2gradient) { cv::Canny(dx, dy, edges, threshold1, threshold2, L2gradient); return edges;});
    mod.method("jlopencv_cv_cv_cornerMinEigenVal",  [](Mat& src, int& blockSize, Mat& dst, int& ksize, int& borderType) { cv::cornerMinEigenVal(src, dst, blockSize, ksize, borderType); return dst;});
    mod.method("jlopencv_cv_cv_cornerHarris",  [](Mat& src, int& blockSize, int& ksize, double& k, Mat& dst, int& borderType) { cv::cornerHarris(src, dst, blockSize, ksize, k, borderType); return dst;});
    mod.method("jlopencv_cv_cv_cornerEigenValsAndVecs",  [](Mat& src, int& blockSize, int& ksize, Mat& dst, int& borderType) { cv::cornerEigenValsAndVecs(src, dst, blockSize, ksize, borderType); return dst;});
    mod.method("jlopencv_cv_cv_preCornerDetect",  [](Mat& src, int& ksize, Mat& dst, int& borderType) { cv::preCornerDetect(src, dst, ksize, borderType); return dst;});
    mod.method("jlopencv_cv_cv_cornerSubPix",  [](Mat& image, Mat& corners, Size& winSize, Size& zeroZone, TermCriteria& criteria) { cv::cornerSubPix(image, corners, winSize, zeroZone, criteria); return corners;});
    mod.method("jlopencv_cv_cv_goodFeaturesToTrack",  [](Mat& image, int& maxCorners, double& qualityLevel, double& minDistance, Mat& corners, Mat& mask, int& blockSize, bool useHarrisDetector, double& k) { cv::goodFeaturesToTrack(image, corners, maxCorners, qualityLevel, minDistance, mask, blockSize, useHarrisDetector, k); return corners;});
    mod.method("jlopencv_cv_cv_goodFeaturesToTrack",  [](Mat& image, int& maxCorners, double& qualityLevel, double& minDistance, Mat& mask, int& blockSize, int& gradientSize, Mat& corners, bool useHarrisDetector, double& k) { cv::goodFeaturesToTrack(image, corners, maxCorners, qualityLevel, minDistance, mask, blockSize, gradientSize, useHarrisDetector, k); return corners;});
    mod.method("jlopencv_cv_cv_HoughLines",  [](Mat& image, double& rho, double& theta, int& threshold, Mat& lines, double& srn, double& stn, double& min_theta, double& max_theta) { cv::HoughLines(image, lines, rho, theta, threshold, srn, stn, min_theta, max_theta); return lines;});
    mod.method("jlopencv_cv_cv_HoughLinesP",  [](Mat& image, double& rho, double& theta, int& threshold, Mat& lines, double& minLineLength, double& maxLineGap) { cv::HoughLinesP(image, lines, rho, theta, threshold, minLineLength, maxLineGap); return lines;});
    mod.method("jlopencv_cv_cv_HoughLinesPointSet",  [](Mat& _point, int& lines_max, int& threshold, double& min_rho, double& max_rho, double& rho_step, double& min_theta, double& max_theta, double& theta_step, Mat& _lines) { cv::HoughLinesPointSet(_point, _lines, lines_max, threshold, min_rho, max_rho, rho_step, min_theta, max_theta, theta_step); return _lines;});
    mod.method("jlopencv_cv_cv_HoughCircles",  [](Mat& image, int& method, double& dp, double& minDist, Mat& circles, double& param1, double& param2, int& minRadius, int& maxRadius) { cv::HoughCircles(image, circles, method, dp, minDist, param1, param2, minRadius, maxRadius); return circles;});
    mod.method("jlopencv_cv_cv_erode",  [](Mat& src, Mat& kernel, Mat& dst, Point& anchor, int& iterations, int& borderType, Scalar& borderValue) { cv::erode(src, dst, kernel, anchor, iterations, borderType, borderValue); return dst;});
    mod.method("jlopencv_cv_cv_dilate",  [](Mat& src, Mat& kernel, Mat& dst, Point& anchor, int& iterations, int& borderType, Scalar& borderValue) { cv::dilate(src, dst, kernel, anchor, iterations, borderType, borderValue); return dst;});
    mod.method("jlopencv_cv_cv_morphologyEx",  [](Mat& src, int& op, Mat& kernel, Mat& dst, Point& anchor, int& iterations, int& borderType, Scalar& borderValue) { cv::morphologyEx(src, dst, op, kernel, anchor, iterations, borderType, borderValue); return dst;});
    mod.method("jlopencv_cv_cv_resize",  [](Mat& src, Size& dsize, Mat& dst, double& fx, double& fy, int& interpolation) { cv::resize(src, dst, dsize, fx, fy, interpolation); return dst;});
    mod.method("jlopencv_cv_cv_warpAffine",  [](Mat& src, Mat& M, Size& dsize, Mat& dst, int& flags, int& borderMode, Scalar& borderValue) { cv::warpAffine(src, dst, M, dsize, flags, borderMode, borderValue); return dst;});
    mod.method("jlopencv_cv_cv_warpPerspective",  [](Mat& src, Mat& M, Size& dsize, Mat& dst, int& flags, int& borderMode, Scalar& borderValue) { cv::warpPerspective(src, dst, M, dsize, flags, borderMode, borderValue); return dst;});
    mod.method("jlopencv_cv_cv_remap",  [](Mat& src, Mat& map1, Mat& map2, int& interpolation, Mat& dst, int& borderMode, Scalar& borderValue) { cv::remap(src, dst, map1, map2, interpolation, borderMode, borderValue); return dst;});
    mod.method("jlopencv_cv_cv_convertMaps",  [](Mat& map1, Mat& map2, int& dstmap1type, Mat& dstmap1, Mat& dstmap2, bool nninterpolation) { cv::convertMaps(map1, map2, dstmap1, dstmap2, dstmap1type, nninterpolation); return make_tuple(move(dstmap1),move(dstmap2));});
    mod.method("jlopencv_cv_cv_getRotationMatrix2D",  [](Point2f& center, double& angle, double& scale) { auto retval = cv::getRotationMatrix2D(center, angle, scale); return retval;});
    mod.method("jlopencv_cv_cv_invertAffineTransform",  [](Mat& M, Mat& iM) { cv::invertAffineTransform(M, iM); return iM;});
    mod.method("jlopencv_cv_cv_getPerspectiveTransform",  [](Mat& src, Mat& dst, int& solveMethod) { auto retval = cv::getPerspectiveTransform(src, dst, solveMethod); return retval;});
    mod.method("jlopencv_cv_cv_getAffineTransform",  [](Mat& src, Mat& dst) { auto retval = cv::getAffineTransform(src, dst); return retval;});
    mod.method("jlopencv_cv_cv_getRectSubPix",  [](Mat& image, Size& patchSize, Point2f& center, Mat& patch, int& patchType) { cv::getRectSubPix(image, patchSize, center, patch, patchType); return patch;});
    mod.method("jlopencv_cv_cv_logPolar",  [](Mat& src, Point2f& center, double& M, int& flags, Mat& dst) { cv::logPolar(src, dst, center, M, flags); return dst;});
    mod.method("jlopencv_cv_cv_linearPolar",  [](Mat& src, Point2f& center, double& maxRadius, int& flags, Mat& dst) { cv::linearPolar(src, dst, center, maxRadius, flags); return dst;});
    mod.method("jlopencv_cv_cv_warpPolar",  [](Mat& src, Size& dsize, Point2f& center, double& maxRadius, int& flags, Mat& dst) { cv::warpPolar(src, dst, dsize, center, maxRadius, flags); return dst;});
    mod.method("jlopencv_cv_cv_integral",  [](Mat& src, Mat& sum, int& sdepth) { cv::integral(src, sum, sdepth); return sum;});
    mod.method("jlopencv_cv_cv_integral",  [](Mat& src, Mat& sum, Mat& sqsum, int& sdepth, int& sqdepth) { cv::integral(src, sum, sqsum, sdepth, sqdepth); return make_tuple(move(sum),move(sqsum));});
    mod.method("jlopencv_cv_cv_integral",  [](Mat& src, Mat& sum, Mat& sqsum, Mat& tilted, int& sdepth, int& sqdepth) { cv::integral(src, sum, sqsum, tilted, sdepth, sqdepth); return make_tuple(move(sum),move(sqsum),move(tilted));});
    mod.method("jlopencv_cv_cv_accumulate",  [](Mat& src, Mat& dst, Mat& mask) { cv::accumulate(src, dst, mask); return dst;});
    mod.method("jlopencv_cv_cv_accumulateSquare",  [](Mat& src, Mat& dst, Mat& mask) { cv::accumulateSquare(src, dst, mask); return dst;});
    mod.method("jlopencv_cv_cv_accumulateProduct",  [](Mat& src1, Mat& src2, Mat& dst, Mat& mask) { cv::accumulateProduct(src1, src2, dst, mask); return dst;});
    mod.method("jlopencv_cv_cv_accumulateWeighted",  [](Mat& src, Mat& dst, double& alpha, Mat& mask) { cv::accumulateWeighted(src, dst, alpha, mask); return dst;});
    mod.method("jlopencv_cv_cv_phaseCorrelate",  [](Mat& src1, Mat& src2, Mat& window) {double response; auto retval = cv::phaseCorrelate(src1, src2, window, &response); return make_tuple(move(retval),move(response));});
    mod.method("jlopencv_cv_cv_createHanningWindow",  [](Size& winSize, int& type, Mat& dst) { cv::createHanningWindow(dst, winSize, type); return dst;});
    mod.method("jlopencv_cv_cv_threshold",  [](Mat& src, double& thresh, double& maxval, int& type, Mat& dst) { auto retval = cv::threshold(src, dst, thresh, maxval, type); return make_tuple(move(retval),move(dst));});
    mod.method("jlopencv_cv_cv_adaptiveThreshold",  [](Mat& src, double& maxValue, int& adaptiveMethod, int& thresholdType, int& blockSize, double& C, Mat& dst) { cv::adaptiveThreshold(src, dst, maxValue, adaptiveMethod, thresholdType, blockSize, C); return dst;});
    mod.method("jlopencv_cv_cv_pyrDown",  [](Mat& src, Mat& dst, Size& dstsize, int& borderType) { cv::pyrDown(src, dst, dstsize, borderType); return dst;});
    mod.method("jlopencv_cv_cv_pyrUp",  [](Mat& src, Mat& dst, Size& dstsize, int& borderType) { cv::pyrUp(src, dst, dstsize, borderType); return dst;});
    mod.method("jlopencv_cv_cv_calcHist",  [](vector<Mat>& images, vector<int>& channels, Mat& mask, vector<int>& histSize, vector<float>& ranges, Mat& hist, bool accumulate) { cv::calcHist(images, channels, mask, hist, histSize, ranges, accumulate); return hist;});
    mod.method("jlopencv_cv_cv_calcBackProject",  [](vector<Mat>& images, vector<int>& channels, Mat& hist, vector<float>& ranges, double& scale, Mat& dst) { cv::calcBackProject(images, channels, hist, dst, ranges, scale); return dst;});
    mod.method("jlopencv_cv_cv_compareHist",  [](Mat& H1, Mat& H2, int& method) { auto retval = cv::compareHist(H1, H2, method); return retval;});
    mod.method("jlopencv_cv_cv_equalizeHist",  [](Mat& src, Mat& dst) { cv::equalizeHist(src, dst); return dst;});
    mod.method("jlopencv_cv_cv_createCLAHE",  [](double& clipLimit, Size& tileGridSize) { auto retval = cv::createCLAHE(clipLimit, tileGridSize); return retval;});
    mod.method("jlopencv_cv_cv_wrapperEMD",  [](Mat& signature1, Mat& signature2, int& distType, Mat& cost, Ptr<float>& lowerBound, Mat& flow) { auto retval = cv::wrapperEMD(signature1, signature2, distType, cost, lowerBound, flow); return make_tuple(move(retval),move(lowerBound),move(flow));});
    mod.method("jlopencv_cv_cv_watershed",  [](Mat& image, Mat& markers) { cv::watershed(image, markers); return markers;});
    mod.method("jlopencv_cv_cv_pyrMeanShiftFiltering",  [](Mat& src, double& sp, double& sr, Mat& dst, int& maxLevel, TermCriteria& termcrit) { cv::pyrMeanShiftFiltering(src, dst, sp, sr, maxLevel, termcrit); return dst;});
    mod.method("jlopencv_cv_cv_grabCut",  [](Mat& img, Mat& mask, Rect& rect, Mat& bgdModel, Mat& fgdModel, int& iterCount, int& mode) { cv::grabCut(img, mask, rect, bgdModel, fgdModel, iterCount, mode); return make_tuple(move(mask),move(bgdModel),move(fgdModel));});
    mod.method("jlopencv_cv_cv_distanceTransform",  [](Mat& src, int& distanceType, int& maskSize, Mat& dst, Mat& labels, int& labelType) { cv::distanceTransform(src, dst, labels, distanceType, maskSize, labelType); return make_tuple(move(dst),move(labels));});
    mod.method("jlopencv_cv_cv_distanceTransform",  [](Mat& src, int& distanceType, int& maskSize, Mat& dst, int& dstType) { cv::distanceTransform(src, dst, distanceType, maskSize, dstType); return dst;});
    mod.method("jlopencv_cv_cv_floodFill",  [](Mat& image, Mat& mask, Point& seedPoint, Scalar& newVal, Scalar& loDiff, Scalar& upDiff, int& flags) {Rect rect; auto retval = cv::floodFill(image, mask, seedPoint, newVal, &rect, loDiff, upDiff, flags); return make_tuple(move(retval),move(image),move(mask),move(rect));});
    mod.method("jlopencv_cv_cv_cvtColor",  [](Mat& src, int& code, Mat& dst, int& dstCn) { cv::cvtColor(src, dst, code, dstCn); return dst;});
    mod.method("jlopencv_cv_cv_cvtColorTwoPlane",  [](Mat& src1, Mat& src2, int& code, Mat& dst) { cv::cvtColorTwoPlane(src1, src2, dst, code); return dst;});
    mod.method("jlopencv_cv_cv_demosaicing",  [](Mat& src, int& code, Mat& dst, int& dstCn) { cv::demosaicing(src, dst, code, dstCn); return dst;});
    mod.method("jlopencv_cv_cv_moments",  [](Mat& array, bool binaryImage) { auto retval = cv::moments(array, binaryImage); return retval;});
    mod.method("jlopencv_cv_cv_HuMoments",  [](Moments& m, Mat& hu) { cv::HuMoments(m, hu); return hu;});
    mod.method("jlopencv_cv_cv_matchTemplate",  [](Mat& image, Mat& templ, int& method, Mat& result, Mat& mask) { cv::matchTemplate(image, templ, result, method, mask); return result;});
    mod.method("jlopencv_cv_cv_connectedComponents",  [](Mat& image, int& connectivity, int& ltype, int& ccltype, Mat& labels) { auto retval = cv::connectedComponents(image, labels, connectivity, ltype, ccltype); return make_tuple(move(retval),move(labels));});
    mod.method("jlopencv_cv_cv_connectedComponents",  [](Mat& image, Mat& labels, int& connectivity, int& ltype) { auto retval = cv::connectedComponents(image, labels, connectivity, ltype); return make_tuple(move(retval),move(labels));});
    mod.method("jlopencv_cv_cv_connectedComponentsWithStats",  [](Mat& image, int& connectivity, int& ltype, int& ccltype, Mat& labels, Mat& stats, Mat& centroids) { auto retval = cv::connectedComponentsWithStats(image, labels, stats, centroids, connectivity, ltype, ccltype); return make_tuple(move(retval),move(labels),move(stats),move(centroids));});
    mod.method("jlopencv_cv_cv_connectedComponentsWithStats",  [](Mat& image, Mat& labels, Mat& stats, Mat& centroids, int& connectivity, int& ltype) { auto retval = cv::connectedComponentsWithStats(image, labels, stats, centroids, connectivity, ltype); return make_tuple(move(retval),move(labels),move(stats),move(centroids));});
    mod.method("jlopencv_cv_cv_findContours",  [](Mat& image, int& mode, int& method, vector<Mat>& contours, Mat& hierarchy, Point& offset) { cv::findContours(image, contours, hierarchy, mode, method, offset); return make_tuple(move(contours),move(hierarchy));});
    mod.method("jlopencv_cv_cv_approxPolyDP",  [](Mat& curve, double& epsilon, bool closed, Mat& approxCurve) { cv::approxPolyDP(curve, approxCurve, epsilon, closed); return approxCurve;});
    mod.method("jlopencv_cv_cv_arcLength",  [](Mat& curve, bool closed) { auto retval = cv::arcLength(curve, closed); return retval;});
    mod.method("jlopencv_cv_cv_boundingRect",  [](Mat& array) { auto retval = cv::boundingRect(array); return retval;});
    mod.method("jlopencv_cv_cv_contourArea",  [](Mat& contour, bool oriented) { auto retval = cv::contourArea(contour, oriented); return retval;});
    mod.method("jlopencv_cv_cv_minAreaRect",  [](Mat& points) { auto retval = cv::minAreaRect(points); return retval;});
    mod.method("jlopencv_cv_cv_boxPoints",  [](RotatedRect& box, Mat& points) { cv::boxPoints(box, points); return points;});
    mod.method("jlopencv_cv_cv_minEnclosingCircle",  [](Mat& points) {Point2f center;float radius; cv::minEnclosingCircle(points, center, radius); return make_tuple(move(center),move(radius));});
    mod.method("jlopencv_cv_cv_minEnclosingTriangle",  [](Mat& points, Mat& triangle) { auto retval = cv::minEnclosingTriangle(points, triangle); return make_tuple(move(retval),move(triangle));});
    mod.method("jlopencv_cv_cv_matchShapes",  [](Mat& contour1, Mat& contour2, int& method, double& parameter) { auto retval = cv::matchShapes(contour1, contour2, method, parameter); return retval;});
    mod.method("jlopencv_cv_cv_convexHull",  [](Mat& points, Mat& hull, bool clockwise, bool returnPoints) { cv::convexHull(points, hull, clockwise, returnPoints); return hull;});
    mod.method("jlopencv_cv_cv_convexityDefects",  [](Mat& contour, Mat& convexhull, Mat& convexityDefects) { cv::convexityDefects(contour, convexhull, convexityDefects); return convexityDefects;});
    mod.method("jlopencv_cv_cv_isContourConvex",  [](Mat& contour) { auto retval = cv::isContourConvex(contour); return retval;});
    mod.method("jlopencv_cv_cv_intersectConvexConvex",  [](Mat& _p1, Mat& _p2, Mat& _p12, bool handleNested) { auto retval = cv::intersectConvexConvex(_p1, _p2, _p12, handleNested); return make_tuple(move(retval),move(_p12));});
    mod.method("jlopencv_cv_cv_fitEllipse",  [](Mat& points) { auto retval = cv::fitEllipse(points); return retval;});
    mod.method("jlopencv_cv_cv_fitEllipseAMS",  [](Mat& points) { auto retval = cv::fitEllipseAMS(points); return retval;});
    mod.method("jlopencv_cv_cv_fitEllipseDirect",  [](Mat& points) { auto retval = cv::fitEllipseDirect(points); return retval;});
    mod.method("jlopencv_cv_cv_fitLine",  [](Mat& points, int& distType, double& param, double& reps, double& aeps, Mat& line) { cv::fitLine(points, line, distType, param, reps, aeps); return line;});
    mod.method("jlopencv_cv_cv_pointPolygonTest",  [](Mat& contour, Point2f& pt, bool measureDist) { auto retval = cv::pointPolygonTest(contour, pt, measureDist); return retval;});
    mod.method("jlopencv_cv_cv_rotatedRectangleIntersection",  [](RotatedRect& rect1, RotatedRect& rect2, Mat& intersectingRegion) { auto retval = cv::rotatedRectangleIntersection(rect1, rect2, intersectingRegion); return make_tuple(move(retval),move(intersectingRegion));});
    mod.method("jlopencv_cv_cv_createGeneralizedHoughBallard",  []() { auto retval = cv::createGeneralizedHoughBallard(); return retval;});
    mod.method("jlopencv_cv_cv_createGeneralizedHoughGuil",  []() { auto retval = cv::createGeneralizedHoughGuil(); return retval;});
    mod.method("jlopencv_cv_cv_applyColorMap",  [](Mat& src, int& colormap, Mat& dst) { cv::applyColorMap(src, dst, colormap); return dst;});
    mod.method("jlopencv_cv_cv_applyColorMap",  [](Mat& src, Mat& userColor, Mat& dst) { cv::applyColorMap(src, dst, userColor); return dst;});
    mod.method("jlopencv_cv_cv_line",  [](Mat& img, Point& pt1, Point& pt2, Scalar& color, int& thickness, int& lineType, int& shift) { cv::line(img, pt1, pt2, color, thickness, lineType, shift); return img;});
    mod.method("jlopencv_cv_cv_arrowedLine",  [](Mat& img, Point& pt1, Point& pt2, Scalar& color, int& thickness, int& line_type, int& shift, double& tipLength) { cv::arrowedLine(img, pt1, pt2, color, thickness, line_type, shift, tipLength); return img;});
    mod.method("jlopencv_cv_cv_rectangle",  [](Mat& img, Point& pt1, Point& pt2, Scalar& color, int& thickness, int& lineType, int& shift) { cv::rectangle(img, pt1, pt2, color, thickness, lineType, shift); return img;});
    mod.method("jlopencv_cv_cv_rectangle",  [](Mat& img, Rect& rec, Scalar& color, int& thickness, int& lineType, int& shift) { cv::rectangle(img, rec, color, thickness, lineType, shift); return img;});
    mod.method("jlopencv_cv_cv_circle",  [](Mat& img, Point& center, int& radius, Scalar& color, int& thickness, int& lineType, int& shift) { cv::circle(img, center, radius, color, thickness, lineType, shift); return img;});
    mod.method("jlopencv_cv_cv_ellipse",  [](Mat& img, Point& center, Size& axes, double& angle, double& startAngle, double& endAngle, Scalar& color, int& thickness, int& lineType, int& shift) { cv::ellipse(img, center, axes, angle, startAngle, endAngle, color, thickness, lineType, shift); return img;});
    mod.method("jlopencv_cv_cv_ellipse",  [](Mat& img, RotatedRect& box, Scalar& color, int& thickness, int& lineType) { cv::ellipse(img, box, color, thickness, lineType); return img;});
    mod.method("jlopencv_cv_cv_drawMarker",  [](Mat& img, Point& position, Scalar& color, int& markerType, int& markerSize, int& thickness, int& line_type) { cv::drawMarker(img, position, color, markerType, markerSize, thickness, line_type); return img;});
    mod.method("jlopencv_cv_cv_fillConvexPoly",  [](Mat& img, Mat& points, Scalar& color, int& lineType, int& shift) { cv::fillConvexPoly(img, points, color, lineType, shift); return img;});
    mod.method("jlopencv_cv_cv_fillPoly",  [](Mat& img, vector<Mat>& pts, Scalar& color, int& lineType, int& shift, Point& offset) { cv::fillPoly(img, pts, color, lineType, shift, offset); return img;});
    mod.method("jlopencv_cv_cv_polylines",  [](Mat& img, vector<Mat>& pts, bool isClosed, Scalar& color, int& thickness, int& lineType, int& shift) { cv::polylines(img, pts, isClosed, color, thickness, lineType, shift); return img;});
    mod.method("jlopencv_cv_cv_drawContours",  [](Mat& image, vector<Mat>& contours, int& contourIdx, Scalar& color, int& thickness, int& lineType, Mat& hierarchy, int& maxLevel, Point& offset) { cv::drawContours(image, contours, contourIdx, color, thickness, lineType, hierarchy, maxLevel, offset); return image;});
    mod.method("jlopencv_cv_cv_clipLine",  [](Rect& imgRect, Point& pt1, Point& pt2) { auto retval = cv::clipLine(imgRect, pt1, pt2); return make_tuple(move(retval),move(pt1),move(pt2));});
    mod.method("jlopencv_cv_cv_ellipse2Poly",  [](Point& center, Size& axes, int& angle, int& arcStart, int& arcEnd, int& delta) {vector<Point> pts; cv::ellipse2Poly(center, axes, angle, arcStart, arcEnd, delta, pts); return pts;});
    mod.method("jlopencv_cv_cv_putText",  [](Mat& img, string& text, Point& org, int& fontFace, double& fontScale, Scalar& color, int& thickness, int& lineType, bool bottomLeftOrigin) { cv::putText(img, text, org, fontFace, fontScale, color, thickness, lineType, bottomLeftOrigin); return img;});
    mod.method("jlopencv_cv_cv_getTextSize",  [](string& text, int& fontFace, double& fontScale, int& thickness) {int baseLine; auto retval = cv::getTextSize(text, fontFace, fontScale, thickness, &baseLine); return make_tuple(move(retval),move(baseLine));});
    mod.method("jlopencv_cv_cv_getFontScaleFromHeight",  [](int& fontFace, int& pixelHeight, int& thickness) { auto retval = cv::getFontScaleFromHeight(fontFace, pixelHeight, thickness); return retval;});
    mod.method("jlopencv_cv_cv_imread",  [](string& filename, int& flags) { auto retval = cv::imread(filename, flags); return retval;});
    mod.method("jlopencv_cv_cv_imreadmulti",  [](string& filename, vector<Mat>& mats, int& flags) { auto retval = cv::imreadmulti(filename, mats, flags); return make_tuple(move(retval),move(mats));});
    mod.method("jlopencv_cv_cv_imwrite",  [](string& filename, Mat& img, vector<int>& params) { auto retval = cv::imwrite(filename, img, params); return retval;});
    mod.method("jlopencv_cv_cv_imdecode",  [](Mat& buf, int& flags) { auto retval = cv::imdecode(buf, flags); return retval;});
    mod.method("jlopencv_cv_cv_imencode",  [](string& ext, Mat& img, vector<int>& params) {vector<uchar> buf; auto retval = cv::imencode(ext, img, buf, params); return make_tuple(move(retval),move(buf));});
    mod.method("jlopencv_cv_cv_haveImageReader",  [](string& filename) { auto retval = cv::haveImageReader(filename); return retval;});
    mod.method("jlopencv_cv_cv_haveImageWriter",  [](string& filename) { auto retval = cv::haveImageWriter(filename); return retval;});
    mod.method("jlopencv_cv_cv_VideoWriter_fourcc",  [](char& c1, char& c2, char& c3, char& c4) { auto retval = cv::VideoWriter::fourcc(c1, c2, c3, c4); return retval;});
    mod.method("jlopencv_cv_cv_namedWindow",  [](string& winname, int& flags) { cv::namedWindow(winname, flags); ;});
    mod.method("jlopencv_cv_cv_destroyWindow",  [](string& winname) { cv::destroyWindow(winname); ;});
    mod.method("jlopencv_cv_cv_destroyAllWindows",  []() { cv::destroyAllWindows(); ;});
    mod.method("jlopencv_cv_cv_startWindowThread",  []() { auto retval = cv::startWindowThread(); return retval;});
    mod.method("jlopencv_cv_cv_waitKeyEx",  [](int& delay) { auto retval = cv::waitKeyEx(delay); return retval;});
    mod.method("jlopencv_cv_cv_waitKey",  [](int& delay) { auto retval = cv::waitKey(delay); return retval;});
    mod.method("jlopencv_cv_cv_imshow",  [](string& winname, Mat& mat) { cv::imshow(winname, mat); ;});
    mod.method("jlopencv_cv_cv_resizeWindow",  [](string& winname, int& width, int& height) { cv::resizeWindow(winname, width, height); ;});
    mod.method("jlopencv_cv_cv_resizeWindow",  [](string& winname, Size& size) { cv::resizeWindow(winname, size); ;});
    mod.method("jlopencv_cv_cv_moveWindow",  [](string& winname, int& x, int& y) { cv::moveWindow(winname, x, y); ;});
    mod.method("jlopencv_cv_cv_setWindowProperty",  [](string& winname, int& prop_id, double& prop_value) { cv::setWindowProperty(winname, prop_id, prop_value); ;});
    mod.method("jlopencv_cv_cv_setWindowTitle",  [](string& winname, string& title) { cv::setWindowTitle(winname, title); ;});
    mod.method("jlopencv_cv_cv_getWindowProperty",  [](string& winname, int& prop_id) { auto retval = cv::getWindowProperty(winname, prop_id); return retval;});
    mod.method("jlopencv_cv_cv_getWindowImageRect",  [](string& winname) { auto retval = cv::getWindowImageRect(winname); return retval;});
    mod.method("jlopencv_cv_cv_selectROI",  [](string& windowName, Mat& img, bool showCrosshair, bool fromCenter) { auto retval = cv::selectROI(windowName, img, showCrosshair, fromCenter); return retval;});
    mod.method("jlopencv_cv_cv_selectROI",  [](Mat& img, bool showCrosshair, bool fromCenter) { auto retval = cv::selectROI(img, showCrosshair, fromCenter); return retval;});
    mod.method("jlopencv_cv_cv_selectROIs",  [](string& windowName, Mat& img, bool showCrosshair, bool fromCenter) {vector<Rect> boundingBoxes; cv::selectROIs(windowName, img, boundingBoxes, showCrosshair, fromCenter); return boundingBoxes;});
    mod.method("jlopencv_cv_cv_getTrackbarPos",  [](string& trackbarname, string& winname) { auto retval = cv::getTrackbarPos(trackbarname, winname); return retval;});
    mod.method("jlopencv_cv_cv_setTrackbarPos",  [](string& trackbarname, string& winname, int& pos) { cv::setTrackbarPos(trackbarname, winname, pos); ;});
    mod.method("jlopencv_cv_cv_setTrackbarMax",  [](string& trackbarname, string& winname, int& maxval) { cv::setTrackbarMax(trackbarname, winname, maxval); ;});
    mod.method("jlopencv_cv_cv_setTrackbarMin",  [](string& trackbarname, string& winname, int& minval) { cv::setTrackbarMin(trackbarname, winname, minval); ;});
    mod.method("jlopencv_cv_cv_addText",  [](Mat& img, string& text, Point& org, string& nameFont, int& pointSize, Scalar& color, int& weight, int& style, int& spacing) { cv::addText(img, text, org, nameFont, pointSize, color, weight, style, spacing); ;});
    mod.method("jlopencv_cv_cv_displayOverlay",  [](string& winname, string& text, int& delayms) { cv::displayOverlay(winname, text, delayms); ;});    mod.set_const("cv_ADAPTIVE_THRESH_GAUSSIAN_C", (force_enum_int<decltype(cv::ADAPTIVE_THRESH_GAUSSIAN_C)>::Type)cv::ADAPTIVE_THRESH_GAUSSIAN_C);
    mod.set_const("cv_ADAPTIVE_THRESH_MEAN_C", (force_enum_int<decltype(cv::ADAPTIVE_THRESH_MEAN_C)>::Type)cv::ADAPTIVE_THRESH_MEAN_C);
    mod.set_const("cv_BORDER_CONSTANT", (force_enum_int<decltype(cv::BORDER_CONSTANT)>::Type)cv::BORDER_CONSTANT);
    mod.set_const("cv_BORDER_DEFAULT", (force_enum_int<decltype(cv::BORDER_DEFAULT)>::Type)cv::BORDER_DEFAULT);
    mod.set_const("cv_BORDER_ISOLATED", (force_enum_int<decltype(cv::BORDER_ISOLATED)>::Type)cv::BORDER_ISOLATED);
    mod.set_const("cv_BORDER_REFLECT", (force_enum_int<decltype(cv::BORDER_REFLECT)>::Type)cv::BORDER_REFLECT);
    mod.set_const("cv_BORDER_REFLECT101", (force_enum_int<decltype(cv::BORDER_REFLECT101)>::Type)cv::BORDER_REFLECT101);
    mod.set_const("cv_BORDER_REFLECT_101", (force_enum_int<decltype(cv::BORDER_REFLECT_101)>::Type)cv::BORDER_REFLECT_101);
    mod.set_const("cv_BORDER_REPLICATE", (force_enum_int<decltype(cv::BORDER_REPLICATE)>::Type)cv::BORDER_REPLICATE);
    mod.set_const("cv_BORDER_TRANSPARENT", (force_enum_int<decltype(cv::BORDER_TRANSPARENT)>::Type)cv::BORDER_TRANSPARENT);
    mod.set_const("cv_BORDER_WRAP", (force_enum_int<decltype(cv::BORDER_WRAP)>::Type)cv::BORDER_WRAP);
    mod.set_const("cv_CAP_ANDROID", (force_enum_int<decltype(cv::CAP_ANDROID)>::Type)cv::CAP_ANDROID);
    mod.set_const("cv_CAP_ANY", (force_enum_int<decltype(cv::CAP_ANY)>::Type)cv::CAP_ANY);
    mod.set_const("cv_CAP_ARAVIS", (force_enum_int<decltype(cv::CAP_ARAVIS)>::Type)cv::CAP_ARAVIS);
    mod.set_const("cv_CAP_AVFOUNDATION", (force_enum_int<decltype(cv::CAP_AVFOUNDATION)>::Type)cv::CAP_AVFOUNDATION);
    mod.set_const("cv_CAP_CMU1394", (force_enum_int<decltype(cv::CAP_CMU1394)>::Type)cv::CAP_CMU1394);
    mod.set_const("cv_CAP_DC1394", (force_enum_int<decltype(cv::CAP_DC1394)>::Type)cv::CAP_DC1394);
    mod.set_const("cv_CAP_DSHOW", (force_enum_int<decltype(cv::CAP_DSHOW)>::Type)cv::CAP_DSHOW);
    mod.set_const("cv_CAP_FFMPEG", (force_enum_int<decltype(cv::CAP_FFMPEG)>::Type)cv::CAP_FFMPEG);
    mod.set_const("cv_CAP_FIREWARE", (force_enum_int<decltype(cv::CAP_FIREWARE)>::Type)cv::CAP_FIREWARE);
    mod.set_const("cv_CAP_FIREWIRE", (force_enum_int<decltype(cv::CAP_FIREWIRE)>::Type)cv::CAP_FIREWIRE);
    mod.set_const("cv_CAP_GIGANETIX", (force_enum_int<decltype(cv::CAP_GIGANETIX)>::Type)cv::CAP_GIGANETIX);
    mod.set_const("cv_CAP_GPHOTO2", (force_enum_int<decltype(cv::CAP_GPHOTO2)>::Type)cv::CAP_GPHOTO2);
    mod.set_const("cv_CAP_GSTREAMER", (force_enum_int<decltype(cv::CAP_GSTREAMER)>::Type)cv::CAP_GSTREAMER);
    mod.set_const("cv_CAP_IEEE1394", (force_enum_int<decltype(cv::CAP_IEEE1394)>::Type)cv::CAP_IEEE1394);
    mod.set_const("cv_CAP_IMAGES", (force_enum_int<decltype(cv::CAP_IMAGES)>::Type)cv::CAP_IMAGES);
    mod.set_const("cv_CAP_INTELPERC", (force_enum_int<decltype(cv::CAP_INTELPERC)>::Type)cv::CAP_INTELPERC);
    mod.set_const("cv_CAP_INTELPERC_DEPTH_GENERATOR", (force_enum_int<decltype(cv::CAP_INTELPERC_DEPTH_GENERATOR)>::Type)cv::CAP_INTELPERC_DEPTH_GENERATOR);
    mod.set_const("cv_CAP_INTELPERC_DEPTH_MAP", (force_enum_int<decltype(cv::CAP_INTELPERC_DEPTH_MAP)>::Type)cv::CAP_INTELPERC_DEPTH_MAP);
    mod.set_const("cv_CAP_INTELPERC_GENERATORS_MASK", (force_enum_int<decltype(cv::CAP_INTELPERC_GENERATORS_MASK)>::Type)cv::CAP_INTELPERC_GENERATORS_MASK);
    mod.set_const("cv_CAP_INTELPERC_IMAGE", (force_enum_int<decltype(cv::CAP_INTELPERC_IMAGE)>::Type)cv::CAP_INTELPERC_IMAGE);
    mod.set_const("cv_CAP_INTELPERC_IMAGE_GENERATOR", (force_enum_int<decltype(cv::CAP_INTELPERC_IMAGE_GENERATOR)>::Type)cv::CAP_INTELPERC_IMAGE_GENERATOR);
    mod.set_const("cv_CAP_INTELPERC_IR_GENERATOR", (force_enum_int<decltype(cv::CAP_INTELPERC_IR_GENERATOR)>::Type)cv::CAP_INTELPERC_IR_GENERATOR);
    mod.set_const("cv_CAP_INTELPERC_IR_MAP", (force_enum_int<decltype(cv::CAP_INTELPERC_IR_MAP)>::Type)cv::CAP_INTELPERC_IR_MAP);
    mod.set_const("cv_CAP_INTELPERC_UVDEPTH_MAP", (force_enum_int<decltype(cv::CAP_INTELPERC_UVDEPTH_MAP)>::Type)cv::CAP_INTELPERC_UVDEPTH_MAP);
    mod.set_const("cv_CAP_INTEL_MFX", (force_enum_int<decltype(cv::CAP_INTEL_MFX)>::Type)cv::CAP_INTEL_MFX);
    mod.set_const("cv_CAP_MSMF", (force_enum_int<decltype(cv::CAP_MSMF)>::Type)cv::CAP_MSMF);
    mod.set_const("cv_CAP_OPENCV_MJPEG", (force_enum_int<decltype(cv::CAP_OPENCV_MJPEG)>::Type)cv::CAP_OPENCV_MJPEG);
    mod.set_const("cv_CAP_OPENNI", (force_enum_int<decltype(cv::CAP_OPENNI)>::Type)cv::CAP_OPENNI);
    mod.set_const("cv_CAP_OPENNI2", (force_enum_int<decltype(cv::CAP_OPENNI2)>::Type)cv::CAP_OPENNI2);
    mod.set_const("cv_CAP_OPENNI2_ASUS", (force_enum_int<decltype(cv::CAP_OPENNI2_ASUS)>::Type)cv::CAP_OPENNI2_ASUS);
    mod.set_const("cv_CAP_OPENNI_ASUS", (force_enum_int<decltype(cv::CAP_OPENNI_ASUS)>::Type)cv::CAP_OPENNI_ASUS);
    mod.set_const("cv_CAP_OPENNI_BGR_IMAGE", (force_enum_int<decltype(cv::CAP_OPENNI_BGR_IMAGE)>::Type)cv::CAP_OPENNI_BGR_IMAGE);
    mod.set_const("cv_CAP_OPENNI_DEPTH_GENERATOR", (force_enum_int<decltype(cv::CAP_OPENNI_DEPTH_GENERATOR)>::Type)cv::CAP_OPENNI_DEPTH_GENERATOR);
    mod.set_const("cv_CAP_OPENNI_DEPTH_GENERATOR_BASELINE", (force_enum_int<decltype(cv::CAP_OPENNI_DEPTH_GENERATOR_BASELINE)>::Type)cv::CAP_OPENNI_DEPTH_GENERATOR_BASELINE);
    mod.set_const("cv_CAP_OPENNI_DEPTH_GENERATOR_FOCAL_LENGTH", (force_enum_int<decltype(cv::CAP_OPENNI_DEPTH_GENERATOR_FOCAL_LENGTH)>::Type)cv::CAP_OPENNI_DEPTH_GENERATOR_FOCAL_LENGTH);
    mod.set_const("cv_CAP_OPENNI_DEPTH_GENERATOR_PRESENT", (force_enum_int<decltype(cv::CAP_OPENNI_DEPTH_GENERATOR_PRESENT)>::Type)cv::CAP_OPENNI_DEPTH_GENERATOR_PRESENT);
    mod.set_const("cv_CAP_OPENNI_DEPTH_GENERATOR_REGISTRATION", (force_enum_int<decltype(cv::CAP_OPENNI_DEPTH_GENERATOR_REGISTRATION)>::Type)cv::CAP_OPENNI_DEPTH_GENERATOR_REGISTRATION);
    mod.set_const("cv_CAP_OPENNI_DEPTH_GENERATOR_REGISTRATION_ON", (force_enum_int<decltype(cv::CAP_OPENNI_DEPTH_GENERATOR_REGISTRATION_ON)>::Type)cv::CAP_OPENNI_DEPTH_GENERATOR_REGISTRATION_ON);
    mod.set_const("cv_CAP_OPENNI_DEPTH_MAP", (force_enum_int<decltype(cv::CAP_OPENNI_DEPTH_MAP)>::Type)cv::CAP_OPENNI_DEPTH_MAP);
    mod.set_const("cv_CAP_OPENNI_DISPARITY_MAP", (force_enum_int<decltype(cv::CAP_OPENNI_DISPARITY_MAP)>::Type)cv::CAP_OPENNI_DISPARITY_MAP);
    mod.set_const("cv_CAP_OPENNI_DISPARITY_MAP_32F", (force_enum_int<decltype(cv::CAP_OPENNI_DISPARITY_MAP_32F)>::Type)cv::CAP_OPENNI_DISPARITY_MAP_32F);
    mod.set_const("cv_CAP_OPENNI_GENERATORS_MASK", (force_enum_int<decltype(cv::CAP_OPENNI_GENERATORS_MASK)>::Type)cv::CAP_OPENNI_GENERATORS_MASK);
    mod.set_const("cv_CAP_OPENNI_GRAY_IMAGE", (force_enum_int<decltype(cv::CAP_OPENNI_GRAY_IMAGE)>::Type)cv::CAP_OPENNI_GRAY_IMAGE);
    mod.set_const("cv_CAP_OPENNI_IMAGE_GENERATOR", (force_enum_int<decltype(cv::CAP_OPENNI_IMAGE_GENERATOR)>::Type)cv::CAP_OPENNI_IMAGE_GENERATOR);
    mod.set_const("cv_CAP_OPENNI_IMAGE_GENERATOR_OUTPUT_MODE", (force_enum_int<decltype(cv::CAP_OPENNI_IMAGE_GENERATOR_OUTPUT_MODE)>::Type)cv::CAP_OPENNI_IMAGE_GENERATOR_OUTPUT_MODE);
    mod.set_const("cv_CAP_OPENNI_IMAGE_GENERATOR_PRESENT", (force_enum_int<decltype(cv::CAP_OPENNI_IMAGE_GENERATOR_PRESENT)>::Type)cv::CAP_OPENNI_IMAGE_GENERATOR_PRESENT);
    mod.set_const("cv_CAP_OPENNI_IR_GENERATOR", (force_enum_int<decltype(cv::CAP_OPENNI_IR_GENERATOR)>::Type)cv::CAP_OPENNI_IR_GENERATOR);
    mod.set_const("cv_CAP_OPENNI_IR_GENERATOR_PRESENT", (force_enum_int<decltype(cv::CAP_OPENNI_IR_GENERATOR_PRESENT)>::Type)cv::CAP_OPENNI_IR_GENERATOR_PRESENT);
    mod.set_const("cv_CAP_OPENNI_IR_IMAGE", (force_enum_int<decltype(cv::CAP_OPENNI_IR_IMAGE)>::Type)cv::CAP_OPENNI_IR_IMAGE);
    mod.set_const("cv_CAP_OPENNI_POINT_CLOUD_MAP", (force_enum_int<decltype(cv::CAP_OPENNI_POINT_CLOUD_MAP)>::Type)cv::CAP_OPENNI_POINT_CLOUD_MAP);
    mod.set_const("cv_CAP_OPENNI_QVGA_30HZ", (force_enum_int<decltype(cv::CAP_OPENNI_QVGA_30HZ)>::Type)cv::CAP_OPENNI_QVGA_30HZ);
    mod.set_const("cv_CAP_OPENNI_QVGA_60HZ", (force_enum_int<decltype(cv::CAP_OPENNI_QVGA_60HZ)>::Type)cv::CAP_OPENNI_QVGA_60HZ);
    mod.set_const("cv_CAP_OPENNI_SXGA_15HZ", (force_enum_int<decltype(cv::CAP_OPENNI_SXGA_15HZ)>::Type)cv::CAP_OPENNI_SXGA_15HZ);
    mod.set_const("cv_CAP_OPENNI_SXGA_30HZ", (force_enum_int<decltype(cv::CAP_OPENNI_SXGA_30HZ)>::Type)cv::CAP_OPENNI_SXGA_30HZ);
    mod.set_const("cv_CAP_OPENNI_VALID_DEPTH_MASK", (force_enum_int<decltype(cv::CAP_OPENNI_VALID_DEPTH_MASK)>::Type)cv::CAP_OPENNI_VALID_DEPTH_MASK);
    mod.set_const("cv_CAP_OPENNI_VGA_30HZ", (force_enum_int<decltype(cv::CAP_OPENNI_VGA_30HZ)>::Type)cv::CAP_OPENNI_VGA_30HZ);
    mod.set_const("cv_CAP_PROP_APERTURE", (force_enum_int<decltype(cv::CAP_PROP_APERTURE)>::Type)cv::CAP_PROP_APERTURE);
    mod.set_const("cv_CAP_PROP_ARAVIS_AUTOTRIGGER", (force_enum_int<decltype(cv::CAP_PROP_ARAVIS_AUTOTRIGGER)>::Type)cv::CAP_PROP_ARAVIS_AUTOTRIGGER);
    mod.set_const("cv_CAP_PROP_AUTOFOCUS", (force_enum_int<decltype(cv::CAP_PROP_AUTOFOCUS)>::Type)cv::CAP_PROP_AUTOFOCUS);
    mod.set_const("cv_CAP_PROP_AUTO_EXPOSURE", (force_enum_int<decltype(cv::CAP_PROP_AUTO_EXPOSURE)>::Type)cv::CAP_PROP_AUTO_EXPOSURE);
    mod.set_const("cv_CAP_PROP_AUTO_WB", (force_enum_int<decltype(cv::CAP_PROP_AUTO_WB)>::Type)cv::CAP_PROP_AUTO_WB);
    mod.set_const("cv_CAP_PROP_BACKEND", (force_enum_int<decltype(cv::CAP_PROP_BACKEND)>::Type)cv::CAP_PROP_BACKEND);
    mod.set_const("cv_CAP_PROP_BACKLIGHT", (force_enum_int<decltype(cv::CAP_PROP_BACKLIGHT)>::Type)cv::CAP_PROP_BACKLIGHT);
    mod.set_const("cv_CAP_PROP_BITRATE", (force_enum_int<decltype(cv::CAP_PROP_BITRATE)>::Type)cv::CAP_PROP_BITRATE);
    mod.set_const("cv_CAP_PROP_BRIGHTNESS", (force_enum_int<decltype(cv::CAP_PROP_BRIGHTNESS)>::Type)cv::CAP_PROP_BRIGHTNESS);
    mod.set_const("cv_CAP_PROP_BUFFERSIZE", (force_enum_int<decltype(cv::CAP_PROP_BUFFERSIZE)>::Type)cv::CAP_PROP_BUFFERSIZE);
    mod.set_const("cv_CAP_PROP_CHANNEL", (force_enum_int<decltype(cv::CAP_PROP_CHANNEL)>::Type)cv::CAP_PROP_CHANNEL);
    mod.set_const("cv_CAP_PROP_CODEC_PIXEL_FORMAT", (force_enum_int<decltype(cv::CAP_PROP_CODEC_PIXEL_FORMAT)>::Type)cv::CAP_PROP_CODEC_PIXEL_FORMAT);
    mod.set_const("cv_CAP_PROP_CONTRAST", (force_enum_int<decltype(cv::CAP_PROP_CONTRAST)>::Type)cv::CAP_PROP_CONTRAST);
    mod.set_const("cv_CAP_PROP_CONVERT_RGB", (force_enum_int<decltype(cv::CAP_PROP_CONVERT_RGB)>::Type)cv::CAP_PROP_CONVERT_RGB);
    mod.set_const("cv_CAP_PROP_DC1394_MAX", (force_enum_int<decltype(cv::CAP_PROP_DC1394_MAX)>::Type)cv::CAP_PROP_DC1394_MAX);
    mod.set_const("cv_CAP_PROP_DC1394_MODE_AUTO", (force_enum_int<decltype(cv::CAP_PROP_DC1394_MODE_AUTO)>::Type)cv::CAP_PROP_DC1394_MODE_AUTO);
    mod.set_const("cv_CAP_PROP_DC1394_MODE_MANUAL", (force_enum_int<decltype(cv::CAP_PROP_DC1394_MODE_MANUAL)>::Type)cv::CAP_PROP_DC1394_MODE_MANUAL);
    mod.set_const("cv_CAP_PROP_DC1394_MODE_ONE_PUSH_AUTO", (force_enum_int<decltype(cv::CAP_PROP_DC1394_MODE_ONE_PUSH_AUTO)>::Type)cv::CAP_PROP_DC1394_MODE_ONE_PUSH_AUTO);
    mod.set_const("cv_CAP_PROP_DC1394_OFF", (force_enum_int<decltype(cv::CAP_PROP_DC1394_OFF)>::Type)cv::CAP_PROP_DC1394_OFF);
    mod.set_const("cv_CAP_PROP_EXPOSURE", (force_enum_int<decltype(cv::CAP_PROP_EXPOSURE)>::Type)cv::CAP_PROP_EXPOSURE);
    mod.set_const("cv_CAP_PROP_EXPOSUREPROGRAM", (force_enum_int<decltype(cv::CAP_PROP_EXPOSUREPROGRAM)>::Type)cv::CAP_PROP_EXPOSUREPROGRAM);
    mod.set_const("cv_CAP_PROP_FOCUS", (force_enum_int<decltype(cv::CAP_PROP_FOCUS)>::Type)cv::CAP_PROP_FOCUS);
    mod.set_const("cv_CAP_PROP_FORMAT", (force_enum_int<decltype(cv::CAP_PROP_FORMAT)>::Type)cv::CAP_PROP_FORMAT);
    mod.set_const("cv_CAP_PROP_FOURCC", (force_enum_int<decltype(cv::CAP_PROP_FOURCC)>::Type)cv::CAP_PROP_FOURCC);
    mod.set_const("cv_CAP_PROP_FPS", (force_enum_int<decltype(cv::CAP_PROP_FPS)>::Type)cv::CAP_PROP_FPS);
    mod.set_const("cv_CAP_PROP_FRAME_COUNT", (force_enum_int<decltype(cv::CAP_PROP_FRAME_COUNT)>::Type)cv::CAP_PROP_FRAME_COUNT);
    mod.set_const("cv_CAP_PROP_FRAME_HEIGHT", (force_enum_int<decltype(cv::CAP_PROP_FRAME_HEIGHT)>::Type)cv::CAP_PROP_FRAME_HEIGHT);
    mod.set_const("cv_CAP_PROP_FRAME_WIDTH", (force_enum_int<decltype(cv::CAP_PROP_FRAME_WIDTH)>::Type)cv::CAP_PROP_FRAME_WIDTH);
    mod.set_const("cv_CAP_PROP_GAIN", (force_enum_int<decltype(cv::CAP_PROP_GAIN)>::Type)cv::CAP_PROP_GAIN);
    mod.set_const("cv_CAP_PROP_GAMMA", (force_enum_int<decltype(cv::CAP_PROP_GAMMA)>::Type)cv::CAP_PROP_GAMMA);
    mod.set_const("cv_CAP_PROP_GIGA_FRAME_HEIGH_MAX", (force_enum_int<decltype(cv::CAP_PROP_GIGA_FRAME_HEIGH_MAX)>::Type)cv::CAP_PROP_GIGA_FRAME_HEIGH_MAX);
    mod.set_const("cv_CAP_PROP_GIGA_FRAME_OFFSET_X", (force_enum_int<decltype(cv::CAP_PROP_GIGA_FRAME_OFFSET_X)>::Type)cv::CAP_PROP_GIGA_FRAME_OFFSET_X);
    mod.set_const("cv_CAP_PROP_GIGA_FRAME_OFFSET_Y", (force_enum_int<decltype(cv::CAP_PROP_GIGA_FRAME_OFFSET_Y)>::Type)cv::CAP_PROP_GIGA_FRAME_OFFSET_Y);
    mod.set_const("cv_CAP_PROP_GIGA_FRAME_SENS_HEIGH", (force_enum_int<decltype(cv::CAP_PROP_GIGA_FRAME_SENS_HEIGH)>::Type)cv::CAP_PROP_GIGA_FRAME_SENS_HEIGH);
    mod.set_const("cv_CAP_PROP_GIGA_FRAME_SENS_WIDTH", (force_enum_int<decltype(cv::CAP_PROP_GIGA_FRAME_SENS_WIDTH)>::Type)cv::CAP_PROP_GIGA_FRAME_SENS_WIDTH);
    mod.set_const("cv_CAP_PROP_GIGA_FRAME_WIDTH_MAX", (force_enum_int<decltype(cv::CAP_PROP_GIGA_FRAME_WIDTH_MAX)>::Type)cv::CAP_PROP_GIGA_FRAME_WIDTH_MAX);
    mod.set_const("cv_CAP_PROP_GPHOTO2_COLLECT_MSGS", (force_enum_int<decltype(cv::CAP_PROP_GPHOTO2_COLLECT_MSGS)>::Type)cv::CAP_PROP_GPHOTO2_COLLECT_MSGS);
    mod.set_const("cv_CAP_PROP_GPHOTO2_FLUSH_MSGS", (force_enum_int<decltype(cv::CAP_PROP_GPHOTO2_FLUSH_MSGS)>::Type)cv::CAP_PROP_GPHOTO2_FLUSH_MSGS);
    mod.set_const("cv_CAP_PROP_GPHOTO2_PREVIEW", (force_enum_int<decltype(cv::CAP_PROP_GPHOTO2_PREVIEW)>::Type)cv::CAP_PROP_GPHOTO2_PREVIEW);
    mod.set_const("cv_CAP_PROP_GPHOTO2_RELOAD_CONFIG", (force_enum_int<decltype(cv::CAP_PROP_GPHOTO2_RELOAD_CONFIG)>::Type)cv::CAP_PROP_GPHOTO2_RELOAD_CONFIG);
    mod.set_const("cv_CAP_PROP_GPHOTO2_RELOAD_ON_CHANGE", (force_enum_int<decltype(cv::CAP_PROP_GPHOTO2_RELOAD_ON_CHANGE)>::Type)cv::CAP_PROP_GPHOTO2_RELOAD_ON_CHANGE);
    mod.set_const("cv_CAP_PROP_GPHOTO2_WIDGET_ENUMERATE", (force_enum_int<decltype(cv::CAP_PROP_GPHOTO2_WIDGET_ENUMERATE)>::Type)cv::CAP_PROP_GPHOTO2_WIDGET_ENUMERATE);
    mod.set_const("cv_CAP_PROP_GSTREAMER_QUEUE_LENGTH", (force_enum_int<decltype(cv::CAP_PROP_GSTREAMER_QUEUE_LENGTH)>::Type)cv::CAP_PROP_GSTREAMER_QUEUE_LENGTH);
    mod.set_const("cv_CAP_PROP_GUID", (force_enum_int<decltype(cv::CAP_PROP_GUID)>::Type)cv::CAP_PROP_GUID);
    mod.set_const("cv_CAP_PROP_HUE", (force_enum_int<decltype(cv::CAP_PROP_HUE)>::Type)cv::CAP_PROP_HUE);
    mod.set_const("cv_CAP_PROP_IMAGES_BASE", (force_enum_int<decltype(cv::CAP_PROP_IMAGES_BASE)>::Type)cv::CAP_PROP_IMAGES_BASE);
    mod.set_const("cv_CAP_PROP_IMAGES_LAST", (force_enum_int<decltype(cv::CAP_PROP_IMAGES_LAST)>::Type)cv::CAP_PROP_IMAGES_LAST);
    mod.set_const("cv_CAP_PROP_INTELPERC_DEPTH_CONFIDENCE_THRESHOLD", (force_enum_int<decltype(cv::CAP_PROP_INTELPERC_DEPTH_CONFIDENCE_THRESHOLD)>::Type)cv::CAP_PROP_INTELPERC_DEPTH_CONFIDENCE_THRESHOLD);
    mod.set_const("cv_CAP_PROP_INTELPERC_DEPTH_FOCAL_LENGTH_HORZ", (force_enum_int<decltype(cv::CAP_PROP_INTELPERC_DEPTH_FOCAL_LENGTH_HORZ)>::Type)cv::CAP_PROP_INTELPERC_DEPTH_FOCAL_LENGTH_HORZ);
    mod.set_const("cv_CAP_PROP_INTELPERC_DEPTH_FOCAL_LENGTH_VERT", (force_enum_int<decltype(cv::CAP_PROP_INTELPERC_DEPTH_FOCAL_LENGTH_VERT)>::Type)cv::CAP_PROP_INTELPERC_DEPTH_FOCAL_LENGTH_VERT);
    mod.set_const("cv_CAP_PROP_INTELPERC_DEPTH_LOW_CONFIDENCE_VALUE", (force_enum_int<decltype(cv::CAP_PROP_INTELPERC_DEPTH_LOW_CONFIDENCE_VALUE)>::Type)cv::CAP_PROP_INTELPERC_DEPTH_LOW_CONFIDENCE_VALUE);
    mod.set_const("cv_CAP_PROP_INTELPERC_DEPTH_SATURATION_VALUE", (force_enum_int<decltype(cv::CAP_PROP_INTELPERC_DEPTH_SATURATION_VALUE)>::Type)cv::CAP_PROP_INTELPERC_DEPTH_SATURATION_VALUE);
    mod.set_const("cv_CAP_PROP_INTELPERC_PROFILE_COUNT", (force_enum_int<decltype(cv::CAP_PROP_INTELPERC_PROFILE_COUNT)>::Type)cv::CAP_PROP_INTELPERC_PROFILE_COUNT);
    mod.set_const("cv_CAP_PROP_INTELPERC_PROFILE_IDX", (force_enum_int<decltype(cv::CAP_PROP_INTELPERC_PROFILE_IDX)>::Type)cv::CAP_PROP_INTELPERC_PROFILE_IDX);
    mod.set_const("cv_CAP_PROP_IOS_DEVICE_EXPOSURE", (force_enum_int<decltype(cv::CAP_PROP_IOS_DEVICE_EXPOSURE)>::Type)cv::CAP_PROP_IOS_DEVICE_EXPOSURE);
    mod.set_const("cv_CAP_PROP_IOS_DEVICE_FLASH", (force_enum_int<decltype(cv::CAP_PROP_IOS_DEVICE_FLASH)>::Type)cv::CAP_PROP_IOS_DEVICE_FLASH);
    mod.set_const("cv_CAP_PROP_IOS_DEVICE_FOCUS", (force_enum_int<decltype(cv::CAP_PROP_IOS_DEVICE_FOCUS)>::Type)cv::CAP_PROP_IOS_DEVICE_FOCUS);
    mod.set_const("cv_CAP_PROP_IOS_DEVICE_TORCH", (force_enum_int<decltype(cv::CAP_PROP_IOS_DEVICE_TORCH)>::Type)cv::CAP_PROP_IOS_DEVICE_TORCH);
    mod.set_const("cv_CAP_PROP_IOS_DEVICE_WHITEBALANCE", (force_enum_int<decltype(cv::CAP_PROP_IOS_DEVICE_WHITEBALANCE)>::Type)cv::CAP_PROP_IOS_DEVICE_WHITEBALANCE);
    mod.set_const("cv_CAP_PROP_IRIS", (force_enum_int<decltype(cv::CAP_PROP_IRIS)>::Type)cv::CAP_PROP_IRIS);
    mod.set_const("cv_CAP_PROP_ISO_SPEED", (force_enum_int<decltype(cv::CAP_PROP_ISO_SPEED)>::Type)cv::CAP_PROP_ISO_SPEED);
    mod.set_const("cv_CAP_PROP_MODE", (force_enum_int<decltype(cv::CAP_PROP_MODE)>::Type)cv::CAP_PROP_MODE);
    mod.set_const("cv_CAP_PROP_MONOCHROME", (force_enum_int<decltype(cv::CAP_PROP_MONOCHROME)>::Type)cv::CAP_PROP_MONOCHROME);
    mod.set_const("cv_CAP_PROP_OPENNI2_MIRROR", (force_enum_int<decltype(cv::CAP_PROP_OPENNI2_MIRROR)>::Type)cv::CAP_PROP_OPENNI2_MIRROR);
    mod.set_const("cv_CAP_PROP_OPENNI2_SYNC", (force_enum_int<decltype(cv::CAP_PROP_OPENNI2_SYNC)>::Type)cv::CAP_PROP_OPENNI2_SYNC);
    mod.set_const("cv_CAP_PROP_OPENNI_APPROX_FRAME_SYNC", (force_enum_int<decltype(cv::CAP_PROP_OPENNI_APPROX_FRAME_SYNC)>::Type)cv::CAP_PROP_OPENNI_APPROX_FRAME_SYNC);
    mod.set_const("cv_CAP_PROP_OPENNI_BASELINE", (force_enum_int<decltype(cv::CAP_PROP_OPENNI_BASELINE)>::Type)cv::CAP_PROP_OPENNI_BASELINE);
    mod.set_const("cv_CAP_PROP_OPENNI_CIRCLE_BUFFER", (force_enum_int<decltype(cv::CAP_PROP_OPENNI_CIRCLE_BUFFER)>::Type)cv::CAP_PROP_OPENNI_CIRCLE_BUFFER);
    mod.set_const("cv_CAP_PROP_OPENNI_FOCAL_LENGTH", (force_enum_int<decltype(cv::CAP_PROP_OPENNI_FOCAL_LENGTH)>::Type)cv::CAP_PROP_OPENNI_FOCAL_LENGTH);
    mod.set_const("cv_CAP_PROP_OPENNI_FRAME_MAX_DEPTH", (force_enum_int<decltype(cv::CAP_PROP_OPENNI_FRAME_MAX_DEPTH)>::Type)cv::CAP_PROP_OPENNI_FRAME_MAX_DEPTH);
    mod.set_const("cv_CAP_PROP_OPENNI_GENERATOR_PRESENT", (force_enum_int<decltype(cv::CAP_PROP_OPENNI_GENERATOR_PRESENT)>::Type)cv::CAP_PROP_OPENNI_GENERATOR_PRESENT);
    mod.set_const("cv_CAP_PROP_OPENNI_MAX_BUFFER_SIZE", (force_enum_int<decltype(cv::CAP_PROP_OPENNI_MAX_BUFFER_SIZE)>::Type)cv::CAP_PROP_OPENNI_MAX_BUFFER_SIZE);
    mod.set_const("cv_CAP_PROP_OPENNI_MAX_TIME_DURATION", (force_enum_int<decltype(cv::CAP_PROP_OPENNI_MAX_TIME_DURATION)>::Type)cv::CAP_PROP_OPENNI_MAX_TIME_DURATION);
    mod.set_const("cv_CAP_PROP_OPENNI_OUTPUT_MODE", (force_enum_int<decltype(cv::CAP_PROP_OPENNI_OUTPUT_MODE)>::Type)cv::CAP_PROP_OPENNI_OUTPUT_MODE);
    mod.set_const("cv_CAP_PROP_OPENNI_REGISTRATION", (force_enum_int<decltype(cv::CAP_PROP_OPENNI_REGISTRATION)>::Type)cv::CAP_PROP_OPENNI_REGISTRATION);
    mod.set_const("cv_CAP_PROP_OPENNI_REGISTRATION_ON", (force_enum_int<decltype(cv::CAP_PROP_OPENNI_REGISTRATION_ON)>::Type)cv::CAP_PROP_OPENNI_REGISTRATION_ON);
    mod.set_const("cv_CAP_PROP_PAN", (force_enum_int<decltype(cv::CAP_PROP_PAN)>::Type)cv::CAP_PROP_PAN);
    mod.set_const("cv_CAP_PROP_POS_AVI_RATIO", (force_enum_int<decltype(cv::CAP_PROP_POS_AVI_RATIO)>::Type)cv::CAP_PROP_POS_AVI_RATIO);
    mod.set_const("cv_CAP_PROP_POS_FRAMES", (force_enum_int<decltype(cv::CAP_PROP_POS_FRAMES)>::Type)cv::CAP_PROP_POS_FRAMES);
    mod.set_const("cv_CAP_PROP_POS_MSEC", (force_enum_int<decltype(cv::CAP_PROP_POS_MSEC)>::Type)cv::CAP_PROP_POS_MSEC);
    mod.set_const("cv_CAP_PROP_PVAPI_BINNINGX", (force_enum_int<decltype(cv::CAP_PROP_PVAPI_BINNINGX)>::Type)cv::CAP_PROP_PVAPI_BINNINGX);
    mod.set_const("cv_CAP_PROP_PVAPI_BINNINGY", (force_enum_int<decltype(cv::CAP_PROP_PVAPI_BINNINGY)>::Type)cv::CAP_PROP_PVAPI_BINNINGY);
    mod.set_const("cv_CAP_PROP_PVAPI_DECIMATIONHORIZONTAL", (force_enum_int<decltype(cv::CAP_PROP_PVAPI_DECIMATIONHORIZONTAL)>::Type)cv::CAP_PROP_PVAPI_DECIMATIONHORIZONTAL);
    mod.set_const("cv_CAP_PROP_PVAPI_DECIMATIONVERTICAL", (force_enum_int<decltype(cv::CAP_PROP_PVAPI_DECIMATIONVERTICAL)>::Type)cv::CAP_PROP_PVAPI_DECIMATIONVERTICAL);
    mod.set_const("cv_CAP_PROP_PVAPI_FRAMESTARTTRIGGERMODE", (force_enum_int<decltype(cv::CAP_PROP_PVAPI_FRAMESTARTTRIGGERMODE)>::Type)cv::CAP_PROP_PVAPI_FRAMESTARTTRIGGERMODE);
    mod.set_const("cv_CAP_PROP_PVAPI_MULTICASTIP", (force_enum_int<decltype(cv::CAP_PROP_PVAPI_MULTICASTIP)>::Type)cv::CAP_PROP_PVAPI_MULTICASTIP);
    mod.set_const("cv_CAP_PROP_PVAPI_PIXELFORMAT", (force_enum_int<decltype(cv::CAP_PROP_PVAPI_PIXELFORMAT)>::Type)cv::CAP_PROP_PVAPI_PIXELFORMAT);
    mod.set_const("cv_CAP_PROP_RECTIFICATION", (force_enum_int<decltype(cv::CAP_PROP_RECTIFICATION)>::Type)cv::CAP_PROP_RECTIFICATION);
    mod.set_const("cv_CAP_PROP_ROLL", (force_enum_int<decltype(cv::CAP_PROP_ROLL)>::Type)cv::CAP_PROP_ROLL);
    mod.set_const("cv_CAP_PROP_SAR_DEN", (force_enum_int<decltype(cv::CAP_PROP_SAR_DEN)>::Type)cv::CAP_PROP_SAR_DEN);
    mod.set_const("cv_CAP_PROP_SAR_NUM", (force_enum_int<decltype(cv::CAP_PROP_SAR_NUM)>::Type)cv::CAP_PROP_SAR_NUM);
    mod.set_const("cv_CAP_PROP_SATURATION", (force_enum_int<decltype(cv::CAP_PROP_SATURATION)>::Type)cv::CAP_PROP_SATURATION);
    mod.set_const("cv_CAP_PROP_SETTINGS", (force_enum_int<decltype(cv::CAP_PROP_SETTINGS)>::Type)cv::CAP_PROP_SETTINGS);
    mod.set_const("cv_CAP_PROP_SHARPNESS", (force_enum_int<decltype(cv::CAP_PROP_SHARPNESS)>::Type)cv::CAP_PROP_SHARPNESS);
    mod.set_const("cv_CAP_PROP_SPEED", (force_enum_int<decltype(cv::CAP_PROP_SPEED)>::Type)cv::CAP_PROP_SPEED);
    mod.set_const("cv_CAP_PROP_TEMPERATURE", (force_enum_int<decltype(cv::CAP_PROP_TEMPERATURE)>::Type)cv::CAP_PROP_TEMPERATURE);
    mod.set_const("cv_CAP_PROP_TILT", (force_enum_int<decltype(cv::CAP_PROP_TILT)>::Type)cv::CAP_PROP_TILT);
    mod.set_const("cv_CAP_PROP_TRIGGER", (force_enum_int<decltype(cv::CAP_PROP_TRIGGER)>::Type)cv::CAP_PROP_TRIGGER);
    mod.set_const("cv_CAP_PROP_TRIGGER_DELAY", (force_enum_int<decltype(cv::CAP_PROP_TRIGGER_DELAY)>::Type)cv::CAP_PROP_TRIGGER_DELAY);
    mod.set_const("cv_CAP_PROP_VIEWFINDER", (force_enum_int<decltype(cv::CAP_PROP_VIEWFINDER)>::Type)cv::CAP_PROP_VIEWFINDER);
    mod.set_const("cv_CAP_PROP_WB_TEMPERATURE", (force_enum_int<decltype(cv::CAP_PROP_WB_TEMPERATURE)>::Type)cv::CAP_PROP_WB_TEMPERATURE);
    mod.set_const("cv_CAP_PROP_WHITE_BALANCE_BLUE_U", (force_enum_int<decltype(cv::CAP_PROP_WHITE_BALANCE_BLUE_U)>::Type)cv::CAP_PROP_WHITE_BALANCE_BLUE_U);
    mod.set_const("cv_CAP_PROP_WHITE_BALANCE_RED_V", (force_enum_int<decltype(cv::CAP_PROP_WHITE_BALANCE_RED_V)>::Type)cv::CAP_PROP_WHITE_BALANCE_RED_V);
    mod.set_const("cv_CAP_PROP_XI_ACQ_BUFFER_SIZE", (force_enum_int<decltype(cv::CAP_PROP_XI_ACQ_BUFFER_SIZE)>::Type)cv::CAP_PROP_XI_ACQ_BUFFER_SIZE);
    mod.set_const("cv_CAP_PROP_XI_ACQ_BUFFER_SIZE_UNIT", (force_enum_int<decltype(cv::CAP_PROP_XI_ACQ_BUFFER_SIZE_UNIT)>::Type)cv::CAP_PROP_XI_ACQ_BUFFER_SIZE_UNIT);
    mod.set_const("cv_CAP_PROP_XI_ACQ_FRAME_BURST_COUNT", (force_enum_int<decltype(cv::CAP_PROP_XI_ACQ_FRAME_BURST_COUNT)>::Type)cv::CAP_PROP_XI_ACQ_FRAME_BURST_COUNT);
    mod.set_const("cv_CAP_PROP_XI_ACQ_TIMING_MODE", (force_enum_int<decltype(cv::CAP_PROP_XI_ACQ_TIMING_MODE)>::Type)cv::CAP_PROP_XI_ACQ_TIMING_MODE);
    mod.set_const("cv_CAP_PROP_XI_ACQ_TRANSPORT_BUFFER_COMMIT", (force_enum_int<decltype(cv::CAP_PROP_XI_ACQ_TRANSPORT_BUFFER_COMMIT)>::Type)cv::CAP_PROP_XI_ACQ_TRANSPORT_BUFFER_COMMIT);
    mod.set_const("cv_CAP_PROP_XI_ACQ_TRANSPORT_BUFFER_SIZE", (force_enum_int<decltype(cv::CAP_PROP_XI_ACQ_TRANSPORT_BUFFER_SIZE)>::Type)cv::CAP_PROP_XI_ACQ_TRANSPORT_BUFFER_SIZE);
    mod.set_const("cv_CAP_PROP_XI_AEAG", (force_enum_int<decltype(cv::CAP_PROP_XI_AEAG)>::Type)cv::CAP_PROP_XI_AEAG);
    mod.set_const("cv_CAP_PROP_XI_AEAG_LEVEL", (force_enum_int<decltype(cv::CAP_PROP_XI_AEAG_LEVEL)>::Type)cv::CAP_PROP_XI_AEAG_LEVEL);
    mod.set_const("cv_CAP_PROP_XI_AEAG_ROI_HEIGHT", (force_enum_int<decltype(cv::CAP_PROP_XI_AEAG_ROI_HEIGHT)>::Type)cv::CAP_PROP_XI_AEAG_ROI_HEIGHT);
    mod.set_const("cv_CAP_PROP_XI_AEAG_ROI_OFFSET_X", (force_enum_int<decltype(cv::CAP_PROP_XI_AEAG_ROI_OFFSET_X)>::Type)cv::CAP_PROP_XI_AEAG_ROI_OFFSET_X);
    mod.set_const("cv_CAP_PROP_XI_AEAG_ROI_OFFSET_Y", (force_enum_int<decltype(cv::CAP_PROP_XI_AEAG_ROI_OFFSET_Y)>::Type)cv::CAP_PROP_XI_AEAG_ROI_OFFSET_Y);
    mod.set_const("cv_CAP_PROP_XI_AEAG_ROI_WIDTH", (force_enum_int<decltype(cv::CAP_PROP_XI_AEAG_ROI_WIDTH)>::Type)cv::CAP_PROP_XI_AEAG_ROI_WIDTH);
    mod.set_const("cv_CAP_PROP_XI_AE_MAX_LIMIT", (force_enum_int<decltype(cv::CAP_PROP_XI_AE_MAX_LIMIT)>::Type)cv::CAP_PROP_XI_AE_MAX_LIMIT);
    mod.set_const("cv_CAP_PROP_XI_AG_MAX_LIMIT", (force_enum_int<decltype(cv::CAP_PROP_XI_AG_MAX_LIMIT)>::Type)cv::CAP_PROP_XI_AG_MAX_LIMIT);
    mod.set_const("cv_CAP_PROP_XI_APPLY_CMS", (force_enum_int<decltype(cv::CAP_PROP_XI_APPLY_CMS)>::Type)cv::CAP_PROP_XI_APPLY_CMS);
    mod.set_const("cv_CAP_PROP_XI_AUTO_BANDWIDTH_CALCULATION", (force_enum_int<decltype(cv::CAP_PROP_XI_AUTO_BANDWIDTH_CALCULATION)>::Type)cv::CAP_PROP_XI_AUTO_BANDWIDTH_CALCULATION);
    mod.set_const("cv_CAP_PROP_XI_AUTO_WB", (force_enum_int<decltype(cv::CAP_PROP_XI_AUTO_WB)>::Type)cv::CAP_PROP_XI_AUTO_WB);
    mod.set_const("cv_CAP_PROP_XI_AVAILABLE_BANDWIDTH", (force_enum_int<decltype(cv::CAP_PROP_XI_AVAILABLE_BANDWIDTH)>::Type)cv::CAP_PROP_XI_AVAILABLE_BANDWIDTH);
    mod.set_const("cv_CAP_PROP_XI_BINNING_HORIZONTAL", (force_enum_int<decltype(cv::CAP_PROP_XI_BINNING_HORIZONTAL)>::Type)cv::CAP_PROP_XI_BINNING_HORIZONTAL);
    mod.set_const("cv_CAP_PROP_XI_BINNING_PATTERN", (force_enum_int<decltype(cv::CAP_PROP_XI_BINNING_PATTERN)>::Type)cv::CAP_PROP_XI_BINNING_PATTERN);
    mod.set_const("cv_CAP_PROP_XI_BINNING_SELECTOR", (force_enum_int<decltype(cv::CAP_PROP_XI_BINNING_SELECTOR)>::Type)cv::CAP_PROP_XI_BINNING_SELECTOR);
    mod.set_const("cv_CAP_PROP_XI_BINNING_VERTICAL", (force_enum_int<decltype(cv::CAP_PROP_XI_BINNING_VERTICAL)>::Type)cv::CAP_PROP_XI_BINNING_VERTICAL);
    mod.set_const("cv_CAP_PROP_XI_BPC", (force_enum_int<decltype(cv::CAP_PROP_XI_BPC)>::Type)cv::CAP_PROP_XI_BPC);
    mod.set_const("cv_CAP_PROP_XI_BUFFERS_QUEUE_SIZE", (force_enum_int<decltype(cv::CAP_PROP_XI_BUFFERS_QUEUE_SIZE)>::Type)cv::CAP_PROP_XI_BUFFERS_QUEUE_SIZE);
    mod.set_const("cv_CAP_PROP_XI_BUFFER_POLICY", (force_enum_int<decltype(cv::CAP_PROP_XI_BUFFER_POLICY)>::Type)cv::CAP_PROP_XI_BUFFER_POLICY);
    mod.set_const("cv_CAP_PROP_XI_CC_MATRIX_00", (force_enum_int<decltype(cv::CAP_PROP_XI_CC_MATRIX_00)>::Type)cv::CAP_PROP_XI_CC_MATRIX_00);
    mod.set_const("cv_CAP_PROP_XI_CC_MATRIX_01", (force_enum_int<decltype(cv::CAP_PROP_XI_CC_MATRIX_01)>::Type)cv::CAP_PROP_XI_CC_MATRIX_01);
    mod.set_const("cv_CAP_PROP_XI_CC_MATRIX_02", (force_enum_int<decltype(cv::CAP_PROP_XI_CC_MATRIX_02)>::Type)cv::CAP_PROP_XI_CC_MATRIX_02);
    mod.set_const("cv_CAP_PROP_XI_CC_MATRIX_03", (force_enum_int<decltype(cv::CAP_PROP_XI_CC_MATRIX_03)>::Type)cv::CAP_PROP_XI_CC_MATRIX_03);
    mod.set_const("cv_CAP_PROP_XI_CC_MATRIX_10", (force_enum_int<decltype(cv::CAP_PROP_XI_CC_MATRIX_10)>::Type)cv::CAP_PROP_XI_CC_MATRIX_10);
    mod.set_const("cv_CAP_PROP_XI_CC_MATRIX_11", (force_enum_int<decltype(cv::CAP_PROP_XI_CC_MATRIX_11)>::Type)cv::CAP_PROP_XI_CC_MATRIX_11);
    mod.set_const("cv_CAP_PROP_XI_CC_MATRIX_12", (force_enum_int<decltype(cv::CAP_PROP_XI_CC_MATRIX_12)>::Type)cv::CAP_PROP_XI_CC_MATRIX_12);
    mod.set_const("cv_CAP_PROP_XI_CC_MATRIX_13", (force_enum_int<decltype(cv::CAP_PROP_XI_CC_MATRIX_13)>::Type)cv::CAP_PROP_XI_CC_MATRIX_13);
    mod.set_const("cv_CAP_PROP_XI_CC_MATRIX_20", (force_enum_int<decltype(cv::CAP_PROP_XI_CC_MATRIX_20)>::Type)cv::CAP_PROP_XI_CC_MATRIX_20);
    mod.set_const("cv_CAP_PROP_XI_CC_MATRIX_21", (force_enum_int<decltype(cv::CAP_PROP_XI_CC_MATRIX_21)>::Type)cv::CAP_PROP_XI_CC_MATRIX_21);
    mod.set_const("cv_CAP_PROP_XI_CC_MATRIX_22", (force_enum_int<decltype(cv::CAP_PROP_XI_CC_MATRIX_22)>::Type)cv::CAP_PROP_XI_CC_MATRIX_22);
    mod.set_const("cv_CAP_PROP_XI_CC_MATRIX_23", (force_enum_int<decltype(cv::CAP_PROP_XI_CC_MATRIX_23)>::Type)cv::CAP_PROP_XI_CC_MATRIX_23);
    mod.set_const("cv_CAP_PROP_XI_CC_MATRIX_30", (force_enum_int<decltype(cv::CAP_PROP_XI_CC_MATRIX_30)>::Type)cv::CAP_PROP_XI_CC_MATRIX_30);
    mod.set_const("cv_CAP_PROP_XI_CC_MATRIX_31", (force_enum_int<decltype(cv::CAP_PROP_XI_CC_MATRIX_31)>::Type)cv::CAP_PROP_XI_CC_MATRIX_31);
    mod.set_const("cv_CAP_PROP_XI_CC_MATRIX_32", (force_enum_int<decltype(cv::CAP_PROP_XI_CC_MATRIX_32)>::Type)cv::CAP_PROP_XI_CC_MATRIX_32);
    mod.set_const("cv_CAP_PROP_XI_CC_MATRIX_33", (force_enum_int<decltype(cv::CAP_PROP_XI_CC_MATRIX_33)>::Type)cv::CAP_PROP_XI_CC_MATRIX_33);
    mod.set_const("cv_CAP_PROP_XI_CHIP_TEMP", (force_enum_int<decltype(cv::CAP_PROP_XI_CHIP_TEMP)>::Type)cv::CAP_PROP_XI_CHIP_TEMP);
    mod.set_const("cv_CAP_PROP_XI_CMS", (force_enum_int<decltype(cv::CAP_PROP_XI_CMS)>::Type)cv::CAP_PROP_XI_CMS);
    mod.set_const("cv_CAP_PROP_XI_COLOR_FILTER_ARRAY", (force_enum_int<decltype(cv::CAP_PROP_XI_COLOR_FILTER_ARRAY)>::Type)cv::CAP_PROP_XI_COLOR_FILTER_ARRAY);
    mod.set_const("cv_CAP_PROP_XI_COLUMN_FPN_CORRECTION", (force_enum_int<decltype(cv::CAP_PROP_XI_COLUMN_FPN_CORRECTION)>::Type)cv::CAP_PROP_XI_COLUMN_FPN_CORRECTION);
    mod.set_const("cv_CAP_PROP_XI_COOLING", (force_enum_int<decltype(cv::CAP_PROP_XI_COOLING)>::Type)cv::CAP_PROP_XI_COOLING);
    mod.set_const("cv_CAP_PROP_XI_COUNTER_SELECTOR", (force_enum_int<decltype(cv::CAP_PROP_XI_COUNTER_SELECTOR)>::Type)cv::CAP_PROP_XI_COUNTER_SELECTOR);
    mod.set_const("cv_CAP_PROP_XI_COUNTER_VALUE", (force_enum_int<decltype(cv::CAP_PROP_XI_COUNTER_VALUE)>::Type)cv::CAP_PROP_XI_COUNTER_VALUE);
    mod.set_const("cv_CAP_PROP_XI_DATA_FORMAT", (force_enum_int<decltype(cv::CAP_PROP_XI_DATA_FORMAT)>::Type)cv::CAP_PROP_XI_DATA_FORMAT);
    mod.set_const("cv_CAP_PROP_XI_DEBOUNCE_EN", (force_enum_int<decltype(cv::CAP_PROP_XI_DEBOUNCE_EN)>::Type)cv::CAP_PROP_XI_DEBOUNCE_EN);
    mod.set_const("cv_CAP_PROP_XI_DEBOUNCE_POL", (force_enum_int<decltype(cv::CAP_PROP_XI_DEBOUNCE_POL)>::Type)cv::CAP_PROP_XI_DEBOUNCE_POL);
    mod.set_const("cv_CAP_PROP_XI_DEBOUNCE_T0", (force_enum_int<decltype(cv::CAP_PROP_XI_DEBOUNCE_T0)>::Type)cv::CAP_PROP_XI_DEBOUNCE_T0);
    mod.set_const("cv_CAP_PROP_XI_DEBOUNCE_T1", (force_enum_int<decltype(cv::CAP_PROP_XI_DEBOUNCE_T1)>::Type)cv::CAP_PROP_XI_DEBOUNCE_T1);
    mod.set_const("cv_CAP_PROP_XI_DEBUG_LEVEL", (force_enum_int<decltype(cv::CAP_PROP_XI_DEBUG_LEVEL)>::Type)cv::CAP_PROP_XI_DEBUG_LEVEL);
    mod.set_const("cv_CAP_PROP_XI_DECIMATION_HORIZONTAL", (force_enum_int<decltype(cv::CAP_PROP_XI_DECIMATION_HORIZONTAL)>::Type)cv::CAP_PROP_XI_DECIMATION_HORIZONTAL);
    mod.set_const("cv_CAP_PROP_XI_DECIMATION_PATTERN", (force_enum_int<decltype(cv::CAP_PROP_XI_DECIMATION_PATTERN)>::Type)cv::CAP_PROP_XI_DECIMATION_PATTERN);
    mod.set_const("cv_CAP_PROP_XI_DECIMATION_SELECTOR", (force_enum_int<decltype(cv::CAP_PROP_XI_DECIMATION_SELECTOR)>::Type)cv::CAP_PROP_XI_DECIMATION_SELECTOR);
    mod.set_const("cv_CAP_PROP_XI_DECIMATION_VERTICAL", (force_enum_int<decltype(cv::CAP_PROP_XI_DECIMATION_VERTICAL)>::Type)cv::CAP_PROP_XI_DECIMATION_VERTICAL);
    mod.set_const("cv_CAP_PROP_XI_DEFAULT_CC_MATRIX", (force_enum_int<decltype(cv::CAP_PROP_XI_DEFAULT_CC_MATRIX)>::Type)cv::CAP_PROP_XI_DEFAULT_CC_MATRIX);
    mod.set_const("cv_CAP_PROP_XI_DEVICE_MODEL_ID", (force_enum_int<decltype(cv::CAP_PROP_XI_DEVICE_MODEL_ID)>::Type)cv::CAP_PROP_XI_DEVICE_MODEL_ID);
    mod.set_const("cv_CAP_PROP_XI_DEVICE_RESET", (force_enum_int<decltype(cv::CAP_PROP_XI_DEVICE_RESET)>::Type)cv::CAP_PROP_XI_DEVICE_RESET);
    mod.set_const("cv_CAP_PROP_XI_DEVICE_SN", (force_enum_int<decltype(cv::CAP_PROP_XI_DEVICE_SN)>::Type)cv::CAP_PROP_XI_DEVICE_SN);
    mod.set_const("cv_CAP_PROP_XI_DOWNSAMPLING", (force_enum_int<decltype(cv::CAP_PROP_XI_DOWNSAMPLING)>::Type)cv::CAP_PROP_XI_DOWNSAMPLING);
    mod.set_const("cv_CAP_PROP_XI_DOWNSAMPLING_TYPE", (force_enum_int<decltype(cv::CAP_PROP_XI_DOWNSAMPLING_TYPE)>::Type)cv::CAP_PROP_XI_DOWNSAMPLING_TYPE);
    mod.set_const("cv_CAP_PROP_XI_EXPOSURE", (force_enum_int<decltype(cv::CAP_PROP_XI_EXPOSURE)>::Type)cv::CAP_PROP_XI_EXPOSURE);
    mod.set_const("cv_CAP_PROP_XI_EXPOSURE_BURST_COUNT", (force_enum_int<decltype(cv::CAP_PROP_XI_EXPOSURE_BURST_COUNT)>::Type)cv::CAP_PROP_XI_EXPOSURE_BURST_COUNT);
    mod.set_const("cv_CAP_PROP_XI_EXP_PRIORITY", (force_enum_int<decltype(cv::CAP_PROP_XI_EXP_PRIORITY)>::Type)cv::CAP_PROP_XI_EXP_PRIORITY);
    mod.set_const("cv_CAP_PROP_XI_FFS_ACCESS_KEY", (force_enum_int<decltype(cv::CAP_PROP_XI_FFS_ACCESS_KEY)>::Type)cv::CAP_PROP_XI_FFS_ACCESS_KEY);
    mod.set_const("cv_CAP_PROP_XI_FFS_FILE_ID", (force_enum_int<decltype(cv::CAP_PROP_XI_FFS_FILE_ID)>::Type)cv::CAP_PROP_XI_FFS_FILE_ID);
    mod.set_const("cv_CAP_PROP_XI_FFS_FILE_SIZE", (force_enum_int<decltype(cv::CAP_PROP_XI_FFS_FILE_SIZE)>::Type)cv::CAP_PROP_XI_FFS_FILE_SIZE);
    mod.set_const("cv_CAP_PROP_XI_FRAMERATE", (force_enum_int<decltype(cv::CAP_PROP_XI_FRAMERATE)>::Type)cv::CAP_PROP_XI_FRAMERATE);
    mod.set_const("cv_CAP_PROP_XI_FREE_FFS_SIZE", (force_enum_int<decltype(cv::CAP_PROP_XI_FREE_FFS_SIZE)>::Type)cv::CAP_PROP_XI_FREE_FFS_SIZE);
    mod.set_const("cv_CAP_PROP_XI_GAIN", (force_enum_int<decltype(cv::CAP_PROP_XI_GAIN)>::Type)cv::CAP_PROP_XI_GAIN);
    mod.set_const("cv_CAP_PROP_XI_GAIN_SELECTOR", (force_enum_int<decltype(cv::CAP_PROP_XI_GAIN_SELECTOR)>::Type)cv::CAP_PROP_XI_GAIN_SELECTOR);
    mod.set_const("cv_CAP_PROP_XI_GAMMAC", (force_enum_int<decltype(cv::CAP_PROP_XI_GAMMAC)>::Type)cv::CAP_PROP_XI_GAMMAC);
    mod.set_const("cv_CAP_PROP_XI_GAMMAY", (force_enum_int<decltype(cv::CAP_PROP_XI_GAMMAY)>::Type)cv::CAP_PROP_XI_GAMMAY);
    mod.set_const("cv_CAP_PROP_XI_GPI_LEVEL", (force_enum_int<decltype(cv::CAP_PROP_XI_GPI_LEVEL)>::Type)cv::CAP_PROP_XI_GPI_LEVEL);
    mod.set_const("cv_CAP_PROP_XI_GPI_MODE", (force_enum_int<decltype(cv::CAP_PROP_XI_GPI_MODE)>::Type)cv::CAP_PROP_XI_GPI_MODE);
    mod.set_const("cv_CAP_PROP_XI_GPI_SELECTOR", (force_enum_int<decltype(cv::CAP_PROP_XI_GPI_SELECTOR)>::Type)cv::CAP_PROP_XI_GPI_SELECTOR);
    mod.set_const("cv_CAP_PROP_XI_GPO_MODE", (force_enum_int<decltype(cv::CAP_PROP_XI_GPO_MODE)>::Type)cv::CAP_PROP_XI_GPO_MODE);
    mod.set_const("cv_CAP_PROP_XI_GPO_SELECTOR", (force_enum_int<decltype(cv::CAP_PROP_XI_GPO_SELECTOR)>::Type)cv::CAP_PROP_XI_GPO_SELECTOR);
    mod.set_const("cv_CAP_PROP_XI_HDR", (force_enum_int<decltype(cv::CAP_PROP_XI_HDR)>::Type)cv::CAP_PROP_XI_HDR);
    mod.set_const("cv_CAP_PROP_XI_HDR_KNEEPOINT_COUNT", (force_enum_int<decltype(cv::CAP_PROP_XI_HDR_KNEEPOINT_COUNT)>::Type)cv::CAP_PROP_XI_HDR_KNEEPOINT_COUNT);
    mod.set_const("cv_CAP_PROP_XI_HDR_T1", (force_enum_int<decltype(cv::CAP_PROP_XI_HDR_T1)>::Type)cv::CAP_PROP_XI_HDR_T1);
    mod.set_const("cv_CAP_PROP_XI_HDR_T2", (force_enum_int<decltype(cv::CAP_PROP_XI_HDR_T2)>::Type)cv::CAP_PROP_XI_HDR_T2);
    mod.set_const("cv_CAP_PROP_XI_HEIGHT", (force_enum_int<decltype(cv::CAP_PROP_XI_HEIGHT)>::Type)cv::CAP_PROP_XI_HEIGHT);
    mod.set_const("cv_CAP_PROP_XI_HOUS_BACK_SIDE_TEMP", (force_enum_int<decltype(cv::CAP_PROP_XI_HOUS_BACK_SIDE_TEMP)>::Type)cv::CAP_PROP_XI_HOUS_BACK_SIDE_TEMP);
    mod.set_const("cv_CAP_PROP_XI_HOUS_TEMP", (force_enum_int<decltype(cv::CAP_PROP_XI_HOUS_TEMP)>::Type)cv::CAP_PROP_XI_HOUS_TEMP);
    mod.set_const("cv_CAP_PROP_XI_HW_REVISION", (force_enum_int<decltype(cv::CAP_PROP_XI_HW_REVISION)>::Type)cv::CAP_PROP_XI_HW_REVISION);
    mod.set_const("cv_CAP_PROP_XI_IMAGE_BLACK_LEVEL", (force_enum_int<decltype(cv::CAP_PROP_XI_IMAGE_BLACK_LEVEL)>::Type)cv::CAP_PROP_XI_IMAGE_BLACK_LEVEL);
    mod.set_const("cv_CAP_PROP_XI_IMAGE_DATA_BIT_DEPTH", (force_enum_int<decltype(cv::CAP_PROP_XI_IMAGE_DATA_BIT_DEPTH)>::Type)cv::CAP_PROP_XI_IMAGE_DATA_BIT_DEPTH);
    mod.set_const("cv_CAP_PROP_XI_IMAGE_DATA_FORMAT", (force_enum_int<decltype(cv::CAP_PROP_XI_IMAGE_DATA_FORMAT)>::Type)cv::CAP_PROP_XI_IMAGE_DATA_FORMAT);
    mod.set_const("cv_CAP_PROP_XI_IMAGE_DATA_FORMAT_RGB32_ALPHA", (force_enum_int<decltype(cv::CAP_PROP_XI_IMAGE_DATA_FORMAT_RGB32_ALPHA)>::Type)cv::CAP_PROP_XI_IMAGE_DATA_FORMAT_RGB32_ALPHA);
    mod.set_const("cv_CAP_PROP_XI_IMAGE_IS_COLOR", (force_enum_int<decltype(cv::CAP_PROP_XI_IMAGE_IS_COLOR)>::Type)cv::CAP_PROP_XI_IMAGE_IS_COLOR);
    mod.set_const("cv_CAP_PROP_XI_IMAGE_PAYLOAD_SIZE", (force_enum_int<decltype(cv::CAP_PROP_XI_IMAGE_PAYLOAD_SIZE)>::Type)cv::CAP_PROP_XI_IMAGE_PAYLOAD_SIZE);
    mod.set_const("cv_CAP_PROP_XI_IS_COOLED", (force_enum_int<decltype(cv::CAP_PROP_XI_IS_COOLED)>::Type)cv::CAP_PROP_XI_IS_COOLED);
    mod.set_const("cv_CAP_PROP_XI_IS_DEVICE_EXIST", (force_enum_int<decltype(cv::CAP_PROP_XI_IS_DEVICE_EXIST)>::Type)cv::CAP_PROP_XI_IS_DEVICE_EXIST);
    mod.set_const("cv_CAP_PROP_XI_KNEEPOINT1", (force_enum_int<decltype(cv::CAP_PROP_XI_KNEEPOINT1)>::Type)cv::CAP_PROP_XI_KNEEPOINT1);
    mod.set_const("cv_CAP_PROP_XI_KNEEPOINT2", (force_enum_int<decltype(cv::CAP_PROP_XI_KNEEPOINT2)>::Type)cv::CAP_PROP_XI_KNEEPOINT2);
    mod.set_const("cv_CAP_PROP_XI_LED_MODE", (force_enum_int<decltype(cv::CAP_PROP_XI_LED_MODE)>::Type)cv::CAP_PROP_XI_LED_MODE);
    mod.set_const("cv_CAP_PROP_XI_LED_SELECTOR", (force_enum_int<decltype(cv::CAP_PROP_XI_LED_SELECTOR)>::Type)cv::CAP_PROP_XI_LED_SELECTOR);
    mod.set_const("cv_CAP_PROP_XI_LENS_APERTURE_VALUE", (force_enum_int<decltype(cv::CAP_PROP_XI_LENS_APERTURE_VALUE)>::Type)cv::CAP_PROP_XI_LENS_APERTURE_VALUE);
    mod.set_const("cv_CAP_PROP_XI_LENS_FEATURE", (force_enum_int<decltype(cv::CAP_PROP_XI_LENS_FEATURE)>::Type)cv::CAP_PROP_XI_LENS_FEATURE);
    mod.set_const("cv_CAP_PROP_XI_LENS_FEATURE_SELECTOR", (force_enum_int<decltype(cv::CAP_PROP_XI_LENS_FEATURE_SELECTOR)>::Type)cv::CAP_PROP_XI_LENS_FEATURE_SELECTOR);
    mod.set_const("cv_CAP_PROP_XI_LENS_FOCAL_LENGTH", (force_enum_int<decltype(cv::CAP_PROP_XI_LENS_FOCAL_LENGTH)>::Type)cv::CAP_PROP_XI_LENS_FOCAL_LENGTH);
    mod.set_const("cv_CAP_PROP_XI_LENS_FOCUS_DISTANCE", (force_enum_int<decltype(cv::CAP_PROP_XI_LENS_FOCUS_DISTANCE)>::Type)cv::CAP_PROP_XI_LENS_FOCUS_DISTANCE);
    mod.set_const("cv_CAP_PROP_XI_LENS_FOCUS_MOVE", (force_enum_int<decltype(cv::CAP_PROP_XI_LENS_FOCUS_MOVE)>::Type)cv::CAP_PROP_XI_LENS_FOCUS_MOVE);
    mod.set_const("cv_CAP_PROP_XI_LENS_FOCUS_MOVEMENT_VALUE", (force_enum_int<decltype(cv::CAP_PROP_XI_LENS_FOCUS_MOVEMENT_VALUE)>::Type)cv::CAP_PROP_XI_LENS_FOCUS_MOVEMENT_VALUE);
    mod.set_const("cv_CAP_PROP_XI_LENS_MODE", (force_enum_int<decltype(cv::CAP_PROP_XI_LENS_MODE)>::Type)cv::CAP_PROP_XI_LENS_MODE);
    mod.set_const("cv_CAP_PROP_XI_LIMIT_BANDWIDTH", (force_enum_int<decltype(cv::CAP_PROP_XI_LIMIT_BANDWIDTH)>::Type)cv::CAP_PROP_XI_LIMIT_BANDWIDTH);
    mod.set_const("cv_CAP_PROP_XI_LUT_EN", (force_enum_int<decltype(cv::CAP_PROP_XI_LUT_EN)>::Type)cv::CAP_PROP_XI_LUT_EN);
    mod.set_const("cv_CAP_PROP_XI_LUT_INDEX", (force_enum_int<decltype(cv::CAP_PROP_XI_LUT_INDEX)>::Type)cv::CAP_PROP_XI_LUT_INDEX);
    mod.set_const("cv_CAP_PROP_XI_LUT_VALUE", (force_enum_int<decltype(cv::CAP_PROP_XI_LUT_VALUE)>::Type)cv::CAP_PROP_XI_LUT_VALUE);
    mod.set_const("cv_CAP_PROP_XI_MANUAL_WB", (force_enum_int<decltype(cv::CAP_PROP_XI_MANUAL_WB)>::Type)cv::CAP_PROP_XI_MANUAL_WB);
    mod.set_const("cv_CAP_PROP_XI_OFFSET_X", (force_enum_int<decltype(cv::CAP_PROP_XI_OFFSET_X)>::Type)cv::CAP_PROP_XI_OFFSET_X);
    mod.set_const("cv_CAP_PROP_XI_OFFSET_Y", (force_enum_int<decltype(cv::CAP_PROP_XI_OFFSET_Y)>::Type)cv::CAP_PROP_XI_OFFSET_Y);
    mod.set_const("cv_CAP_PROP_XI_OUTPUT_DATA_BIT_DEPTH", (force_enum_int<decltype(cv::CAP_PROP_XI_OUTPUT_DATA_BIT_DEPTH)>::Type)cv::CAP_PROP_XI_OUTPUT_DATA_BIT_DEPTH);
    mod.set_const("cv_CAP_PROP_XI_OUTPUT_DATA_PACKING", (force_enum_int<decltype(cv::CAP_PROP_XI_OUTPUT_DATA_PACKING)>::Type)cv::CAP_PROP_XI_OUTPUT_DATA_PACKING);
    mod.set_const("cv_CAP_PROP_XI_OUTPUT_DATA_PACKING_TYPE", (force_enum_int<decltype(cv::CAP_PROP_XI_OUTPUT_DATA_PACKING_TYPE)>::Type)cv::CAP_PROP_XI_OUTPUT_DATA_PACKING_TYPE);
    mod.set_const("cv_CAP_PROP_XI_RECENT_FRAME", (force_enum_int<decltype(cv::CAP_PROP_XI_RECENT_FRAME)>::Type)cv::CAP_PROP_XI_RECENT_FRAME);
    mod.set_const("cv_CAP_PROP_XI_REGION_MODE", (force_enum_int<decltype(cv::CAP_PROP_XI_REGION_MODE)>::Type)cv::CAP_PROP_XI_REGION_MODE);
    mod.set_const("cv_CAP_PROP_XI_REGION_SELECTOR", (force_enum_int<decltype(cv::CAP_PROP_XI_REGION_SELECTOR)>::Type)cv::CAP_PROP_XI_REGION_SELECTOR);
    mod.set_const("cv_CAP_PROP_XI_ROW_FPN_CORRECTION", (force_enum_int<decltype(cv::CAP_PROP_XI_ROW_FPN_CORRECTION)>::Type)cv::CAP_PROP_XI_ROW_FPN_CORRECTION);
    mod.set_const("cv_CAP_PROP_XI_SENSOR_BOARD_TEMP", (force_enum_int<decltype(cv::CAP_PROP_XI_SENSOR_BOARD_TEMP)>::Type)cv::CAP_PROP_XI_SENSOR_BOARD_TEMP);
    mod.set_const("cv_CAP_PROP_XI_SENSOR_CLOCK_FREQ_HZ", (force_enum_int<decltype(cv::CAP_PROP_XI_SENSOR_CLOCK_FREQ_HZ)>::Type)cv::CAP_PROP_XI_SENSOR_CLOCK_FREQ_HZ);
    mod.set_const("cv_CAP_PROP_XI_SENSOR_CLOCK_FREQ_INDEX", (force_enum_int<decltype(cv::CAP_PROP_XI_SENSOR_CLOCK_FREQ_INDEX)>::Type)cv::CAP_PROP_XI_SENSOR_CLOCK_FREQ_INDEX);
    mod.set_const("cv_CAP_PROP_XI_SENSOR_DATA_BIT_DEPTH", (force_enum_int<decltype(cv::CAP_PROP_XI_SENSOR_DATA_BIT_DEPTH)>::Type)cv::CAP_PROP_XI_SENSOR_DATA_BIT_DEPTH);
    mod.set_const("cv_CAP_PROP_XI_SENSOR_FEATURE_SELECTOR", (force_enum_int<decltype(cv::CAP_PROP_XI_SENSOR_FEATURE_SELECTOR)>::Type)cv::CAP_PROP_XI_SENSOR_FEATURE_SELECTOR);
    mod.set_const("cv_CAP_PROP_XI_SENSOR_FEATURE_VALUE", (force_enum_int<decltype(cv::CAP_PROP_XI_SENSOR_FEATURE_VALUE)>::Type)cv::CAP_PROP_XI_SENSOR_FEATURE_VALUE);
    mod.set_const("cv_CAP_PROP_XI_SENSOR_MODE", (force_enum_int<decltype(cv::CAP_PROP_XI_SENSOR_MODE)>::Type)cv::CAP_PROP_XI_SENSOR_MODE);
    mod.set_const("cv_CAP_PROP_XI_SENSOR_OUTPUT_CHANNEL_COUNT", (force_enum_int<decltype(cv::CAP_PROP_XI_SENSOR_OUTPUT_CHANNEL_COUNT)>::Type)cv::CAP_PROP_XI_SENSOR_OUTPUT_CHANNEL_COUNT);
    mod.set_const("cv_CAP_PROP_XI_SENSOR_TAPS", (force_enum_int<decltype(cv::CAP_PROP_XI_SENSOR_TAPS)>::Type)cv::CAP_PROP_XI_SENSOR_TAPS);
    mod.set_const("cv_CAP_PROP_XI_SHARPNESS", (force_enum_int<decltype(cv::CAP_PROP_XI_SHARPNESS)>::Type)cv::CAP_PROP_XI_SHARPNESS);
    mod.set_const("cv_CAP_PROP_XI_SHUTTER_TYPE", (force_enum_int<decltype(cv::CAP_PROP_XI_SHUTTER_TYPE)>::Type)cv::CAP_PROP_XI_SHUTTER_TYPE);
    mod.set_const("cv_CAP_PROP_XI_TARGET_TEMP", (force_enum_int<decltype(cv::CAP_PROP_XI_TARGET_TEMP)>::Type)cv::CAP_PROP_XI_TARGET_TEMP);
    mod.set_const("cv_CAP_PROP_XI_TEST_PATTERN", (force_enum_int<decltype(cv::CAP_PROP_XI_TEST_PATTERN)>::Type)cv::CAP_PROP_XI_TEST_PATTERN);
    mod.set_const("cv_CAP_PROP_XI_TEST_PATTERN_GENERATOR_SELECTOR", (force_enum_int<decltype(cv::CAP_PROP_XI_TEST_PATTERN_GENERATOR_SELECTOR)>::Type)cv::CAP_PROP_XI_TEST_PATTERN_GENERATOR_SELECTOR);
    mod.set_const("cv_CAP_PROP_XI_TIMEOUT", (force_enum_int<decltype(cv::CAP_PROP_XI_TIMEOUT)>::Type)cv::CAP_PROP_XI_TIMEOUT);
    mod.set_const("cv_CAP_PROP_XI_TRANSPORT_PIXEL_FORMAT", (force_enum_int<decltype(cv::CAP_PROP_XI_TRANSPORT_PIXEL_FORMAT)>::Type)cv::CAP_PROP_XI_TRANSPORT_PIXEL_FORMAT);
    mod.set_const("cv_CAP_PROP_XI_TRG_DELAY", (force_enum_int<decltype(cv::CAP_PROP_XI_TRG_DELAY)>::Type)cv::CAP_PROP_XI_TRG_DELAY);
    mod.set_const("cv_CAP_PROP_XI_TRG_SELECTOR", (force_enum_int<decltype(cv::CAP_PROP_XI_TRG_SELECTOR)>::Type)cv::CAP_PROP_XI_TRG_SELECTOR);
    mod.set_const("cv_CAP_PROP_XI_TRG_SOFTWARE", (force_enum_int<decltype(cv::CAP_PROP_XI_TRG_SOFTWARE)>::Type)cv::CAP_PROP_XI_TRG_SOFTWARE);
    mod.set_const("cv_CAP_PROP_XI_TRG_SOURCE", (force_enum_int<decltype(cv::CAP_PROP_XI_TRG_SOURCE)>::Type)cv::CAP_PROP_XI_TRG_SOURCE);
    mod.set_const("cv_CAP_PROP_XI_TS_RST_MODE", (force_enum_int<decltype(cv::CAP_PROP_XI_TS_RST_MODE)>::Type)cv::CAP_PROP_XI_TS_RST_MODE);
    mod.set_const("cv_CAP_PROP_XI_TS_RST_SOURCE", (force_enum_int<decltype(cv::CAP_PROP_XI_TS_RST_SOURCE)>::Type)cv::CAP_PROP_XI_TS_RST_SOURCE);
    mod.set_const("cv_CAP_PROP_XI_USED_FFS_SIZE", (force_enum_int<decltype(cv::CAP_PROP_XI_USED_FFS_SIZE)>::Type)cv::CAP_PROP_XI_USED_FFS_SIZE);
    mod.set_const("cv_CAP_PROP_XI_WB_KB", (force_enum_int<decltype(cv::CAP_PROP_XI_WB_KB)>::Type)cv::CAP_PROP_XI_WB_KB);
    mod.set_const("cv_CAP_PROP_XI_WB_KG", (force_enum_int<decltype(cv::CAP_PROP_XI_WB_KG)>::Type)cv::CAP_PROP_XI_WB_KG);
    mod.set_const("cv_CAP_PROP_XI_WB_KR", (force_enum_int<decltype(cv::CAP_PROP_XI_WB_KR)>::Type)cv::CAP_PROP_XI_WB_KR);
    mod.set_const("cv_CAP_PROP_XI_WIDTH", (force_enum_int<decltype(cv::CAP_PROP_XI_WIDTH)>::Type)cv::CAP_PROP_XI_WIDTH);
    mod.set_const("cv_CAP_PROP_ZOOM", (force_enum_int<decltype(cv::CAP_PROP_ZOOM)>::Type)cv::CAP_PROP_ZOOM);
    mod.set_const("cv_CAP_PVAPI", (force_enum_int<decltype(cv::CAP_PVAPI)>::Type)cv::CAP_PVAPI);
    mod.set_const("cv_CAP_PVAPI_DECIMATION_2OUTOF16", (force_enum_int<decltype(cv::CAP_PVAPI_DECIMATION_2OUTOF16)>::Type)cv::CAP_PVAPI_DECIMATION_2OUTOF16);
    mod.set_const("cv_CAP_PVAPI_DECIMATION_2OUTOF4", (force_enum_int<decltype(cv::CAP_PVAPI_DECIMATION_2OUTOF4)>::Type)cv::CAP_PVAPI_DECIMATION_2OUTOF4);
    mod.set_const("cv_CAP_PVAPI_DECIMATION_2OUTOF8", (force_enum_int<decltype(cv::CAP_PVAPI_DECIMATION_2OUTOF8)>::Type)cv::CAP_PVAPI_DECIMATION_2OUTOF8);
    mod.set_const("cv_CAP_PVAPI_DECIMATION_OFF", (force_enum_int<decltype(cv::CAP_PVAPI_DECIMATION_OFF)>::Type)cv::CAP_PVAPI_DECIMATION_OFF);
    mod.set_const("cv_CAP_PVAPI_FSTRIGMODE_FIXEDRATE", (force_enum_int<decltype(cv::CAP_PVAPI_FSTRIGMODE_FIXEDRATE)>::Type)cv::CAP_PVAPI_FSTRIGMODE_FIXEDRATE);
    mod.set_const("cv_CAP_PVAPI_FSTRIGMODE_FREERUN", (force_enum_int<decltype(cv::CAP_PVAPI_FSTRIGMODE_FREERUN)>::Type)cv::CAP_PVAPI_FSTRIGMODE_FREERUN);
    mod.set_const("cv_CAP_PVAPI_FSTRIGMODE_SOFTWARE", (force_enum_int<decltype(cv::CAP_PVAPI_FSTRIGMODE_SOFTWARE)>::Type)cv::CAP_PVAPI_FSTRIGMODE_SOFTWARE);
    mod.set_const("cv_CAP_PVAPI_FSTRIGMODE_SYNCIN1", (force_enum_int<decltype(cv::CAP_PVAPI_FSTRIGMODE_SYNCIN1)>::Type)cv::CAP_PVAPI_FSTRIGMODE_SYNCIN1);
    mod.set_const("cv_CAP_PVAPI_FSTRIGMODE_SYNCIN2", (force_enum_int<decltype(cv::CAP_PVAPI_FSTRIGMODE_SYNCIN2)>::Type)cv::CAP_PVAPI_FSTRIGMODE_SYNCIN2);
    mod.set_const("cv_CAP_PVAPI_PIXELFORMAT_BAYER16", (force_enum_int<decltype(cv::CAP_PVAPI_PIXELFORMAT_BAYER16)>::Type)cv::CAP_PVAPI_PIXELFORMAT_BAYER16);
    mod.set_const("cv_CAP_PVAPI_PIXELFORMAT_BAYER8", (force_enum_int<decltype(cv::CAP_PVAPI_PIXELFORMAT_BAYER8)>::Type)cv::CAP_PVAPI_PIXELFORMAT_BAYER8);
    mod.set_const("cv_CAP_PVAPI_PIXELFORMAT_BGR24", (force_enum_int<decltype(cv::CAP_PVAPI_PIXELFORMAT_BGR24)>::Type)cv::CAP_PVAPI_PIXELFORMAT_BGR24);
    mod.set_const("cv_CAP_PVAPI_PIXELFORMAT_BGRA32", (force_enum_int<decltype(cv::CAP_PVAPI_PIXELFORMAT_BGRA32)>::Type)cv::CAP_PVAPI_PIXELFORMAT_BGRA32);
    mod.set_const("cv_CAP_PVAPI_PIXELFORMAT_MONO16", (force_enum_int<decltype(cv::CAP_PVAPI_PIXELFORMAT_MONO16)>::Type)cv::CAP_PVAPI_PIXELFORMAT_MONO16);
    mod.set_const("cv_CAP_PVAPI_PIXELFORMAT_MONO8", (force_enum_int<decltype(cv::CAP_PVAPI_PIXELFORMAT_MONO8)>::Type)cv::CAP_PVAPI_PIXELFORMAT_MONO8);
    mod.set_const("cv_CAP_PVAPI_PIXELFORMAT_RGB24", (force_enum_int<decltype(cv::CAP_PVAPI_PIXELFORMAT_RGB24)>::Type)cv::CAP_PVAPI_PIXELFORMAT_RGB24);
    mod.set_const("cv_CAP_PVAPI_PIXELFORMAT_RGBA32", (force_enum_int<decltype(cv::CAP_PVAPI_PIXELFORMAT_RGBA32)>::Type)cv::CAP_PVAPI_PIXELFORMAT_RGBA32);
    mod.set_const("cv_CAP_QT", (force_enum_int<decltype(cv::CAP_QT)>::Type)cv::CAP_QT);
    mod.set_const("cv_CAP_REALSENSE", (force_enum_int<decltype(cv::CAP_REALSENSE)>::Type)cv::CAP_REALSENSE);
    mod.set_const("cv_CAP_UNICAP", (force_enum_int<decltype(cv::CAP_UNICAP)>::Type)cv::CAP_UNICAP);
    mod.set_const("cv_CAP_V4L", (force_enum_int<decltype(cv::CAP_V4L)>::Type)cv::CAP_V4L);
    mod.set_const("cv_CAP_V4L2", (force_enum_int<decltype(cv::CAP_V4L2)>::Type)cv::CAP_V4L2);
    mod.set_const("cv_CAP_VFW", (force_enum_int<decltype(cv::CAP_VFW)>::Type)cv::CAP_VFW);
    mod.set_const("cv_CAP_WINRT", (force_enum_int<decltype(cv::CAP_WINRT)>::Type)cv::CAP_WINRT);
    mod.set_const("cv_CAP_XIAPI", (force_enum_int<decltype(cv::CAP_XIAPI)>::Type)cv::CAP_XIAPI);
    mod.set_const("cv_CAP_XINE", (force_enum_int<decltype(cv::CAP_XINE)>::Type)cv::CAP_XINE);
    mod.set_const("cv_CCL_DEFAULT", (force_enum_int<decltype(cv::CCL_DEFAULT)>::Type)cv::CCL_DEFAULT);
    mod.set_const("cv_CCL_GRANA", (force_enum_int<decltype(cv::CCL_GRANA)>::Type)cv::CCL_GRANA);
    mod.set_const("cv_CCL_WU", (force_enum_int<decltype(cv::CCL_WU)>::Type)cv::CCL_WU);
    mod.set_const("cv_CC_STAT_AREA", (force_enum_int<decltype(cv::CC_STAT_AREA)>::Type)cv::CC_STAT_AREA);
    mod.set_const("cv_CC_STAT_HEIGHT", (force_enum_int<decltype(cv::CC_STAT_HEIGHT)>::Type)cv::CC_STAT_HEIGHT);
    mod.set_const("cv_CC_STAT_LEFT", (force_enum_int<decltype(cv::CC_STAT_LEFT)>::Type)cv::CC_STAT_LEFT);
    mod.set_const("cv_CC_STAT_MAX", (force_enum_int<decltype(cv::CC_STAT_MAX)>::Type)cv::CC_STAT_MAX);
    mod.set_const("cv_CC_STAT_TOP", (force_enum_int<decltype(cv::CC_STAT_TOP)>::Type)cv::CC_STAT_TOP);
    mod.set_const("cv_CC_STAT_WIDTH", (force_enum_int<decltype(cv::CC_STAT_WIDTH)>::Type)cv::CC_STAT_WIDTH);
    mod.set_const("cv_CHAIN_APPROX_NONE", (force_enum_int<decltype(cv::CHAIN_APPROX_NONE)>::Type)cv::CHAIN_APPROX_NONE);
    mod.set_const("cv_CHAIN_APPROX_SIMPLE", (force_enum_int<decltype(cv::CHAIN_APPROX_SIMPLE)>::Type)cv::CHAIN_APPROX_SIMPLE);
    mod.set_const("cv_CHAIN_APPROX_TC89_KCOS", (force_enum_int<decltype(cv::CHAIN_APPROX_TC89_KCOS)>::Type)cv::CHAIN_APPROX_TC89_KCOS);
    mod.set_const("cv_CHAIN_APPROX_TC89_L1", (force_enum_int<decltype(cv::CHAIN_APPROX_TC89_L1)>::Type)cv::CHAIN_APPROX_TC89_L1);
    mod.set_const("cv_CMP_EQ", (force_enum_int<decltype(cv::CMP_EQ)>::Type)cv::CMP_EQ);
    mod.set_const("cv_CMP_GE", (force_enum_int<decltype(cv::CMP_GE)>::Type)cv::CMP_GE);
    mod.set_const("cv_CMP_GT", (force_enum_int<decltype(cv::CMP_GT)>::Type)cv::CMP_GT);
    mod.set_const("cv_CMP_LE", (force_enum_int<decltype(cv::CMP_LE)>::Type)cv::CMP_LE);
    mod.set_const("cv_CMP_LT", (force_enum_int<decltype(cv::CMP_LT)>::Type)cv::CMP_LT);
    mod.set_const("cv_CMP_NE", (force_enum_int<decltype(cv::CMP_NE)>::Type)cv::CMP_NE);
    mod.set_const("cv_COLORMAP_AUTUMN", (force_enum_int<decltype(cv::COLORMAP_AUTUMN)>::Type)cv::COLORMAP_AUTUMN);
    mod.set_const("cv_COLORMAP_BONE", (force_enum_int<decltype(cv::COLORMAP_BONE)>::Type)cv::COLORMAP_BONE);
    mod.set_const("cv_COLORMAP_CIVIDIS", (force_enum_int<decltype(cv::COLORMAP_CIVIDIS)>::Type)cv::COLORMAP_CIVIDIS);
    mod.set_const("cv_COLORMAP_COOL", (force_enum_int<decltype(cv::COLORMAP_COOL)>::Type)cv::COLORMAP_COOL);
    mod.set_const("cv_COLORMAP_DEEPGREEN", (force_enum_int<decltype(cv::COLORMAP_DEEPGREEN)>::Type)cv::COLORMAP_DEEPGREEN);
    mod.set_const("cv_COLORMAP_HOT", (force_enum_int<decltype(cv::COLORMAP_HOT)>::Type)cv::COLORMAP_HOT);
    mod.set_const("cv_COLORMAP_HSV", (force_enum_int<decltype(cv::COLORMAP_HSV)>::Type)cv::COLORMAP_HSV);
    mod.set_const("cv_COLORMAP_INFERNO", (force_enum_int<decltype(cv::COLORMAP_INFERNO)>::Type)cv::COLORMAP_INFERNO);
    mod.set_const("cv_COLORMAP_JET", (force_enum_int<decltype(cv::COLORMAP_JET)>::Type)cv::COLORMAP_JET);
    mod.set_const("cv_COLORMAP_MAGMA", (force_enum_int<decltype(cv::COLORMAP_MAGMA)>::Type)cv::COLORMAP_MAGMA);
    mod.set_const("cv_COLORMAP_OCEAN", (force_enum_int<decltype(cv::COLORMAP_OCEAN)>::Type)cv::COLORMAP_OCEAN);
    mod.set_const("cv_COLORMAP_PARULA", (force_enum_int<decltype(cv::COLORMAP_PARULA)>::Type)cv::COLORMAP_PARULA);
    mod.set_const("cv_COLORMAP_PINK", (force_enum_int<decltype(cv::COLORMAP_PINK)>::Type)cv::COLORMAP_PINK);
    mod.set_const("cv_COLORMAP_PLASMA", (force_enum_int<decltype(cv::COLORMAP_PLASMA)>::Type)cv::COLORMAP_PLASMA);
    mod.set_const("cv_COLORMAP_RAINBOW", (force_enum_int<decltype(cv::COLORMAP_RAINBOW)>::Type)cv::COLORMAP_RAINBOW);
    mod.set_const("cv_COLORMAP_SPRING", (force_enum_int<decltype(cv::COLORMAP_SPRING)>::Type)cv::COLORMAP_SPRING);
    mod.set_const("cv_COLORMAP_SUMMER", (force_enum_int<decltype(cv::COLORMAP_SUMMER)>::Type)cv::COLORMAP_SUMMER);
    mod.set_const("cv_COLORMAP_TURBO", (force_enum_int<decltype(cv::COLORMAP_TURBO)>::Type)cv::COLORMAP_TURBO);
    mod.set_const("cv_COLORMAP_TWILIGHT", (force_enum_int<decltype(cv::COLORMAP_TWILIGHT)>::Type)cv::COLORMAP_TWILIGHT);
    mod.set_const("cv_COLORMAP_TWILIGHT_SHIFTED", (force_enum_int<decltype(cv::COLORMAP_TWILIGHT_SHIFTED)>::Type)cv::COLORMAP_TWILIGHT_SHIFTED);
    mod.set_const("cv_COLORMAP_VIRIDIS", (force_enum_int<decltype(cv::COLORMAP_VIRIDIS)>::Type)cv::COLORMAP_VIRIDIS);
    mod.set_const("cv_COLORMAP_WINTER", (force_enum_int<decltype(cv::COLORMAP_WINTER)>::Type)cv::COLORMAP_WINTER);
    mod.set_const("cv_COLOR_BGR2BGR555", (force_enum_int<decltype(cv::COLOR_BGR2BGR555)>::Type)cv::COLOR_BGR2BGR555);
    mod.set_const("cv_COLOR_BGR2BGR565", (force_enum_int<decltype(cv::COLOR_BGR2BGR565)>::Type)cv::COLOR_BGR2BGR565);
    mod.set_const("cv_COLOR_BGR2BGRA", (force_enum_int<decltype(cv::COLOR_BGR2BGRA)>::Type)cv::COLOR_BGR2BGRA);
    mod.set_const("cv_COLOR_BGR2GRAY", (force_enum_int<decltype(cv::COLOR_BGR2GRAY)>::Type)cv::COLOR_BGR2GRAY);
    mod.set_const("cv_COLOR_BGR2HLS", (force_enum_int<decltype(cv::COLOR_BGR2HLS)>::Type)cv::COLOR_BGR2HLS);
    mod.set_const("cv_COLOR_BGR2HLS_FULL", (force_enum_int<decltype(cv::COLOR_BGR2HLS_FULL)>::Type)cv::COLOR_BGR2HLS_FULL);
    mod.set_const("cv_COLOR_BGR2HSV", (force_enum_int<decltype(cv::COLOR_BGR2HSV)>::Type)cv::COLOR_BGR2HSV);
    mod.set_const("cv_COLOR_BGR2HSV_FULL", (force_enum_int<decltype(cv::COLOR_BGR2HSV_FULL)>::Type)cv::COLOR_BGR2HSV_FULL);
    mod.set_const("cv_COLOR_BGR2Lab", (force_enum_int<decltype(cv::COLOR_BGR2Lab)>::Type)cv::COLOR_BGR2Lab);
    mod.set_const("cv_COLOR_BGR2LAB", (force_enum_int<decltype(cv::COLOR_BGR2Lab)>::Type)cv::COLOR_BGR2Lab);
    mod.set_const("cv_COLOR_BGR2Luv", (force_enum_int<decltype(cv::COLOR_BGR2Luv)>::Type)cv::COLOR_BGR2Luv);
    mod.set_const("cv_COLOR_BGR2LUV", (force_enum_int<decltype(cv::COLOR_BGR2Luv)>::Type)cv::COLOR_BGR2Luv);
    mod.set_const("cv_COLOR_BGR2RGB", (force_enum_int<decltype(cv::COLOR_BGR2RGB)>::Type)cv::COLOR_BGR2RGB);
    mod.set_const("cv_COLOR_BGR2RGBA", (force_enum_int<decltype(cv::COLOR_BGR2RGBA)>::Type)cv::COLOR_BGR2RGBA);
    mod.set_const("cv_COLOR_BGR2XYZ", (force_enum_int<decltype(cv::COLOR_BGR2XYZ)>::Type)cv::COLOR_BGR2XYZ);
    mod.set_const("cv_COLOR_BGR2YCrCb", (force_enum_int<decltype(cv::COLOR_BGR2YCrCb)>::Type)cv::COLOR_BGR2YCrCb);
    mod.set_const("cv_COLOR_BGR2YCR_CB", (force_enum_int<decltype(cv::COLOR_BGR2YCrCb)>::Type)cv::COLOR_BGR2YCrCb);
    mod.set_const("cv_COLOR_BGR2YUV", (force_enum_int<decltype(cv::COLOR_BGR2YUV)>::Type)cv::COLOR_BGR2YUV);
    mod.set_const("cv_COLOR_BGR2YUV_I420", (force_enum_int<decltype(cv::COLOR_BGR2YUV_I420)>::Type)cv::COLOR_BGR2YUV_I420);
    mod.set_const("cv_COLOR_BGR2YUV_IYUV", (force_enum_int<decltype(cv::COLOR_BGR2YUV_IYUV)>::Type)cv::COLOR_BGR2YUV_IYUV);
    mod.set_const("cv_COLOR_BGR2YUV_YV12", (force_enum_int<decltype(cv::COLOR_BGR2YUV_YV12)>::Type)cv::COLOR_BGR2YUV_YV12);
    mod.set_const("cv_COLOR_BGR5552BGR", (force_enum_int<decltype(cv::COLOR_BGR5552BGR)>::Type)cv::COLOR_BGR5552BGR);
    mod.set_const("cv_COLOR_BGR5552BGRA", (force_enum_int<decltype(cv::COLOR_BGR5552BGRA)>::Type)cv::COLOR_BGR5552BGRA);
    mod.set_const("cv_COLOR_BGR5552GRAY", (force_enum_int<decltype(cv::COLOR_BGR5552GRAY)>::Type)cv::COLOR_BGR5552GRAY);
    mod.set_const("cv_COLOR_BGR5552RGB", (force_enum_int<decltype(cv::COLOR_BGR5552RGB)>::Type)cv::COLOR_BGR5552RGB);
    mod.set_const("cv_COLOR_BGR5552RGBA", (force_enum_int<decltype(cv::COLOR_BGR5552RGBA)>::Type)cv::COLOR_BGR5552RGBA);
    mod.set_const("cv_COLOR_BGR5652BGR", (force_enum_int<decltype(cv::COLOR_BGR5652BGR)>::Type)cv::COLOR_BGR5652BGR);
    mod.set_const("cv_COLOR_BGR5652BGRA", (force_enum_int<decltype(cv::COLOR_BGR5652BGRA)>::Type)cv::COLOR_BGR5652BGRA);
    mod.set_const("cv_COLOR_BGR5652GRAY", (force_enum_int<decltype(cv::COLOR_BGR5652GRAY)>::Type)cv::COLOR_BGR5652GRAY);
    mod.set_const("cv_COLOR_BGR5652RGB", (force_enum_int<decltype(cv::COLOR_BGR5652RGB)>::Type)cv::COLOR_BGR5652RGB);
    mod.set_const("cv_COLOR_BGR5652RGBA", (force_enum_int<decltype(cv::COLOR_BGR5652RGBA)>::Type)cv::COLOR_BGR5652RGBA);
    mod.set_const("cv_COLOR_BGRA2BGR", (force_enum_int<decltype(cv::COLOR_BGRA2BGR)>::Type)cv::COLOR_BGRA2BGR);
    mod.set_const("cv_COLOR_BGRA2BGR555", (force_enum_int<decltype(cv::COLOR_BGRA2BGR555)>::Type)cv::COLOR_BGRA2BGR555);
    mod.set_const("cv_COLOR_BGRA2BGR565", (force_enum_int<decltype(cv::COLOR_BGRA2BGR565)>::Type)cv::COLOR_BGRA2BGR565);
    mod.set_const("cv_COLOR_BGRA2GRAY", (force_enum_int<decltype(cv::COLOR_BGRA2GRAY)>::Type)cv::COLOR_BGRA2GRAY);
    mod.set_const("cv_COLOR_BGRA2RGB", (force_enum_int<decltype(cv::COLOR_BGRA2RGB)>::Type)cv::COLOR_BGRA2RGB);
    mod.set_const("cv_COLOR_BGRA2RGBA", (force_enum_int<decltype(cv::COLOR_BGRA2RGBA)>::Type)cv::COLOR_BGRA2RGBA);
    mod.set_const("cv_COLOR_BGRA2YUV_I420", (force_enum_int<decltype(cv::COLOR_BGRA2YUV_I420)>::Type)cv::COLOR_BGRA2YUV_I420);
    mod.set_const("cv_COLOR_BGRA2YUV_IYUV", (force_enum_int<decltype(cv::COLOR_BGRA2YUV_IYUV)>::Type)cv::COLOR_BGRA2YUV_IYUV);
    mod.set_const("cv_COLOR_BGRA2YUV_YV12", (force_enum_int<decltype(cv::COLOR_BGRA2YUV_YV12)>::Type)cv::COLOR_BGRA2YUV_YV12);
    mod.set_const("cv_COLOR_BayerBG2BGR", (force_enum_int<decltype(cv::COLOR_BayerBG2BGR)>::Type)cv::COLOR_BayerBG2BGR);
    mod.set_const("cv_COLOR_BAYER_BG2BGR", (force_enum_int<decltype(cv::COLOR_BayerBG2BGR)>::Type)cv::COLOR_BayerBG2BGR);
    mod.set_const("cv_COLOR_BayerBG2BGRA", (force_enum_int<decltype(cv::COLOR_BayerBG2BGRA)>::Type)cv::COLOR_BayerBG2BGRA);
    mod.set_const("cv_COLOR_BAYER_BG2BGRA", (force_enum_int<decltype(cv::COLOR_BayerBG2BGRA)>::Type)cv::COLOR_BayerBG2BGRA);
    mod.set_const("cv_COLOR_BayerBG2BGR_EA", (force_enum_int<decltype(cv::COLOR_BayerBG2BGR_EA)>::Type)cv::COLOR_BayerBG2BGR_EA);
    mod.set_const("cv_COLOR_BAYER_BG2BGR_EA", (force_enum_int<decltype(cv::COLOR_BayerBG2BGR_EA)>::Type)cv::COLOR_BayerBG2BGR_EA);
    mod.set_const("cv_COLOR_BayerBG2BGR_VNG", (force_enum_int<decltype(cv::COLOR_BayerBG2BGR_VNG)>::Type)cv::COLOR_BayerBG2BGR_VNG);
    mod.set_const("cv_COLOR_BAYER_BG2BGR_VNG", (force_enum_int<decltype(cv::COLOR_BayerBG2BGR_VNG)>::Type)cv::COLOR_BayerBG2BGR_VNG);
    mod.set_const("cv_COLOR_BayerBG2GRAY", (force_enum_int<decltype(cv::COLOR_BayerBG2GRAY)>::Type)cv::COLOR_BayerBG2GRAY);
    mod.set_const("cv_COLOR_BAYER_BG2GRAY", (force_enum_int<decltype(cv::COLOR_BayerBG2GRAY)>::Type)cv::COLOR_BayerBG2GRAY);
    mod.set_const("cv_COLOR_BayerBG2RGB", (force_enum_int<decltype(cv::COLOR_BayerBG2RGB)>::Type)cv::COLOR_BayerBG2RGB);
    mod.set_const("cv_COLOR_BAYER_BG2RGB", (force_enum_int<decltype(cv::COLOR_BayerBG2RGB)>::Type)cv::COLOR_BayerBG2RGB);
    mod.set_const("cv_COLOR_BayerBG2RGBA", (force_enum_int<decltype(cv::COLOR_BayerBG2RGBA)>::Type)cv::COLOR_BayerBG2RGBA);
    mod.set_const("cv_COLOR_BAYER_BG2RGBA", (force_enum_int<decltype(cv::COLOR_BayerBG2RGBA)>::Type)cv::COLOR_BayerBG2RGBA);
    mod.set_const("cv_COLOR_BayerBG2RGB_EA", (force_enum_int<decltype(cv::COLOR_BayerBG2RGB_EA)>::Type)cv::COLOR_BayerBG2RGB_EA);
    mod.set_const("cv_COLOR_BAYER_BG2RGB_EA", (force_enum_int<decltype(cv::COLOR_BayerBG2RGB_EA)>::Type)cv::COLOR_BayerBG2RGB_EA);
    mod.set_const("cv_COLOR_BayerBG2RGB_VNG", (force_enum_int<decltype(cv::COLOR_BayerBG2RGB_VNG)>::Type)cv::COLOR_BayerBG2RGB_VNG);
    mod.set_const("cv_COLOR_BAYER_BG2RGB_VNG", (force_enum_int<decltype(cv::COLOR_BayerBG2RGB_VNG)>::Type)cv::COLOR_BayerBG2RGB_VNG);
    mod.set_const("cv_COLOR_BayerGB2BGR", (force_enum_int<decltype(cv::COLOR_BayerGB2BGR)>::Type)cv::COLOR_BayerGB2BGR);
    mod.set_const("cv_COLOR_BAYER_GB2BGR", (force_enum_int<decltype(cv::COLOR_BayerGB2BGR)>::Type)cv::COLOR_BayerGB2BGR);
    mod.set_const("cv_COLOR_BayerGB2BGRA", (force_enum_int<decltype(cv::COLOR_BayerGB2BGRA)>::Type)cv::COLOR_BayerGB2BGRA);
    mod.set_const("cv_COLOR_BAYER_GB2BGRA", (force_enum_int<decltype(cv::COLOR_BayerGB2BGRA)>::Type)cv::COLOR_BayerGB2BGRA);
    mod.set_const("cv_COLOR_BayerGB2BGR_EA", (force_enum_int<decltype(cv::COLOR_BayerGB2BGR_EA)>::Type)cv::COLOR_BayerGB2BGR_EA);
    mod.set_const("cv_COLOR_BAYER_GB2BGR_EA", (force_enum_int<decltype(cv::COLOR_BayerGB2BGR_EA)>::Type)cv::COLOR_BayerGB2BGR_EA);
    mod.set_const("cv_COLOR_BayerGB2BGR_VNG", (force_enum_int<decltype(cv::COLOR_BayerGB2BGR_VNG)>::Type)cv::COLOR_BayerGB2BGR_VNG);
    mod.set_const("cv_COLOR_BAYER_GB2BGR_VNG", (force_enum_int<decltype(cv::COLOR_BayerGB2BGR_VNG)>::Type)cv::COLOR_BayerGB2BGR_VNG);
    mod.set_const("cv_COLOR_BayerGB2GRAY", (force_enum_int<decltype(cv::COLOR_BayerGB2GRAY)>::Type)cv::COLOR_BayerGB2GRAY);
    mod.set_const("cv_COLOR_BAYER_GB2GRAY", (force_enum_int<decltype(cv::COLOR_BayerGB2GRAY)>::Type)cv::COLOR_BayerGB2GRAY);
    mod.set_const("cv_COLOR_BayerGB2RGB", (force_enum_int<decltype(cv::COLOR_BayerGB2RGB)>::Type)cv::COLOR_BayerGB2RGB);
    mod.set_const("cv_COLOR_BAYER_GB2RGB", (force_enum_int<decltype(cv::COLOR_BayerGB2RGB)>::Type)cv::COLOR_BayerGB2RGB);
    mod.set_const("cv_COLOR_BayerGB2RGBA", (force_enum_int<decltype(cv::COLOR_BayerGB2RGBA)>::Type)cv::COLOR_BayerGB2RGBA);
    mod.set_const("cv_COLOR_BAYER_GB2RGBA", (force_enum_int<decltype(cv::COLOR_BayerGB2RGBA)>::Type)cv::COLOR_BayerGB2RGBA);
    mod.set_const("cv_COLOR_BayerGB2RGB_EA", (force_enum_int<decltype(cv::COLOR_BayerGB2RGB_EA)>::Type)cv::COLOR_BayerGB2RGB_EA);
    mod.set_const("cv_COLOR_BAYER_GB2RGB_EA", (force_enum_int<decltype(cv::COLOR_BayerGB2RGB_EA)>::Type)cv::COLOR_BayerGB2RGB_EA);
    mod.set_const("cv_COLOR_BayerGB2RGB_VNG", (force_enum_int<decltype(cv::COLOR_BayerGB2RGB_VNG)>::Type)cv::COLOR_BayerGB2RGB_VNG);
    mod.set_const("cv_COLOR_BAYER_GB2RGB_VNG", (force_enum_int<decltype(cv::COLOR_BayerGB2RGB_VNG)>::Type)cv::COLOR_BayerGB2RGB_VNG);
    mod.set_const("cv_COLOR_BayerGR2BGR", (force_enum_int<decltype(cv::COLOR_BayerGR2BGR)>::Type)cv::COLOR_BayerGR2BGR);
    mod.set_const("cv_COLOR_BAYER_GR2BGR", (force_enum_int<decltype(cv::COLOR_BayerGR2BGR)>::Type)cv::COLOR_BayerGR2BGR);
    mod.set_const("cv_COLOR_BayerGR2BGRA", (force_enum_int<decltype(cv::COLOR_BayerGR2BGRA)>::Type)cv::COLOR_BayerGR2BGRA);
    mod.set_const("cv_COLOR_BAYER_GR2BGRA", (force_enum_int<decltype(cv::COLOR_BayerGR2BGRA)>::Type)cv::COLOR_BayerGR2BGRA);
    mod.set_const("cv_COLOR_BayerGR2BGR_EA", (force_enum_int<decltype(cv::COLOR_BayerGR2BGR_EA)>::Type)cv::COLOR_BayerGR2BGR_EA);
    mod.set_const("cv_COLOR_BAYER_GR2BGR_EA", (force_enum_int<decltype(cv::COLOR_BayerGR2BGR_EA)>::Type)cv::COLOR_BayerGR2BGR_EA);
    mod.set_const("cv_COLOR_BayerGR2BGR_VNG", (force_enum_int<decltype(cv::COLOR_BayerGR2BGR_VNG)>::Type)cv::COLOR_BayerGR2BGR_VNG);
    mod.set_const("cv_COLOR_BAYER_GR2BGR_VNG", (force_enum_int<decltype(cv::COLOR_BayerGR2BGR_VNG)>::Type)cv::COLOR_BayerGR2BGR_VNG);
    mod.set_const("cv_COLOR_BayerGR2GRAY", (force_enum_int<decltype(cv::COLOR_BayerGR2GRAY)>::Type)cv::COLOR_BayerGR2GRAY);
    mod.set_const("cv_COLOR_BAYER_GR2GRAY", (force_enum_int<decltype(cv::COLOR_BayerGR2GRAY)>::Type)cv::COLOR_BayerGR2GRAY);
    mod.set_const("cv_COLOR_BayerGR2RGB", (force_enum_int<decltype(cv::COLOR_BayerGR2RGB)>::Type)cv::COLOR_BayerGR2RGB);
    mod.set_const("cv_COLOR_BAYER_GR2RGB", (force_enum_int<decltype(cv::COLOR_BayerGR2RGB)>::Type)cv::COLOR_BayerGR2RGB);
    mod.set_const("cv_COLOR_BayerGR2RGBA", (force_enum_int<decltype(cv::COLOR_BayerGR2RGBA)>::Type)cv::COLOR_BayerGR2RGBA);
    mod.set_const("cv_COLOR_BAYER_GR2RGBA", (force_enum_int<decltype(cv::COLOR_BayerGR2RGBA)>::Type)cv::COLOR_BayerGR2RGBA);
    mod.set_const("cv_COLOR_BayerGR2RGB_EA", (force_enum_int<decltype(cv::COLOR_BayerGR2RGB_EA)>::Type)cv::COLOR_BayerGR2RGB_EA);
    mod.set_const("cv_COLOR_BAYER_GR2RGB_EA", (force_enum_int<decltype(cv::COLOR_BayerGR2RGB_EA)>::Type)cv::COLOR_BayerGR2RGB_EA);
    mod.set_const("cv_COLOR_BayerGR2RGB_VNG", (force_enum_int<decltype(cv::COLOR_BayerGR2RGB_VNG)>::Type)cv::COLOR_BayerGR2RGB_VNG);
    mod.set_const("cv_COLOR_BAYER_GR2RGB_VNG", (force_enum_int<decltype(cv::COLOR_BayerGR2RGB_VNG)>::Type)cv::COLOR_BayerGR2RGB_VNG);
    mod.set_const("cv_COLOR_BayerRG2BGR", (force_enum_int<decltype(cv::COLOR_BayerRG2BGR)>::Type)cv::COLOR_BayerRG2BGR);
    mod.set_const("cv_COLOR_BAYER_RG2BGR", (force_enum_int<decltype(cv::COLOR_BayerRG2BGR)>::Type)cv::COLOR_BayerRG2BGR);
    mod.set_const("cv_COLOR_BayerRG2BGRA", (force_enum_int<decltype(cv::COLOR_BayerRG2BGRA)>::Type)cv::COLOR_BayerRG2BGRA);
    mod.set_const("cv_COLOR_BAYER_RG2BGRA", (force_enum_int<decltype(cv::COLOR_BayerRG2BGRA)>::Type)cv::COLOR_BayerRG2BGRA);
    mod.set_const("cv_COLOR_BayerRG2BGR_EA", (force_enum_int<decltype(cv::COLOR_BayerRG2BGR_EA)>::Type)cv::COLOR_BayerRG2BGR_EA);
    mod.set_const("cv_COLOR_BAYER_RG2BGR_EA", (force_enum_int<decltype(cv::COLOR_BayerRG2BGR_EA)>::Type)cv::COLOR_BayerRG2BGR_EA);
    mod.set_const("cv_COLOR_BayerRG2BGR_VNG", (force_enum_int<decltype(cv::COLOR_BayerRG2BGR_VNG)>::Type)cv::COLOR_BayerRG2BGR_VNG);
    mod.set_const("cv_COLOR_BAYER_RG2BGR_VNG", (force_enum_int<decltype(cv::COLOR_BayerRG2BGR_VNG)>::Type)cv::COLOR_BayerRG2BGR_VNG);
    mod.set_const("cv_COLOR_BayerRG2GRAY", (force_enum_int<decltype(cv::COLOR_BayerRG2GRAY)>::Type)cv::COLOR_BayerRG2GRAY);
    mod.set_const("cv_COLOR_BAYER_RG2GRAY", (force_enum_int<decltype(cv::COLOR_BayerRG2GRAY)>::Type)cv::COLOR_BayerRG2GRAY);
    mod.set_const("cv_COLOR_BayerRG2RGB", (force_enum_int<decltype(cv::COLOR_BayerRG2RGB)>::Type)cv::COLOR_BayerRG2RGB);
    mod.set_const("cv_COLOR_BAYER_RG2RGB", (force_enum_int<decltype(cv::COLOR_BayerRG2RGB)>::Type)cv::COLOR_BayerRG2RGB);
    mod.set_const("cv_COLOR_BayerRG2RGBA", (force_enum_int<decltype(cv::COLOR_BayerRG2RGBA)>::Type)cv::COLOR_BayerRG2RGBA);
    mod.set_const("cv_COLOR_BAYER_RG2RGBA", (force_enum_int<decltype(cv::COLOR_BayerRG2RGBA)>::Type)cv::COLOR_BayerRG2RGBA);
    mod.set_const("cv_COLOR_BayerRG2RGB_EA", (force_enum_int<decltype(cv::COLOR_BayerRG2RGB_EA)>::Type)cv::COLOR_BayerRG2RGB_EA);
    mod.set_const("cv_COLOR_BAYER_RG2RGB_EA", (force_enum_int<decltype(cv::COLOR_BayerRG2RGB_EA)>::Type)cv::COLOR_BayerRG2RGB_EA);
    mod.set_const("cv_COLOR_BayerRG2RGB_VNG", (force_enum_int<decltype(cv::COLOR_BayerRG2RGB_VNG)>::Type)cv::COLOR_BayerRG2RGB_VNG);
    mod.set_const("cv_COLOR_BAYER_RG2RGB_VNG", (force_enum_int<decltype(cv::COLOR_BayerRG2RGB_VNG)>::Type)cv::COLOR_BayerRG2RGB_VNG);
    mod.set_const("cv_COLOR_COLORCVT_MAX", (force_enum_int<decltype(cv::COLOR_COLORCVT_MAX)>::Type)cv::COLOR_COLORCVT_MAX);
    mod.set_const("cv_COLOR_GRAY2BGR", (force_enum_int<decltype(cv::COLOR_GRAY2BGR)>::Type)cv::COLOR_GRAY2BGR);
    mod.set_const("cv_COLOR_GRAY2BGR555", (force_enum_int<decltype(cv::COLOR_GRAY2BGR555)>::Type)cv::COLOR_GRAY2BGR555);
    mod.set_const("cv_COLOR_GRAY2BGR565", (force_enum_int<decltype(cv::COLOR_GRAY2BGR565)>::Type)cv::COLOR_GRAY2BGR565);
    mod.set_const("cv_COLOR_GRAY2BGRA", (force_enum_int<decltype(cv::COLOR_GRAY2BGRA)>::Type)cv::COLOR_GRAY2BGRA);
    mod.set_const("cv_COLOR_GRAY2RGB", (force_enum_int<decltype(cv::COLOR_GRAY2RGB)>::Type)cv::COLOR_GRAY2RGB);
    mod.set_const("cv_COLOR_GRAY2RGBA", (force_enum_int<decltype(cv::COLOR_GRAY2RGBA)>::Type)cv::COLOR_GRAY2RGBA);
    mod.set_const("cv_COLOR_HLS2BGR", (force_enum_int<decltype(cv::COLOR_HLS2BGR)>::Type)cv::COLOR_HLS2BGR);
    mod.set_const("cv_COLOR_HLS2BGR_FULL", (force_enum_int<decltype(cv::COLOR_HLS2BGR_FULL)>::Type)cv::COLOR_HLS2BGR_FULL);
    mod.set_const("cv_COLOR_HLS2RGB", (force_enum_int<decltype(cv::COLOR_HLS2RGB)>::Type)cv::COLOR_HLS2RGB);
    mod.set_const("cv_COLOR_HLS2RGB_FULL", (force_enum_int<decltype(cv::COLOR_HLS2RGB_FULL)>::Type)cv::COLOR_HLS2RGB_FULL);
    mod.set_const("cv_COLOR_HSV2BGR", (force_enum_int<decltype(cv::COLOR_HSV2BGR)>::Type)cv::COLOR_HSV2BGR);
    mod.set_const("cv_COLOR_HSV2BGR_FULL", (force_enum_int<decltype(cv::COLOR_HSV2BGR_FULL)>::Type)cv::COLOR_HSV2BGR_FULL);
    mod.set_const("cv_COLOR_HSV2RGB", (force_enum_int<decltype(cv::COLOR_HSV2RGB)>::Type)cv::COLOR_HSV2RGB);
    mod.set_const("cv_COLOR_HSV2RGB_FULL", (force_enum_int<decltype(cv::COLOR_HSV2RGB_FULL)>::Type)cv::COLOR_HSV2RGB_FULL);
    mod.set_const("cv_COLOR_LBGR2Lab", (force_enum_int<decltype(cv::COLOR_LBGR2Lab)>::Type)cv::COLOR_LBGR2Lab);
    mod.set_const("cv_COLOR_LBGR2LAB", (force_enum_int<decltype(cv::COLOR_LBGR2Lab)>::Type)cv::COLOR_LBGR2Lab);
    mod.set_const("cv_COLOR_LBGR2Luv", (force_enum_int<decltype(cv::COLOR_LBGR2Luv)>::Type)cv::COLOR_LBGR2Luv);
    mod.set_const("cv_COLOR_LBGR2LUV", (force_enum_int<decltype(cv::COLOR_LBGR2Luv)>::Type)cv::COLOR_LBGR2Luv);
    mod.set_const("cv_COLOR_LRGB2Lab", (force_enum_int<decltype(cv::COLOR_LRGB2Lab)>::Type)cv::COLOR_LRGB2Lab);
    mod.set_const("cv_COLOR_LRGB2LAB", (force_enum_int<decltype(cv::COLOR_LRGB2Lab)>::Type)cv::COLOR_LRGB2Lab);
    mod.set_const("cv_COLOR_LRGB2Luv", (force_enum_int<decltype(cv::COLOR_LRGB2Luv)>::Type)cv::COLOR_LRGB2Luv);
    mod.set_const("cv_COLOR_LRGB2LUV", (force_enum_int<decltype(cv::COLOR_LRGB2Luv)>::Type)cv::COLOR_LRGB2Luv);
    mod.set_const("cv_COLOR_Lab2BGR", (force_enum_int<decltype(cv::COLOR_Lab2BGR)>::Type)cv::COLOR_Lab2BGR);
    mod.set_const("cv_COLOR_LAB2BGR", (force_enum_int<decltype(cv::COLOR_Lab2BGR)>::Type)cv::COLOR_Lab2BGR);
    mod.set_const("cv_COLOR_Lab2LBGR", (force_enum_int<decltype(cv::COLOR_Lab2LBGR)>::Type)cv::COLOR_Lab2LBGR);
    mod.set_const("cv_COLOR_LAB2LBGR", (force_enum_int<decltype(cv::COLOR_Lab2LBGR)>::Type)cv::COLOR_Lab2LBGR);
    mod.set_const("cv_COLOR_Lab2LRGB", (force_enum_int<decltype(cv::COLOR_Lab2LRGB)>::Type)cv::COLOR_Lab2LRGB);
    mod.set_const("cv_COLOR_LAB2LRGB", (force_enum_int<decltype(cv::COLOR_Lab2LRGB)>::Type)cv::COLOR_Lab2LRGB);
    mod.set_const("cv_COLOR_Lab2RGB", (force_enum_int<decltype(cv::COLOR_Lab2RGB)>::Type)cv::COLOR_Lab2RGB);
    mod.set_const("cv_COLOR_LAB2RGB", (force_enum_int<decltype(cv::COLOR_Lab2RGB)>::Type)cv::COLOR_Lab2RGB);
    mod.set_const("cv_COLOR_Luv2BGR", (force_enum_int<decltype(cv::COLOR_Luv2BGR)>::Type)cv::COLOR_Luv2BGR);
    mod.set_const("cv_COLOR_LUV2BGR", (force_enum_int<decltype(cv::COLOR_Luv2BGR)>::Type)cv::COLOR_Luv2BGR);
    mod.set_const("cv_COLOR_Luv2LBGR", (force_enum_int<decltype(cv::COLOR_Luv2LBGR)>::Type)cv::COLOR_Luv2LBGR);
    mod.set_const("cv_COLOR_LUV2LBGR", (force_enum_int<decltype(cv::COLOR_Luv2LBGR)>::Type)cv::COLOR_Luv2LBGR);
    mod.set_const("cv_COLOR_Luv2LRGB", (force_enum_int<decltype(cv::COLOR_Luv2LRGB)>::Type)cv::COLOR_Luv2LRGB);
    mod.set_const("cv_COLOR_LUV2LRGB", (force_enum_int<decltype(cv::COLOR_Luv2LRGB)>::Type)cv::COLOR_Luv2LRGB);
    mod.set_const("cv_COLOR_Luv2RGB", (force_enum_int<decltype(cv::COLOR_Luv2RGB)>::Type)cv::COLOR_Luv2RGB);
    mod.set_const("cv_COLOR_LUV2RGB", (force_enum_int<decltype(cv::COLOR_Luv2RGB)>::Type)cv::COLOR_Luv2RGB);
    mod.set_const("cv_COLOR_RGB2BGR", (force_enum_int<decltype(cv::COLOR_RGB2BGR)>::Type)cv::COLOR_RGB2BGR);
    mod.set_const("cv_COLOR_RGB2BGR555", (force_enum_int<decltype(cv::COLOR_RGB2BGR555)>::Type)cv::COLOR_RGB2BGR555);
    mod.set_const("cv_COLOR_RGB2BGR565", (force_enum_int<decltype(cv::COLOR_RGB2BGR565)>::Type)cv::COLOR_RGB2BGR565);
    mod.set_const("cv_COLOR_RGB2BGRA", (force_enum_int<decltype(cv::COLOR_RGB2BGRA)>::Type)cv::COLOR_RGB2BGRA);
    mod.set_const("cv_COLOR_RGB2GRAY", (force_enum_int<decltype(cv::COLOR_RGB2GRAY)>::Type)cv::COLOR_RGB2GRAY);
    mod.set_const("cv_COLOR_RGB2HLS", (force_enum_int<decltype(cv::COLOR_RGB2HLS)>::Type)cv::COLOR_RGB2HLS);
    mod.set_const("cv_COLOR_RGB2HLS_FULL", (force_enum_int<decltype(cv::COLOR_RGB2HLS_FULL)>::Type)cv::COLOR_RGB2HLS_FULL);
    mod.set_const("cv_COLOR_RGB2HSV", (force_enum_int<decltype(cv::COLOR_RGB2HSV)>::Type)cv::COLOR_RGB2HSV);
    mod.set_const("cv_COLOR_RGB2HSV_FULL", (force_enum_int<decltype(cv::COLOR_RGB2HSV_FULL)>::Type)cv::COLOR_RGB2HSV_FULL);
    mod.set_const("cv_COLOR_RGB2Lab", (force_enum_int<decltype(cv::COLOR_RGB2Lab)>::Type)cv::COLOR_RGB2Lab);
    mod.set_const("cv_COLOR_RGB2LAB", (force_enum_int<decltype(cv::COLOR_RGB2Lab)>::Type)cv::COLOR_RGB2Lab);
    mod.set_const("cv_COLOR_RGB2Luv", (force_enum_int<decltype(cv::COLOR_RGB2Luv)>::Type)cv::COLOR_RGB2Luv);
    mod.set_const("cv_COLOR_RGB2LUV", (force_enum_int<decltype(cv::COLOR_RGB2Luv)>::Type)cv::COLOR_RGB2Luv);
    mod.set_const("cv_COLOR_RGB2RGBA", (force_enum_int<decltype(cv::COLOR_RGB2RGBA)>::Type)cv::COLOR_RGB2RGBA);
    mod.set_const("cv_COLOR_RGB2XYZ", (force_enum_int<decltype(cv::COLOR_RGB2XYZ)>::Type)cv::COLOR_RGB2XYZ);
    mod.set_const("cv_COLOR_RGB2YCrCb", (force_enum_int<decltype(cv::COLOR_RGB2YCrCb)>::Type)cv::COLOR_RGB2YCrCb);
    mod.set_const("cv_COLOR_RGB2YCR_CB", (force_enum_int<decltype(cv::COLOR_RGB2YCrCb)>::Type)cv::COLOR_RGB2YCrCb);
    mod.set_const("cv_COLOR_RGB2YUV", (force_enum_int<decltype(cv::COLOR_RGB2YUV)>::Type)cv::COLOR_RGB2YUV);
    mod.set_const("cv_COLOR_RGB2YUV_I420", (force_enum_int<decltype(cv::COLOR_RGB2YUV_I420)>::Type)cv::COLOR_RGB2YUV_I420);
    mod.set_const("cv_COLOR_RGB2YUV_IYUV", (force_enum_int<decltype(cv::COLOR_RGB2YUV_IYUV)>::Type)cv::COLOR_RGB2YUV_IYUV);
    mod.set_const("cv_COLOR_RGB2YUV_YV12", (force_enum_int<decltype(cv::COLOR_RGB2YUV_YV12)>::Type)cv::COLOR_RGB2YUV_YV12);
    mod.set_const("cv_COLOR_RGBA2BGR", (force_enum_int<decltype(cv::COLOR_RGBA2BGR)>::Type)cv::COLOR_RGBA2BGR);
    mod.set_const("cv_COLOR_RGBA2BGR555", (force_enum_int<decltype(cv::COLOR_RGBA2BGR555)>::Type)cv::COLOR_RGBA2BGR555);
    mod.set_const("cv_COLOR_RGBA2BGR565", (force_enum_int<decltype(cv::COLOR_RGBA2BGR565)>::Type)cv::COLOR_RGBA2BGR565);
    mod.set_const("cv_COLOR_RGBA2BGRA", (force_enum_int<decltype(cv::COLOR_RGBA2BGRA)>::Type)cv::COLOR_RGBA2BGRA);
    mod.set_const("cv_COLOR_RGBA2GRAY", (force_enum_int<decltype(cv::COLOR_RGBA2GRAY)>::Type)cv::COLOR_RGBA2GRAY);
    mod.set_const("cv_COLOR_RGBA2RGB", (force_enum_int<decltype(cv::COLOR_RGBA2RGB)>::Type)cv::COLOR_RGBA2RGB);
    mod.set_const("cv_COLOR_RGBA2YUV_I420", (force_enum_int<decltype(cv::COLOR_RGBA2YUV_I420)>::Type)cv::COLOR_RGBA2YUV_I420);
    mod.set_const("cv_COLOR_RGBA2YUV_IYUV", (force_enum_int<decltype(cv::COLOR_RGBA2YUV_IYUV)>::Type)cv::COLOR_RGBA2YUV_IYUV);
    mod.set_const("cv_COLOR_RGBA2YUV_YV12", (force_enum_int<decltype(cv::COLOR_RGBA2YUV_YV12)>::Type)cv::COLOR_RGBA2YUV_YV12);
    mod.set_const("cv_COLOR_RGBA2mRGBA", (force_enum_int<decltype(cv::COLOR_RGBA2mRGBA)>::Type)cv::COLOR_RGBA2mRGBA);
    mod.set_const("cv_COLOR_RGBA2M_RGBA", (force_enum_int<decltype(cv::COLOR_RGBA2mRGBA)>::Type)cv::COLOR_RGBA2mRGBA);
    mod.set_const("cv_COLOR_XYZ2BGR", (force_enum_int<decltype(cv::COLOR_XYZ2BGR)>::Type)cv::COLOR_XYZ2BGR);
    mod.set_const("cv_COLOR_XYZ2RGB", (force_enum_int<decltype(cv::COLOR_XYZ2RGB)>::Type)cv::COLOR_XYZ2RGB);
    mod.set_const("cv_COLOR_YCrCb2BGR", (force_enum_int<decltype(cv::COLOR_YCrCb2BGR)>::Type)cv::COLOR_YCrCb2BGR);
    mod.set_const("cv_COLOR_YCR_CB2BGR", (force_enum_int<decltype(cv::COLOR_YCrCb2BGR)>::Type)cv::COLOR_YCrCb2BGR);
    mod.set_const("cv_COLOR_YCrCb2RGB", (force_enum_int<decltype(cv::COLOR_YCrCb2RGB)>::Type)cv::COLOR_YCrCb2RGB);
    mod.set_const("cv_COLOR_YCR_CB2RGB", (force_enum_int<decltype(cv::COLOR_YCrCb2RGB)>::Type)cv::COLOR_YCrCb2RGB);
    mod.set_const("cv_COLOR_YUV2BGR", (force_enum_int<decltype(cv::COLOR_YUV2BGR)>::Type)cv::COLOR_YUV2BGR);
    mod.set_const("cv_COLOR_YUV2BGRA_I420", (force_enum_int<decltype(cv::COLOR_YUV2BGRA_I420)>::Type)cv::COLOR_YUV2BGRA_I420);
    mod.set_const("cv_COLOR_YUV2BGRA_IYUV", (force_enum_int<decltype(cv::COLOR_YUV2BGRA_IYUV)>::Type)cv::COLOR_YUV2BGRA_IYUV);
    mod.set_const("cv_COLOR_YUV2BGRA_NV12", (force_enum_int<decltype(cv::COLOR_YUV2BGRA_NV12)>::Type)cv::COLOR_YUV2BGRA_NV12);
    mod.set_const("cv_COLOR_YUV2BGRA_NV21", (force_enum_int<decltype(cv::COLOR_YUV2BGRA_NV21)>::Type)cv::COLOR_YUV2BGRA_NV21);
    mod.set_const("cv_COLOR_YUV2BGRA_UYNV", (force_enum_int<decltype(cv::COLOR_YUV2BGRA_UYNV)>::Type)cv::COLOR_YUV2BGRA_UYNV);
    mod.set_const("cv_COLOR_YUV2BGRA_UYVY", (force_enum_int<decltype(cv::COLOR_YUV2BGRA_UYVY)>::Type)cv::COLOR_YUV2BGRA_UYVY);
    mod.set_const("cv_COLOR_YUV2BGRA_Y422", (force_enum_int<decltype(cv::COLOR_YUV2BGRA_Y422)>::Type)cv::COLOR_YUV2BGRA_Y422);
    mod.set_const("cv_COLOR_YUV2BGRA_YUNV", (force_enum_int<decltype(cv::COLOR_YUV2BGRA_YUNV)>::Type)cv::COLOR_YUV2BGRA_YUNV);
    mod.set_const("cv_COLOR_YUV2BGRA_YUY2", (force_enum_int<decltype(cv::COLOR_YUV2BGRA_YUY2)>::Type)cv::COLOR_YUV2BGRA_YUY2);
    mod.set_const("cv_COLOR_YUV2BGRA_YUYV", (force_enum_int<decltype(cv::COLOR_YUV2BGRA_YUYV)>::Type)cv::COLOR_YUV2BGRA_YUYV);
    mod.set_const("cv_COLOR_YUV2BGRA_YV12", (force_enum_int<decltype(cv::COLOR_YUV2BGRA_YV12)>::Type)cv::COLOR_YUV2BGRA_YV12);
    mod.set_const("cv_COLOR_YUV2BGRA_YVYU", (force_enum_int<decltype(cv::COLOR_YUV2BGRA_YVYU)>::Type)cv::COLOR_YUV2BGRA_YVYU);
    mod.set_const("cv_COLOR_YUV2BGR_I420", (force_enum_int<decltype(cv::COLOR_YUV2BGR_I420)>::Type)cv::COLOR_YUV2BGR_I420);
    mod.set_const("cv_COLOR_YUV2BGR_IYUV", (force_enum_int<decltype(cv::COLOR_YUV2BGR_IYUV)>::Type)cv::COLOR_YUV2BGR_IYUV);
    mod.set_const("cv_COLOR_YUV2BGR_NV12", (force_enum_int<decltype(cv::COLOR_YUV2BGR_NV12)>::Type)cv::COLOR_YUV2BGR_NV12);
    mod.set_const("cv_COLOR_YUV2BGR_NV21", (force_enum_int<decltype(cv::COLOR_YUV2BGR_NV21)>::Type)cv::COLOR_YUV2BGR_NV21);
    mod.set_const("cv_COLOR_YUV2BGR_UYNV", (force_enum_int<decltype(cv::COLOR_YUV2BGR_UYNV)>::Type)cv::COLOR_YUV2BGR_UYNV);
    mod.set_const("cv_COLOR_YUV2BGR_UYVY", (force_enum_int<decltype(cv::COLOR_YUV2BGR_UYVY)>::Type)cv::COLOR_YUV2BGR_UYVY);
    mod.set_const("cv_COLOR_YUV2BGR_Y422", (force_enum_int<decltype(cv::COLOR_YUV2BGR_Y422)>::Type)cv::COLOR_YUV2BGR_Y422);
    mod.set_const("cv_COLOR_YUV2BGR_YUNV", (force_enum_int<decltype(cv::COLOR_YUV2BGR_YUNV)>::Type)cv::COLOR_YUV2BGR_YUNV);
    mod.set_const("cv_COLOR_YUV2BGR_YUY2", (force_enum_int<decltype(cv::COLOR_YUV2BGR_YUY2)>::Type)cv::COLOR_YUV2BGR_YUY2);
    mod.set_const("cv_COLOR_YUV2BGR_YUYV", (force_enum_int<decltype(cv::COLOR_YUV2BGR_YUYV)>::Type)cv::COLOR_YUV2BGR_YUYV);
    mod.set_const("cv_COLOR_YUV2BGR_YV12", (force_enum_int<decltype(cv::COLOR_YUV2BGR_YV12)>::Type)cv::COLOR_YUV2BGR_YV12);
    mod.set_const("cv_COLOR_YUV2BGR_YVYU", (force_enum_int<decltype(cv::COLOR_YUV2BGR_YVYU)>::Type)cv::COLOR_YUV2BGR_YVYU);
    mod.set_const("cv_COLOR_YUV2GRAY_420", (force_enum_int<decltype(cv::COLOR_YUV2GRAY_420)>::Type)cv::COLOR_YUV2GRAY_420);
    mod.set_const("cv_COLOR_YUV2GRAY_I420", (force_enum_int<decltype(cv::COLOR_YUV2GRAY_I420)>::Type)cv::COLOR_YUV2GRAY_I420);
    mod.set_const("cv_COLOR_YUV2GRAY_IYUV", (force_enum_int<decltype(cv::COLOR_YUV2GRAY_IYUV)>::Type)cv::COLOR_YUV2GRAY_IYUV);
    mod.set_const("cv_COLOR_YUV2GRAY_NV12", (force_enum_int<decltype(cv::COLOR_YUV2GRAY_NV12)>::Type)cv::COLOR_YUV2GRAY_NV12);
    mod.set_const("cv_COLOR_YUV2GRAY_NV21", (force_enum_int<decltype(cv::COLOR_YUV2GRAY_NV21)>::Type)cv::COLOR_YUV2GRAY_NV21);
    mod.set_const("cv_COLOR_YUV2GRAY_UYNV", (force_enum_int<decltype(cv::COLOR_YUV2GRAY_UYNV)>::Type)cv::COLOR_YUV2GRAY_UYNV);
    mod.set_const("cv_COLOR_YUV2GRAY_UYVY", (force_enum_int<decltype(cv::COLOR_YUV2GRAY_UYVY)>::Type)cv::COLOR_YUV2GRAY_UYVY);
    mod.set_const("cv_COLOR_YUV2GRAY_Y422", (force_enum_int<decltype(cv::COLOR_YUV2GRAY_Y422)>::Type)cv::COLOR_YUV2GRAY_Y422);
    mod.set_const("cv_COLOR_YUV2GRAY_YUNV", (force_enum_int<decltype(cv::COLOR_YUV2GRAY_YUNV)>::Type)cv::COLOR_YUV2GRAY_YUNV);
    mod.set_const("cv_COLOR_YUV2GRAY_YUY2", (force_enum_int<decltype(cv::COLOR_YUV2GRAY_YUY2)>::Type)cv::COLOR_YUV2GRAY_YUY2);
    mod.set_const("cv_COLOR_YUV2GRAY_YUYV", (force_enum_int<decltype(cv::COLOR_YUV2GRAY_YUYV)>::Type)cv::COLOR_YUV2GRAY_YUYV);
    mod.set_const("cv_COLOR_YUV2GRAY_YV12", (force_enum_int<decltype(cv::COLOR_YUV2GRAY_YV12)>::Type)cv::COLOR_YUV2GRAY_YV12);
    mod.set_const("cv_COLOR_YUV2GRAY_YVYU", (force_enum_int<decltype(cv::COLOR_YUV2GRAY_YVYU)>::Type)cv::COLOR_YUV2GRAY_YVYU);
    mod.set_const("cv_COLOR_YUV2RGB", (force_enum_int<decltype(cv::COLOR_YUV2RGB)>::Type)cv::COLOR_YUV2RGB);
    mod.set_const("cv_COLOR_YUV2RGBA_I420", (force_enum_int<decltype(cv::COLOR_YUV2RGBA_I420)>::Type)cv::COLOR_YUV2RGBA_I420);
    mod.set_const("cv_COLOR_YUV2RGBA_IYUV", (force_enum_int<decltype(cv::COLOR_YUV2RGBA_IYUV)>::Type)cv::COLOR_YUV2RGBA_IYUV);
    mod.set_const("cv_COLOR_YUV2RGBA_NV12", (force_enum_int<decltype(cv::COLOR_YUV2RGBA_NV12)>::Type)cv::COLOR_YUV2RGBA_NV12);
    mod.set_const("cv_COLOR_YUV2RGBA_NV21", (force_enum_int<decltype(cv::COLOR_YUV2RGBA_NV21)>::Type)cv::COLOR_YUV2RGBA_NV21);
    mod.set_const("cv_COLOR_YUV2RGBA_UYNV", (force_enum_int<decltype(cv::COLOR_YUV2RGBA_UYNV)>::Type)cv::COLOR_YUV2RGBA_UYNV);
    mod.set_const("cv_COLOR_YUV2RGBA_UYVY", (force_enum_int<decltype(cv::COLOR_YUV2RGBA_UYVY)>::Type)cv::COLOR_YUV2RGBA_UYVY);
    mod.set_const("cv_COLOR_YUV2RGBA_Y422", (force_enum_int<decltype(cv::COLOR_YUV2RGBA_Y422)>::Type)cv::COLOR_YUV2RGBA_Y422);
    mod.set_const("cv_COLOR_YUV2RGBA_YUNV", (force_enum_int<decltype(cv::COLOR_YUV2RGBA_YUNV)>::Type)cv::COLOR_YUV2RGBA_YUNV);
    mod.set_const("cv_COLOR_YUV2RGBA_YUY2", (force_enum_int<decltype(cv::COLOR_YUV2RGBA_YUY2)>::Type)cv::COLOR_YUV2RGBA_YUY2);
    mod.set_const("cv_COLOR_YUV2RGBA_YUYV", (force_enum_int<decltype(cv::COLOR_YUV2RGBA_YUYV)>::Type)cv::COLOR_YUV2RGBA_YUYV);
    mod.set_const("cv_COLOR_YUV2RGBA_YV12", (force_enum_int<decltype(cv::COLOR_YUV2RGBA_YV12)>::Type)cv::COLOR_YUV2RGBA_YV12);
    mod.set_const("cv_COLOR_YUV2RGBA_YVYU", (force_enum_int<decltype(cv::COLOR_YUV2RGBA_YVYU)>::Type)cv::COLOR_YUV2RGBA_YVYU);
    mod.set_const("cv_COLOR_YUV2RGB_I420", (force_enum_int<decltype(cv::COLOR_YUV2RGB_I420)>::Type)cv::COLOR_YUV2RGB_I420);
    mod.set_const("cv_COLOR_YUV2RGB_IYUV", (force_enum_int<decltype(cv::COLOR_YUV2RGB_IYUV)>::Type)cv::COLOR_YUV2RGB_IYUV);
    mod.set_const("cv_COLOR_YUV2RGB_NV12", (force_enum_int<decltype(cv::COLOR_YUV2RGB_NV12)>::Type)cv::COLOR_YUV2RGB_NV12);
    mod.set_const("cv_COLOR_YUV2RGB_NV21", (force_enum_int<decltype(cv::COLOR_YUV2RGB_NV21)>::Type)cv::COLOR_YUV2RGB_NV21);
    mod.set_const("cv_COLOR_YUV2RGB_UYNV", (force_enum_int<decltype(cv::COLOR_YUV2RGB_UYNV)>::Type)cv::COLOR_YUV2RGB_UYNV);
    mod.set_const("cv_COLOR_YUV2RGB_UYVY", (force_enum_int<decltype(cv::COLOR_YUV2RGB_UYVY)>::Type)cv::COLOR_YUV2RGB_UYVY);
    mod.set_const("cv_COLOR_YUV2RGB_Y422", (force_enum_int<decltype(cv::COLOR_YUV2RGB_Y422)>::Type)cv::COLOR_YUV2RGB_Y422);
    mod.set_const("cv_COLOR_YUV2RGB_YUNV", (force_enum_int<decltype(cv::COLOR_YUV2RGB_YUNV)>::Type)cv::COLOR_YUV2RGB_YUNV);
    mod.set_const("cv_COLOR_YUV2RGB_YUY2", (force_enum_int<decltype(cv::COLOR_YUV2RGB_YUY2)>::Type)cv::COLOR_YUV2RGB_YUY2);
    mod.set_const("cv_COLOR_YUV2RGB_YUYV", (force_enum_int<decltype(cv::COLOR_YUV2RGB_YUYV)>::Type)cv::COLOR_YUV2RGB_YUYV);
    mod.set_const("cv_COLOR_YUV2RGB_YV12", (force_enum_int<decltype(cv::COLOR_YUV2RGB_YV12)>::Type)cv::COLOR_YUV2RGB_YV12);
    mod.set_const("cv_COLOR_YUV2RGB_YVYU", (force_enum_int<decltype(cv::COLOR_YUV2RGB_YVYU)>::Type)cv::COLOR_YUV2RGB_YVYU);
    mod.set_const("cv_COLOR_YUV420p2BGR", (force_enum_int<decltype(cv::COLOR_YUV420p2BGR)>::Type)cv::COLOR_YUV420p2BGR);
    mod.set_const("cv_COLOR_YUV420P2BGR", (force_enum_int<decltype(cv::COLOR_YUV420p2BGR)>::Type)cv::COLOR_YUV420p2BGR);
    mod.set_const("cv_COLOR_YUV420p2BGRA", (force_enum_int<decltype(cv::COLOR_YUV420p2BGRA)>::Type)cv::COLOR_YUV420p2BGRA);
    mod.set_const("cv_COLOR_YUV420P2BGRA", (force_enum_int<decltype(cv::COLOR_YUV420p2BGRA)>::Type)cv::COLOR_YUV420p2BGRA);
    mod.set_const("cv_COLOR_YUV420p2GRAY", (force_enum_int<decltype(cv::COLOR_YUV420p2GRAY)>::Type)cv::COLOR_YUV420p2GRAY);
    mod.set_const("cv_COLOR_YUV420P2GRAY", (force_enum_int<decltype(cv::COLOR_YUV420p2GRAY)>::Type)cv::COLOR_YUV420p2GRAY);
    mod.set_const("cv_COLOR_YUV420p2RGB", (force_enum_int<decltype(cv::COLOR_YUV420p2RGB)>::Type)cv::COLOR_YUV420p2RGB);
    mod.set_const("cv_COLOR_YUV420P2RGB", (force_enum_int<decltype(cv::COLOR_YUV420p2RGB)>::Type)cv::COLOR_YUV420p2RGB);
    mod.set_const("cv_COLOR_YUV420p2RGBA", (force_enum_int<decltype(cv::COLOR_YUV420p2RGBA)>::Type)cv::COLOR_YUV420p2RGBA);
    mod.set_const("cv_COLOR_YUV420P2RGBA", (force_enum_int<decltype(cv::COLOR_YUV420p2RGBA)>::Type)cv::COLOR_YUV420p2RGBA);
    mod.set_const("cv_COLOR_YUV420sp2BGR", (force_enum_int<decltype(cv::COLOR_YUV420sp2BGR)>::Type)cv::COLOR_YUV420sp2BGR);
    mod.set_const("cv_COLOR_YUV420SP2BGR", (force_enum_int<decltype(cv::COLOR_YUV420sp2BGR)>::Type)cv::COLOR_YUV420sp2BGR);
    mod.set_const("cv_COLOR_YUV420sp2BGRA", (force_enum_int<decltype(cv::COLOR_YUV420sp2BGRA)>::Type)cv::COLOR_YUV420sp2BGRA);
    mod.set_const("cv_COLOR_YUV420SP2BGRA", (force_enum_int<decltype(cv::COLOR_YUV420sp2BGRA)>::Type)cv::COLOR_YUV420sp2BGRA);
    mod.set_const("cv_COLOR_YUV420sp2GRAY", (force_enum_int<decltype(cv::COLOR_YUV420sp2GRAY)>::Type)cv::COLOR_YUV420sp2GRAY);
    mod.set_const("cv_COLOR_YUV420SP2GRAY", (force_enum_int<decltype(cv::COLOR_YUV420sp2GRAY)>::Type)cv::COLOR_YUV420sp2GRAY);
    mod.set_const("cv_COLOR_YUV420sp2RGB", (force_enum_int<decltype(cv::COLOR_YUV420sp2RGB)>::Type)cv::COLOR_YUV420sp2RGB);
    mod.set_const("cv_COLOR_YUV420SP2RGB", (force_enum_int<decltype(cv::COLOR_YUV420sp2RGB)>::Type)cv::COLOR_YUV420sp2RGB);
    mod.set_const("cv_COLOR_YUV420sp2RGBA", (force_enum_int<decltype(cv::COLOR_YUV420sp2RGBA)>::Type)cv::COLOR_YUV420sp2RGBA);
    mod.set_const("cv_COLOR_YUV420SP2RGBA", (force_enum_int<decltype(cv::COLOR_YUV420sp2RGBA)>::Type)cv::COLOR_YUV420sp2RGBA);
    mod.set_const("cv_COLOR_mRGBA2RGBA", (force_enum_int<decltype(cv::COLOR_mRGBA2RGBA)>::Type)cv::COLOR_mRGBA2RGBA);
    mod.set_const("cv_COLOR_M_RGBA2RGBA", (force_enum_int<decltype(cv::COLOR_mRGBA2RGBA)>::Type)cv::COLOR_mRGBA2RGBA);
    mod.set_const("cv_CONTOURS_MATCH_I1", (force_enum_int<decltype(cv::CONTOURS_MATCH_I1)>::Type)cv::CONTOURS_MATCH_I1);
    mod.set_const("cv_CONTOURS_MATCH_I2", (force_enum_int<decltype(cv::CONTOURS_MATCH_I2)>::Type)cv::CONTOURS_MATCH_I2);
    mod.set_const("cv_CONTOURS_MATCH_I3", (force_enum_int<decltype(cv::CONTOURS_MATCH_I3)>::Type)cv::CONTOURS_MATCH_I3);
    mod.set_const("cv_COVAR_COLS", (force_enum_int<decltype(cv::COVAR_COLS)>::Type)cv::COVAR_COLS);
    mod.set_const("cv_COVAR_NORMAL", (force_enum_int<decltype(cv::COVAR_NORMAL)>::Type)cv::COVAR_NORMAL);
    mod.set_const("cv_COVAR_ROWS", (force_enum_int<decltype(cv::COVAR_ROWS)>::Type)cv::COVAR_ROWS);
    mod.set_const("cv_COVAR_SCALE", (force_enum_int<decltype(cv::COVAR_SCALE)>::Type)cv::COVAR_SCALE);
    mod.set_const("cv_COVAR_SCRAMBLED", (force_enum_int<decltype(cv::COVAR_SCRAMBLED)>::Type)cv::COVAR_SCRAMBLED);
    mod.set_const("cv_COVAR_USE_AVG", (force_enum_int<decltype(cv::COVAR_USE_AVG)>::Type)cv::COVAR_USE_AVG);
    mod.set_const("cv_DCT_INVERSE", (force_enum_int<decltype(cv::DCT_INVERSE)>::Type)cv::DCT_INVERSE);
    mod.set_const("cv_DCT_ROWS", (force_enum_int<decltype(cv::DCT_ROWS)>::Type)cv::DCT_ROWS);
    mod.set_const("cv_DECOMP_CHOLESKY", (force_enum_int<decltype(cv::DECOMP_CHOLESKY)>::Type)cv::DECOMP_CHOLESKY);
    mod.set_const("cv_DECOMP_EIG", (force_enum_int<decltype(cv::DECOMP_EIG)>::Type)cv::DECOMP_EIG);
    mod.set_const("cv_DECOMP_LU", (force_enum_int<decltype(cv::DECOMP_LU)>::Type)cv::DECOMP_LU);
    mod.set_const("cv_DECOMP_NORMAL", (force_enum_int<decltype(cv::DECOMP_NORMAL)>::Type)cv::DECOMP_NORMAL);
    mod.set_const("cv_DECOMP_QR", (force_enum_int<decltype(cv::DECOMP_QR)>::Type)cv::DECOMP_QR);
    mod.set_const("cv_DECOMP_SVD", (force_enum_int<decltype(cv::DECOMP_SVD)>::Type)cv::DECOMP_SVD);
    mod.set_const("cv_DFT_COMPLEX_INPUT", (force_enum_int<decltype(cv::DFT_COMPLEX_INPUT)>::Type)cv::DFT_COMPLEX_INPUT);
    mod.set_const("cv_DFT_COMPLEX_OUTPUT", (force_enum_int<decltype(cv::DFT_COMPLEX_OUTPUT)>::Type)cv::DFT_COMPLEX_OUTPUT);
    mod.set_const("cv_DFT_INVERSE", (force_enum_int<decltype(cv::DFT_INVERSE)>::Type)cv::DFT_INVERSE);
    mod.set_const("cv_DFT_REAL_OUTPUT", (force_enum_int<decltype(cv::DFT_REAL_OUTPUT)>::Type)cv::DFT_REAL_OUTPUT);
    mod.set_const("cv_DFT_ROWS", (force_enum_int<decltype(cv::DFT_ROWS)>::Type)cv::DFT_ROWS);
    mod.set_const("cv_DFT_SCALE", (force_enum_int<decltype(cv::DFT_SCALE)>::Type)cv::DFT_SCALE);
    mod.set_const("cv_DIST_C", (force_enum_int<decltype(cv::DIST_C)>::Type)cv::DIST_C);
    mod.set_const("cv_DIST_FAIR", (force_enum_int<decltype(cv::DIST_FAIR)>::Type)cv::DIST_FAIR);
    mod.set_const("cv_DIST_HUBER", (force_enum_int<decltype(cv::DIST_HUBER)>::Type)cv::DIST_HUBER);
    mod.set_const("cv_DIST_L1", (force_enum_int<decltype(cv::DIST_L1)>::Type)cv::DIST_L1);
    mod.set_const("cv_DIST_L12", (force_enum_int<decltype(cv::DIST_L12)>::Type)cv::DIST_L12);
    mod.set_const("cv_DIST_L2", (force_enum_int<decltype(cv::DIST_L2)>::Type)cv::DIST_L2);
    mod.set_const("cv_DIST_LABEL_CCOMP", (force_enum_int<decltype(cv::DIST_LABEL_CCOMP)>::Type)cv::DIST_LABEL_CCOMP);
    mod.set_const("cv_DIST_LABEL_PIXEL", (force_enum_int<decltype(cv::DIST_LABEL_PIXEL)>::Type)cv::DIST_LABEL_PIXEL);
    mod.set_const("cv_DIST_MASK_3", (force_enum_int<decltype(cv::DIST_MASK_3)>::Type)cv::DIST_MASK_3);
    mod.set_const("cv_DIST_MASK_5", (force_enum_int<decltype(cv::DIST_MASK_5)>::Type)cv::DIST_MASK_5);
    mod.set_const("cv_DIST_MASK_PRECISE", (force_enum_int<decltype(cv::DIST_MASK_PRECISE)>::Type)cv::DIST_MASK_PRECISE);
    mod.set_const("cv_DIST_USER", (force_enum_int<decltype(cv::DIST_USER)>::Type)cv::DIST_USER);
    mod.set_const("cv_DIST_WELSCH", (force_enum_int<decltype(cv::DIST_WELSCH)>::Type)cv::DIST_WELSCH);
    mod.set_const("cv_EVENT_FLAG_ALTKEY", (force_enum_int<decltype(cv::EVENT_FLAG_ALTKEY)>::Type)cv::EVENT_FLAG_ALTKEY);
    mod.set_const("cv_EVENT_FLAG_CTRLKEY", (force_enum_int<decltype(cv::EVENT_FLAG_CTRLKEY)>::Type)cv::EVENT_FLAG_CTRLKEY);
    mod.set_const("cv_EVENT_FLAG_LBUTTON", (force_enum_int<decltype(cv::EVENT_FLAG_LBUTTON)>::Type)cv::EVENT_FLAG_LBUTTON);
    mod.set_const("cv_EVENT_FLAG_MBUTTON", (force_enum_int<decltype(cv::EVENT_FLAG_MBUTTON)>::Type)cv::EVENT_FLAG_MBUTTON);
    mod.set_const("cv_EVENT_FLAG_RBUTTON", (force_enum_int<decltype(cv::EVENT_FLAG_RBUTTON)>::Type)cv::EVENT_FLAG_RBUTTON);
    mod.set_const("cv_EVENT_FLAG_SHIFTKEY", (force_enum_int<decltype(cv::EVENT_FLAG_SHIFTKEY)>::Type)cv::EVENT_FLAG_SHIFTKEY);
    mod.set_const("cv_EVENT_LBUTTONDBLCLK", (force_enum_int<decltype(cv::EVENT_LBUTTONDBLCLK)>::Type)cv::EVENT_LBUTTONDBLCLK);
    mod.set_const("cv_EVENT_LBUTTONDOWN", (force_enum_int<decltype(cv::EVENT_LBUTTONDOWN)>::Type)cv::EVENT_LBUTTONDOWN);
    mod.set_const("cv_EVENT_LBUTTONUP", (force_enum_int<decltype(cv::EVENT_LBUTTONUP)>::Type)cv::EVENT_LBUTTONUP);
    mod.set_const("cv_EVENT_MBUTTONDBLCLK", (force_enum_int<decltype(cv::EVENT_MBUTTONDBLCLK)>::Type)cv::EVENT_MBUTTONDBLCLK);
    mod.set_const("cv_EVENT_MBUTTONDOWN", (force_enum_int<decltype(cv::EVENT_MBUTTONDOWN)>::Type)cv::EVENT_MBUTTONDOWN);
    mod.set_const("cv_EVENT_MBUTTONUP", (force_enum_int<decltype(cv::EVENT_MBUTTONUP)>::Type)cv::EVENT_MBUTTONUP);
    mod.set_const("cv_EVENT_MOUSEHWHEEL", (force_enum_int<decltype(cv::EVENT_MOUSEHWHEEL)>::Type)cv::EVENT_MOUSEHWHEEL);
    mod.set_const("cv_EVENT_MOUSEMOVE", (force_enum_int<decltype(cv::EVENT_MOUSEMOVE)>::Type)cv::EVENT_MOUSEMOVE);
    mod.set_const("cv_EVENT_MOUSEWHEEL", (force_enum_int<decltype(cv::EVENT_MOUSEWHEEL)>::Type)cv::EVENT_MOUSEWHEEL);
    mod.set_const("cv_EVENT_RBUTTONDBLCLK", (force_enum_int<decltype(cv::EVENT_RBUTTONDBLCLK)>::Type)cv::EVENT_RBUTTONDBLCLK);
    mod.set_const("cv_EVENT_RBUTTONDOWN", (force_enum_int<decltype(cv::EVENT_RBUTTONDOWN)>::Type)cv::EVENT_RBUTTONDOWN);
    mod.set_const("cv_EVENT_RBUTTONUP", (force_enum_int<decltype(cv::EVENT_RBUTTONUP)>::Type)cv::EVENT_RBUTTONUP);
    mod.set_const("cv_FILLED", (force_enum_int<decltype(cv::FILLED)>::Type)cv::FILLED);
    mod.set_const("cv_FILTER_SCHARR", (force_enum_int<decltype(cv::FILTER_SCHARR)>::Type)cv::FILTER_SCHARR);
    mod.set_const("cv_FLOODFILL_FIXED_RANGE", (force_enum_int<decltype(cv::FLOODFILL_FIXED_RANGE)>::Type)cv::FLOODFILL_FIXED_RANGE);
    mod.set_const("cv_FLOODFILL_MASK_ONLY", (force_enum_int<decltype(cv::FLOODFILL_MASK_ONLY)>::Type)cv::FLOODFILL_MASK_ONLY);
    mod.set_const("cv_FONT_HERSHEY_COMPLEX", (force_enum_int<decltype(cv::FONT_HERSHEY_COMPLEX)>::Type)cv::FONT_HERSHEY_COMPLEX);
    mod.set_const("cv_FONT_HERSHEY_COMPLEX_SMALL", (force_enum_int<decltype(cv::FONT_HERSHEY_COMPLEX_SMALL)>::Type)cv::FONT_HERSHEY_COMPLEX_SMALL);
    mod.set_const("cv_FONT_HERSHEY_DUPLEX", (force_enum_int<decltype(cv::FONT_HERSHEY_DUPLEX)>::Type)cv::FONT_HERSHEY_DUPLEX);
    mod.set_const("cv_FONT_HERSHEY_PLAIN", (force_enum_int<decltype(cv::FONT_HERSHEY_PLAIN)>::Type)cv::FONT_HERSHEY_PLAIN);
    mod.set_const("cv_FONT_HERSHEY_SCRIPT_COMPLEX", (force_enum_int<decltype(cv::FONT_HERSHEY_SCRIPT_COMPLEX)>::Type)cv::FONT_HERSHEY_SCRIPT_COMPLEX);
    mod.set_const("cv_FONT_HERSHEY_SCRIPT_SIMPLEX", (force_enum_int<decltype(cv::FONT_HERSHEY_SCRIPT_SIMPLEX)>::Type)cv::FONT_HERSHEY_SCRIPT_SIMPLEX);
    mod.set_const("cv_FONT_HERSHEY_SIMPLEX", (force_enum_int<decltype(cv::FONT_HERSHEY_SIMPLEX)>::Type)cv::FONT_HERSHEY_SIMPLEX);
    mod.set_const("cv_FONT_HERSHEY_TRIPLEX", (force_enum_int<decltype(cv::FONT_HERSHEY_TRIPLEX)>::Type)cv::FONT_HERSHEY_TRIPLEX);
    mod.set_const("cv_FONT_ITALIC", (force_enum_int<decltype(cv::FONT_ITALIC)>::Type)cv::FONT_ITALIC);
    mod.set_const("cv_FileNode_EMPTY", (force_enum_int<decltype(cv::FileNode::EMPTY)>::Type)cv::FileNode::EMPTY);
    mod.set_const("cv_FILE_NODE_EMPTY", (force_enum_int<decltype(cv::FileNode::EMPTY)>::Type)cv::FileNode::EMPTY);
    mod.set_const("cv_FileNode_FLOAT", (force_enum_int<decltype(cv::FileNode::FLOAT)>::Type)cv::FileNode::FLOAT);
    mod.set_const("cv_FILE_NODE_FLOAT", (force_enum_int<decltype(cv::FileNode::FLOAT)>::Type)cv::FileNode::FLOAT);
    mod.set_const("cv_FileNode_FLOW", (force_enum_int<decltype(cv::FileNode::FLOW)>::Type)cv::FileNode::FLOW);
    mod.set_const("cv_FILE_NODE_FLOW", (force_enum_int<decltype(cv::FileNode::FLOW)>::Type)cv::FileNode::FLOW);
    mod.set_const("cv_FileNode_INT", (force_enum_int<decltype(cv::FileNode::INT)>::Type)cv::FileNode::INT);
    mod.set_const("cv_FILE_NODE_INT", (force_enum_int<decltype(cv::FileNode::INT)>::Type)cv::FileNode::INT);
    mod.set_const("cv_FileNode_MAP", (force_enum_int<decltype(cv::FileNode::MAP)>::Type)cv::FileNode::MAP);
    mod.set_const("cv_FILE_NODE_MAP", (force_enum_int<decltype(cv::FileNode::MAP)>::Type)cv::FileNode::MAP);
    mod.set_const("cv_FileNode_NAMED", (force_enum_int<decltype(cv::FileNode::NAMED)>::Type)cv::FileNode::NAMED);
    mod.set_const("cv_FILE_NODE_NAMED", (force_enum_int<decltype(cv::FileNode::NAMED)>::Type)cv::FileNode::NAMED);
    mod.set_const("cv_FileNode_NONE", (force_enum_int<decltype(cv::FileNode::NONE)>::Type)cv::FileNode::NONE);
    mod.set_const("cv_FILE_NODE_NONE", (force_enum_int<decltype(cv::FileNode::NONE)>::Type)cv::FileNode::NONE);
    mod.set_const("cv_FileNode_REAL", (force_enum_int<decltype(cv::FileNode::REAL)>::Type)cv::FileNode::REAL);
    mod.set_const("cv_FILE_NODE_REAL", (force_enum_int<decltype(cv::FileNode::REAL)>::Type)cv::FileNode::REAL);
    mod.set_const("cv_FileNode_SEQ", (force_enum_int<decltype(cv::FileNode::SEQ)>::Type)cv::FileNode::SEQ);
    mod.set_const("cv_FILE_NODE_SEQ", (force_enum_int<decltype(cv::FileNode::SEQ)>::Type)cv::FileNode::SEQ);
    mod.set_const("cv_FileNode_STR", (force_enum_int<decltype(cv::FileNode::STR)>::Type)cv::FileNode::STR);
    mod.set_const("cv_FILE_NODE_STR", (force_enum_int<decltype(cv::FileNode::STR)>::Type)cv::FileNode::STR);
    mod.set_const("cv_FileNode_STRING", (force_enum_int<decltype(cv::FileNode::STRING)>::Type)cv::FileNode::STRING);
    mod.set_const("cv_FILE_NODE_STRING", (force_enum_int<decltype(cv::FileNode::STRING)>::Type)cv::FileNode::STRING);
    mod.set_const("cv_FileNode_TYPE_MASK", (force_enum_int<decltype(cv::FileNode::TYPE_MASK)>::Type)cv::FileNode::TYPE_MASK);
    mod.set_const("cv_FILE_NODE_TYPE_MASK", (force_enum_int<decltype(cv::FileNode::TYPE_MASK)>::Type)cv::FileNode::TYPE_MASK);
    mod.set_const("cv_FileNode_UNIFORM", (force_enum_int<decltype(cv::FileNode::UNIFORM)>::Type)cv::FileNode::UNIFORM);
    mod.set_const("cv_FILE_NODE_UNIFORM", (force_enum_int<decltype(cv::FileNode::UNIFORM)>::Type)cv::FileNode::UNIFORM);
    mod.set_const("cv_FileStorage_APPEND", (force_enum_int<decltype(cv::FileStorage::APPEND)>::Type)cv::FileStorage::APPEND);
    mod.set_const("cv_FILE_STORAGE_APPEND", (force_enum_int<decltype(cv::FileStorage::APPEND)>::Type)cv::FileStorage::APPEND);
    mod.set_const("cv_FileStorage_BASE64", (force_enum_int<decltype(cv::FileStorage::BASE64)>::Type)cv::FileStorage::BASE64);
    mod.set_const("cv_FILE_STORAGE_BASE64", (force_enum_int<decltype(cv::FileStorage::BASE64)>::Type)cv::FileStorage::BASE64);
    mod.set_const("cv_FileStorage_FORMAT_AUTO", (force_enum_int<decltype(cv::FileStorage::FORMAT_AUTO)>::Type)cv::FileStorage::FORMAT_AUTO);
    mod.set_const("cv_FILE_STORAGE_FORMAT_AUTO", (force_enum_int<decltype(cv::FileStorage::FORMAT_AUTO)>::Type)cv::FileStorage::FORMAT_AUTO);
    mod.set_const("cv_FileStorage_FORMAT_JSON", (force_enum_int<decltype(cv::FileStorage::FORMAT_JSON)>::Type)cv::FileStorage::FORMAT_JSON);
    mod.set_const("cv_FILE_STORAGE_FORMAT_JSON", (force_enum_int<decltype(cv::FileStorage::FORMAT_JSON)>::Type)cv::FileStorage::FORMAT_JSON);
    mod.set_const("cv_FileStorage_FORMAT_MASK", (force_enum_int<decltype(cv::FileStorage::FORMAT_MASK)>::Type)cv::FileStorage::FORMAT_MASK);
    mod.set_const("cv_FILE_STORAGE_FORMAT_MASK", (force_enum_int<decltype(cv::FileStorage::FORMAT_MASK)>::Type)cv::FileStorage::FORMAT_MASK);
    mod.set_const("cv_FileStorage_FORMAT_XML", (force_enum_int<decltype(cv::FileStorage::FORMAT_XML)>::Type)cv::FileStorage::FORMAT_XML);
    mod.set_const("cv_FILE_STORAGE_FORMAT_XML", (force_enum_int<decltype(cv::FileStorage::FORMAT_XML)>::Type)cv::FileStorage::FORMAT_XML);
    mod.set_const("cv_FileStorage_FORMAT_YAML", (force_enum_int<decltype(cv::FileStorage::FORMAT_YAML)>::Type)cv::FileStorage::FORMAT_YAML);
    mod.set_const("cv_FILE_STORAGE_FORMAT_YAML", (force_enum_int<decltype(cv::FileStorage::FORMAT_YAML)>::Type)cv::FileStorage::FORMAT_YAML);
    mod.set_const("cv_FileStorage_INSIDE_MAP", (force_enum_int<decltype(cv::FileStorage::INSIDE_MAP)>::Type)cv::FileStorage::INSIDE_MAP);
    mod.set_const("cv_FILE_STORAGE_INSIDE_MAP", (force_enum_int<decltype(cv::FileStorage::INSIDE_MAP)>::Type)cv::FileStorage::INSIDE_MAP);
    mod.set_const("cv_FileStorage_MEMORY", (force_enum_int<decltype(cv::FileStorage::MEMORY)>::Type)cv::FileStorage::MEMORY);
    mod.set_const("cv_FILE_STORAGE_MEMORY", (force_enum_int<decltype(cv::FileStorage::MEMORY)>::Type)cv::FileStorage::MEMORY);
    mod.set_const("cv_FileStorage_NAME_EXPECTED", (force_enum_int<decltype(cv::FileStorage::NAME_EXPECTED)>::Type)cv::FileStorage::NAME_EXPECTED);
    mod.set_const("cv_FILE_STORAGE_NAME_EXPECTED", (force_enum_int<decltype(cv::FileStorage::NAME_EXPECTED)>::Type)cv::FileStorage::NAME_EXPECTED);
    mod.set_const("cv_FileStorage_READ", (force_enum_int<decltype(cv::FileStorage::READ)>::Type)cv::FileStorage::READ);
    mod.set_const("cv_FILE_STORAGE_READ", (force_enum_int<decltype(cv::FileStorage::READ)>::Type)cv::FileStorage::READ);
    mod.set_const("cv_FileStorage_UNDEFINED", (force_enum_int<decltype(cv::FileStorage::UNDEFINED)>::Type)cv::FileStorage::UNDEFINED);
    mod.set_const("cv_FILE_STORAGE_UNDEFINED", (force_enum_int<decltype(cv::FileStorage::UNDEFINED)>::Type)cv::FileStorage::UNDEFINED);
    mod.set_const("cv_FileStorage_VALUE_EXPECTED", (force_enum_int<decltype(cv::FileStorage::VALUE_EXPECTED)>::Type)cv::FileStorage::VALUE_EXPECTED);
    mod.set_const("cv_FILE_STORAGE_VALUE_EXPECTED", (force_enum_int<decltype(cv::FileStorage::VALUE_EXPECTED)>::Type)cv::FileStorage::VALUE_EXPECTED);
    mod.set_const("cv_FileStorage_WRITE", (force_enum_int<decltype(cv::FileStorage::WRITE)>::Type)cv::FileStorage::WRITE);
    mod.set_const("cv_FILE_STORAGE_WRITE", (force_enum_int<decltype(cv::FileStorage::WRITE)>::Type)cv::FileStorage::WRITE);
    mod.set_const("cv_FileStorage_WRITE_BASE64", (force_enum_int<decltype(cv::FileStorage::WRITE_BASE64)>::Type)cv::FileStorage::WRITE_BASE64);
    mod.set_const("cv_FILE_STORAGE_WRITE_BASE64", (force_enum_int<decltype(cv::FileStorage::WRITE_BASE64)>::Type)cv::FileStorage::WRITE_BASE64);
    mod.set_const("cv_Formatter_FMT_C", (force_enum_int<decltype(cv::Formatter::FMT_C)>::Type)cv::Formatter::FMT_C);
    mod.set_const("cv_FORMATTER_FMT_C", (force_enum_int<decltype(cv::Formatter::FMT_C)>::Type)cv::Formatter::FMT_C);
    mod.set_const("cv_Formatter_FMT_CSV", (force_enum_int<decltype(cv::Formatter::FMT_CSV)>::Type)cv::Formatter::FMT_CSV);
    mod.set_const("cv_FORMATTER_FMT_CSV", (force_enum_int<decltype(cv::Formatter::FMT_CSV)>::Type)cv::Formatter::FMT_CSV);
    mod.set_const("cv_Formatter_FMT_DEFAULT", (force_enum_int<decltype(cv::Formatter::FMT_DEFAULT)>::Type)cv::Formatter::FMT_DEFAULT);
    mod.set_const("cv_FORMATTER_FMT_DEFAULT", (force_enum_int<decltype(cv::Formatter::FMT_DEFAULT)>::Type)cv::Formatter::FMT_DEFAULT);
    mod.set_const("cv_Formatter_FMT_MATLAB", (force_enum_int<decltype(cv::Formatter::FMT_MATLAB)>::Type)cv::Formatter::FMT_MATLAB);
    mod.set_const("cv_FORMATTER_FMT_MATLAB", (force_enum_int<decltype(cv::Formatter::FMT_MATLAB)>::Type)cv::Formatter::FMT_MATLAB);
    mod.set_const("cv_Formatter_FMT_NUMPY", (force_enum_int<decltype(cv::Formatter::FMT_NUMPY)>::Type)cv::Formatter::FMT_NUMPY);
    mod.set_const("cv_FORMATTER_FMT_NUMPY", (force_enum_int<decltype(cv::Formatter::FMT_NUMPY)>::Type)cv::Formatter::FMT_NUMPY);
    mod.set_const("cv_Formatter_FMT_PYTHON", (force_enum_int<decltype(cv::Formatter::FMT_PYTHON)>::Type)cv::Formatter::FMT_PYTHON);
    mod.set_const("cv_FORMATTER_FMT_PYTHON", (force_enum_int<decltype(cv::Formatter::FMT_PYTHON)>::Type)cv::Formatter::FMT_PYTHON);
    mod.set_const("cv_GC_BGD", (force_enum_int<decltype(cv::GC_BGD)>::Type)cv::GC_BGD);
    mod.set_const("cv_GC_EVAL", (force_enum_int<decltype(cv::GC_EVAL)>::Type)cv::GC_EVAL);
    mod.set_const("cv_GC_EVAL_FREEZE_MODEL", (force_enum_int<decltype(cv::GC_EVAL_FREEZE_MODEL)>::Type)cv::GC_EVAL_FREEZE_MODEL);
    mod.set_const("cv_GC_FGD", (force_enum_int<decltype(cv::GC_FGD)>::Type)cv::GC_FGD);
    mod.set_const("cv_GC_INIT_WITH_MASK", (force_enum_int<decltype(cv::GC_INIT_WITH_MASK)>::Type)cv::GC_INIT_WITH_MASK);
    mod.set_const("cv_GC_INIT_WITH_RECT", (force_enum_int<decltype(cv::GC_INIT_WITH_RECT)>::Type)cv::GC_INIT_WITH_RECT);
    mod.set_const("cv_GC_PR_BGD", (force_enum_int<decltype(cv::GC_PR_BGD)>::Type)cv::GC_PR_BGD);
    mod.set_const("cv_GC_PR_FGD", (force_enum_int<decltype(cv::GC_PR_FGD)>::Type)cv::GC_PR_FGD);
    mod.set_const("cv_GEMM_1_T", (force_enum_int<decltype(cv::GEMM_1_T)>::Type)cv::GEMM_1_T);
    mod.set_const("cv_GEMM_2_T", (force_enum_int<decltype(cv::GEMM_2_T)>::Type)cv::GEMM_2_T);
    mod.set_const("cv_GEMM_3_T", (force_enum_int<decltype(cv::GEMM_3_T)>::Type)cv::GEMM_3_T);
    mod.set_const("cv_HISTCMP_BHATTACHARYYA", (force_enum_int<decltype(cv::HISTCMP_BHATTACHARYYA)>::Type)cv::HISTCMP_BHATTACHARYYA);
    mod.set_const("cv_HISTCMP_CHISQR", (force_enum_int<decltype(cv::HISTCMP_CHISQR)>::Type)cv::HISTCMP_CHISQR);
    mod.set_const("cv_HISTCMP_CHISQR_ALT", (force_enum_int<decltype(cv::HISTCMP_CHISQR_ALT)>::Type)cv::HISTCMP_CHISQR_ALT);
    mod.set_const("cv_HISTCMP_CORREL", (force_enum_int<decltype(cv::HISTCMP_CORREL)>::Type)cv::HISTCMP_CORREL);
    mod.set_const("cv_HISTCMP_HELLINGER", (force_enum_int<decltype(cv::HISTCMP_HELLINGER)>::Type)cv::HISTCMP_HELLINGER);
    mod.set_const("cv_HISTCMP_INTERSECT", (force_enum_int<decltype(cv::HISTCMP_INTERSECT)>::Type)cv::HISTCMP_INTERSECT);
    mod.set_const("cv_HISTCMP_KL_DIV", (force_enum_int<decltype(cv::HISTCMP_KL_DIV)>::Type)cv::HISTCMP_KL_DIV);
    mod.set_const("cv_HOUGH_GRADIENT", (force_enum_int<decltype(cv::HOUGH_GRADIENT)>::Type)cv::HOUGH_GRADIENT);
    mod.set_const("cv_HOUGH_GRADIENT_ALT", (force_enum_int<decltype(cv::HOUGH_GRADIENT_ALT)>::Type)cv::HOUGH_GRADIENT_ALT);
    mod.set_const("cv_HOUGH_MULTI_SCALE", (force_enum_int<decltype(cv::HOUGH_MULTI_SCALE)>::Type)cv::HOUGH_MULTI_SCALE);
    mod.set_const("cv_HOUGH_PROBABILISTIC", (force_enum_int<decltype(cv::HOUGH_PROBABILISTIC)>::Type)cv::HOUGH_PROBABILISTIC);
    mod.set_const("cv_HOUGH_STANDARD", (force_enum_int<decltype(cv::HOUGH_STANDARD)>::Type)cv::HOUGH_STANDARD);
    mod.set_const("cv_IMREAD_ANYCOLOR", (force_enum_int<decltype(cv::IMREAD_ANYCOLOR)>::Type)cv::IMREAD_ANYCOLOR);
    mod.set_const("cv_IMREAD_ANYDEPTH", (force_enum_int<decltype(cv::IMREAD_ANYDEPTH)>::Type)cv::IMREAD_ANYDEPTH);
    mod.set_const("cv_IMREAD_COLOR", (force_enum_int<decltype(cv::IMREAD_COLOR)>::Type)cv::IMREAD_COLOR);
    mod.set_const("cv_IMREAD_GRAYSCALE", (force_enum_int<decltype(cv::IMREAD_GRAYSCALE)>::Type)cv::IMREAD_GRAYSCALE);
    mod.set_const("cv_IMREAD_IGNORE_ORIENTATION", (force_enum_int<decltype(cv::IMREAD_IGNORE_ORIENTATION)>::Type)cv::IMREAD_IGNORE_ORIENTATION);
    mod.set_const("cv_IMREAD_LOAD_GDAL", (force_enum_int<decltype(cv::IMREAD_LOAD_GDAL)>::Type)cv::IMREAD_LOAD_GDAL);
    mod.set_const("cv_IMREAD_REDUCED_COLOR_2", (force_enum_int<decltype(cv::IMREAD_REDUCED_COLOR_2)>::Type)cv::IMREAD_REDUCED_COLOR_2);
    mod.set_const("cv_IMREAD_REDUCED_COLOR_4", (force_enum_int<decltype(cv::IMREAD_REDUCED_COLOR_4)>::Type)cv::IMREAD_REDUCED_COLOR_4);
    mod.set_const("cv_IMREAD_REDUCED_COLOR_8", (force_enum_int<decltype(cv::IMREAD_REDUCED_COLOR_8)>::Type)cv::IMREAD_REDUCED_COLOR_8);
    mod.set_const("cv_IMREAD_REDUCED_GRAYSCALE_2", (force_enum_int<decltype(cv::IMREAD_REDUCED_GRAYSCALE_2)>::Type)cv::IMREAD_REDUCED_GRAYSCALE_2);
    mod.set_const("cv_IMREAD_REDUCED_GRAYSCALE_4", (force_enum_int<decltype(cv::IMREAD_REDUCED_GRAYSCALE_4)>::Type)cv::IMREAD_REDUCED_GRAYSCALE_4);
    mod.set_const("cv_IMREAD_REDUCED_GRAYSCALE_8", (force_enum_int<decltype(cv::IMREAD_REDUCED_GRAYSCALE_8)>::Type)cv::IMREAD_REDUCED_GRAYSCALE_8);
    mod.set_const("cv_IMREAD_UNCHANGED", (force_enum_int<decltype(cv::IMREAD_UNCHANGED)>::Type)cv::IMREAD_UNCHANGED);
    mod.set_const("cv_IMWRITE_EXR_TYPE", (force_enum_int<decltype(cv::IMWRITE_EXR_TYPE)>::Type)cv::IMWRITE_EXR_TYPE);
    mod.set_const("cv_IMWRITE_EXR_TYPE_FLOAT", (force_enum_int<decltype(cv::IMWRITE_EXR_TYPE_FLOAT)>::Type)cv::IMWRITE_EXR_TYPE_FLOAT);
    mod.set_const("cv_IMWRITE_EXR_TYPE_HALF", (force_enum_int<decltype(cv::IMWRITE_EXR_TYPE_HALF)>::Type)cv::IMWRITE_EXR_TYPE_HALF);
    mod.set_const("cv_IMWRITE_JPEG2000_COMPRESSION_X1000", (force_enum_int<decltype(cv::IMWRITE_JPEG2000_COMPRESSION_X1000)>::Type)cv::IMWRITE_JPEG2000_COMPRESSION_X1000);
    mod.set_const("cv_IMWRITE_JPEG_CHROMA_QUALITY", (force_enum_int<decltype(cv::IMWRITE_JPEG_CHROMA_QUALITY)>::Type)cv::IMWRITE_JPEG_CHROMA_QUALITY);
    mod.set_const("cv_IMWRITE_JPEG_LUMA_QUALITY", (force_enum_int<decltype(cv::IMWRITE_JPEG_LUMA_QUALITY)>::Type)cv::IMWRITE_JPEG_LUMA_QUALITY);
    mod.set_const("cv_IMWRITE_JPEG_OPTIMIZE", (force_enum_int<decltype(cv::IMWRITE_JPEG_OPTIMIZE)>::Type)cv::IMWRITE_JPEG_OPTIMIZE);
    mod.set_const("cv_IMWRITE_JPEG_PROGRESSIVE", (force_enum_int<decltype(cv::IMWRITE_JPEG_PROGRESSIVE)>::Type)cv::IMWRITE_JPEG_PROGRESSIVE);
    mod.set_const("cv_IMWRITE_JPEG_QUALITY", (force_enum_int<decltype(cv::IMWRITE_JPEG_QUALITY)>::Type)cv::IMWRITE_JPEG_QUALITY);
    mod.set_const("cv_IMWRITE_JPEG_RST_INTERVAL", (force_enum_int<decltype(cv::IMWRITE_JPEG_RST_INTERVAL)>::Type)cv::IMWRITE_JPEG_RST_INTERVAL);
    mod.set_const("cv_IMWRITE_PAM_FORMAT_BLACKANDWHITE", (force_enum_int<decltype(cv::IMWRITE_PAM_FORMAT_BLACKANDWHITE)>::Type)cv::IMWRITE_PAM_FORMAT_BLACKANDWHITE);
    mod.set_const("cv_IMWRITE_PAM_FORMAT_GRAYSCALE", (force_enum_int<decltype(cv::IMWRITE_PAM_FORMAT_GRAYSCALE)>::Type)cv::IMWRITE_PAM_FORMAT_GRAYSCALE);
    mod.set_const("cv_IMWRITE_PAM_FORMAT_GRAYSCALE_ALPHA", (force_enum_int<decltype(cv::IMWRITE_PAM_FORMAT_GRAYSCALE_ALPHA)>::Type)cv::IMWRITE_PAM_FORMAT_GRAYSCALE_ALPHA);
    mod.set_const("cv_IMWRITE_PAM_FORMAT_NULL", (force_enum_int<decltype(cv::IMWRITE_PAM_FORMAT_NULL)>::Type)cv::IMWRITE_PAM_FORMAT_NULL);
    mod.set_const("cv_IMWRITE_PAM_FORMAT_RGB", (force_enum_int<decltype(cv::IMWRITE_PAM_FORMAT_RGB)>::Type)cv::IMWRITE_PAM_FORMAT_RGB);
    mod.set_const("cv_IMWRITE_PAM_FORMAT_RGB_ALPHA", (force_enum_int<decltype(cv::IMWRITE_PAM_FORMAT_RGB_ALPHA)>::Type)cv::IMWRITE_PAM_FORMAT_RGB_ALPHA);
    mod.set_const("cv_IMWRITE_PAM_TUPLETYPE", (force_enum_int<decltype(cv::IMWRITE_PAM_TUPLETYPE)>::Type)cv::IMWRITE_PAM_TUPLETYPE);
    mod.set_const("cv_IMWRITE_PNG_BILEVEL", (force_enum_int<decltype(cv::IMWRITE_PNG_BILEVEL)>::Type)cv::IMWRITE_PNG_BILEVEL);
    mod.set_const("cv_IMWRITE_PNG_COMPRESSION", (force_enum_int<decltype(cv::IMWRITE_PNG_COMPRESSION)>::Type)cv::IMWRITE_PNG_COMPRESSION);
    mod.set_const("cv_IMWRITE_PNG_STRATEGY", (force_enum_int<decltype(cv::IMWRITE_PNG_STRATEGY)>::Type)cv::IMWRITE_PNG_STRATEGY);
    mod.set_const("cv_IMWRITE_PNG_STRATEGY_DEFAULT", (force_enum_int<decltype(cv::IMWRITE_PNG_STRATEGY_DEFAULT)>::Type)cv::IMWRITE_PNG_STRATEGY_DEFAULT);
    mod.set_const("cv_IMWRITE_PNG_STRATEGY_FILTERED", (force_enum_int<decltype(cv::IMWRITE_PNG_STRATEGY_FILTERED)>::Type)cv::IMWRITE_PNG_STRATEGY_FILTERED);
    mod.set_const("cv_IMWRITE_PNG_STRATEGY_FIXED", (force_enum_int<decltype(cv::IMWRITE_PNG_STRATEGY_FIXED)>::Type)cv::IMWRITE_PNG_STRATEGY_FIXED);
    mod.set_const("cv_IMWRITE_PNG_STRATEGY_HUFFMAN_ONLY", (force_enum_int<decltype(cv::IMWRITE_PNG_STRATEGY_HUFFMAN_ONLY)>::Type)cv::IMWRITE_PNG_STRATEGY_HUFFMAN_ONLY);
    mod.set_const("cv_IMWRITE_PNG_STRATEGY_RLE", (force_enum_int<decltype(cv::IMWRITE_PNG_STRATEGY_RLE)>::Type)cv::IMWRITE_PNG_STRATEGY_RLE);
    mod.set_const("cv_IMWRITE_PXM_BINARY", (force_enum_int<decltype(cv::IMWRITE_PXM_BINARY)>::Type)cv::IMWRITE_PXM_BINARY);
    mod.set_const("cv_IMWRITE_TIFF_COMPRESSION", (force_enum_int<decltype(cv::IMWRITE_TIFF_COMPRESSION)>::Type)cv::IMWRITE_TIFF_COMPRESSION);
    mod.set_const("cv_IMWRITE_TIFF_RESUNIT", (force_enum_int<decltype(cv::IMWRITE_TIFF_RESUNIT)>::Type)cv::IMWRITE_TIFF_RESUNIT);
    mod.set_const("cv_IMWRITE_TIFF_XDPI", (force_enum_int<decltype(cv::IMWRITE_TIFF_XDPI)>::Type)cv::IMWRITE_TIFF_XDPI);
    mod.set_const("cv_IMWRITE_TIFF_YDPI", (force_enum_int<decltype(cv::IMWRITE_TIFF_YDPI)>::Type)cv::IMWRITE_TIFF_YDPI);
    mod.set_const("cv_IMWRITE_WEBP_QUALITY", (force_enum_int<decltype(cv::IMWRITE_WEBP_QUALITY)>::Type)cv::IMWRITE_WEBP_QUALITY);
    mod.set_const("cv_INTERSECT_FULL", (force_enum_int<decltype(cv::INTERSECT_FULL)>::Type)cv::INTERSECT_FULL);
    mod.set_const("cv_INTERSECT_NONE", (force_enum_int<decltype(cv::INTERSECT_NONE)>::Type)cv::INTERSECT_NONE);
    mod.set_const("cv_INTERSECT_PARTIAL", (force_enum_int<decltype(cv::INTERSECT_PARTIAL)>::Type)cv::INTERSECT_PARTIAL);
    mod.set_const("cv_INTER_AREA", (force_enum_int<decltype(cv::INTER_AREA)>::Type)cv::INTER_AREA);
    mod.set_const("cv_INTER_BITS", (force_enum_int<decltype(cv::INTER_BITS)>::Type)cv::INTER_BITS);
    mod.set_const("cv_INTER_BITS2", (force_enum_int<decltype(cv::INTER_BITS2)>::Type)cv::INTER_BITS2);
    mod.set_const("cv_INTER_CUBIC", (force_enum_int<decltype(cv::INTER_CUBIC)>::Type)cv::INTER_CUBIC);
    mod.set_const("cv_INTER_LANCZOS4", (force_enum_int<decltype(cv::INTER_LANCZOS4)>::Type)cv::INTER_LANCZOS4);
    mod.set_const("cv_INTER_LINEAR", (force_enum_int<decltype(cv::INTER_LINEAR)>::Type)cv::INTER_LINEAR);
    mod.set_const("cv_INTER_LINEAR_EXACT", (force_enum_int<decltype(cv::INTER_LINEAR_EXACT)>::Type)cv::INTER_LINEAR_EXACT);
    mod.set_const("cv_INTER_MAX", (force_enum_int<decltype(cv::INTER_MAX)>::Type)cv::INTER_MAX);
    mod.set_const("cv_INTER_NEAREST", (force_enum_int<decltype(cv::INTER_NEAREST)>::Type)cv::INTER_NEAREST);
    mod.set_const("cv_INTER_TAB_SIZE", (force_enum_int<decltype(cv::INTER_TAB_SIZE)>::Type)cv::INTER_TAB_SIZE);
    mod.set_const("cv_INTER_TAB_SIZE2", (force_enum_int<decltype(cv::INTER_TAB_SIZE2)>::Type)cv::INTER_TAB_SIZE2);
    mod.set_const("cv_KMEANS_PP_CENTERS", (force_enum_int<decltype(cv::KMEANS_PP_CENTERS)>::Type)cv::KMEANS_PP_CENTERS);
    mod.set_const("cv_KMEANS_RANDOM_CENTERS", (force_enum_int<decltype(cv::KMEANS_RANDOM_CENTERS)>::Type)cv::KMEANS_RANDOM_CENTERS);
    mod.set_const("cv_KMEANS_USE_INITIAL_LABELS", (force_enum_int<decltype(cv::KMEANS_USE_INITIAL_LABELS)>::Type)cv::KMEANS_USE_INITIAL_LABELS);
    mod.set_const("cv_LINE_4", (force_enum_int<decltype(cv::LINE_4)>::Type)cv::LINE_4);
    mod.set_const("cv_LINE_8", (force_enum_int<decltype(cv::LINE_8)>::Type)cv::LINE_8);
    mod.set_const("cv_LINE_AA", (force_enum_int<decltype(cv::LINE_AA)>::Type)cv::LINE_AA);
    mod.set_const("cv_LSD_REFINE_ADV", (force_enum_int<decltype(cv::LSD_REFINE_ADV)>::Type)cv::LSD_REFINE_ADV);
    mod.set_const("cv_LSD_REFINE_NONE", (force_enum_int<decltype(cv::LSD_REFINE_NONE)>::Type)cv::LSD_REFINE_NONE);
    mod.set_const("cv_LSD_REFINE_STD", (force_enum_int<decltype(cv::LSD_REFINE_STD)>::Type)cv::LSD_REFINE_STD);
    mod.set_const("cv_MARKER_CROSS", (force_enum_int<decltype(cv::MARKER_CROSS)>::Type)cv::MARKER_CROSS);
    mod.set_const("cv_MARKER_DIAMOND", (force_enum_int<decltype(cv::MARKER_DIAMOND)>::Type)cv::MARKER_DIAMOND);
    mod.set_const("cv_MARKER_SQUARE", (force_enum_int<decltype(cv::MARKER_SQUARE)>::Type)cv::MARKER_SQUARE);
    mod.set_const("cv_MARKER_STAR", (force_enum_int<decltype(cv::MARKER_STAR)>::Type)cv::MARKER_STAR);
    mod.set_const("cv_MARKER_TILTED_CROSS", (force_enum_int<decltype(cv::MARKER_TILTED_CROSS)>::Type)cv::MARKER_TILTED_CROSS);
    mod.set_const("cv_MARKER_TRIANGLE_DOWN", (force_enum_int<decltype(cv::MARKER_TRIANGLE_DOWN)>::Type)cv::MARKER_TRIANGLE_DOWN);
    mod.set_const("cv_MARKER_TRIANGLE_UP", (force_enum_int<decltype(cv::MARKER_TRIANGLE_UP)>::Type)cv::MARKER_TRIANGLE_UP);
    mod.set_const("cv_MORPH_BLACKHAT", (force_enum_int<decltype(cv::MORPH_BLACKHAT)>::Type)cv::MORPH_BLACKHAT);
    mod.set_const("cv_MORPH_CLOSE", (force_enum_int<decltype(cv::MORPH_CLOSE)>::Type)cv::MORPH_CLOSE);
    mod.set_const("cv_MORPH_CROSS", (force_enum_int<decltype(cv::MORPH_CROSS)>::Type)cv::MORPH_CROSS);
    mod.set_const("cv_MORPH_DILATE", (force_enum_int<decltype(cv::MORPH_DILATE)>::Type)cv::MORPH_DILATE);
    mod.set_const("cv_MORPH_ELLIPSE", (force_enum_int<decltype(cv::MORPH_ELLIPSE)>::Type)cv::MORPH_ELLIPSE);
    mod.set_const("cv_MORPH_ERODE", (force_enum_int<decltype(cv::MORPH_ERODE)>::Type)cv::MORPH_ERODE);
    mod.set_const("cv_MORPH_GRADIENT", (force_enum_int<decltype(cv::MORPH_GRADIENT)>::Type)cv::MORPH_GRADIENT);
    mod.set_const("cv_MORPH_HITMISS", (force_enum_int<decltype(cv::MORPH_HITMISS)>::Type)cv::MORPH_HITMISS);
    mod.set_const("cv_MORPH_OPEN", (force_enum_int<decltype(cv::MORPH_OPEN)>::Type)cv::MORPH_OPEN);
    mod.set_const("cv_MORPH_RECT", (force_enum_int<decltype(cv::MORPH_RECT)>::Type)cv::MORPH_RECT);
    mod.set_const("cv_MORPH_TOPHAT", (force_enum_int<decltype(cv::MORPH_TOPHAT)>::Type)cv::MORPH_TOPHAT);
    mod.set_const("cv_NORM_HAMMING", (force_enum_int<decltype(cv::NORM_HAMMING)>::Type)cv::NORM_HAMMING);
    mod.set_const("cv_NORM_HAMMING2", (force_enum_int<decltype(cv::NORM_HAMMING2)>::Type)cv::NORM_HAMMING2);
    mod.set_const("cv_NORM_INF", (force_enum_int<decltype(cv::NORM_INF)>::Type)cv::NORM_INF);
    mod.set_const("cv_NORM_L1", (force_enum_int<decltype(cv::NORM_L1)>::Type)cv::NORM_L1);
    mod.set_const("cv_NORM_L2", (force_enum_int<decltype(cv::NORM_L2)>::Type)cv::NORM_L2);
    mod.set_const("cv_NORM_L2SQR", (force_enum_int<decltype(cv::NORM_L2SQR)>::Type)cv::NORM_L2SQR);
    mod.set_const("cv_NORM_MINMAX", (force_enum_int<decltype(cv::NORM_MINMAX)>::Type)cv::NORM_MINMAX);
    mod.set_const("cv_NORM_RELATIVE", (force_enum_int<decltype(cv::NORM_RELATIVE)>::Type)cv::NORM_RELATIVE);
    mod.set_const("cv_NORM_TYPE_MASK", (force_enum_int<decltype(cv::NORM_TYPE_MASK)>::Type)cv::NORM_TYPE_MASK);
    mod.set_const("cv_PCA_DATA_AS_COL", (force_enum_int<decltype(cv::PCA::DATA_AS_COL)>::Type)cv::PCA::DATA_AS_COL);
    mod.set_const("cv_PCA_DATA_AS_ROW", (force_enum_int<decltype(cv::PCA::DATA_AS_ROW)>::Type)cv::PCA::DATA_AS_ROW);
    mod.set_const("cv_PCA_USE_AVG", (force_enum_int<decltype(cv::PCA::USE_AVG)>::Type)cv::PCA::USE_AVG);
    mod.set_const("cv_Param_ALGORITHM", (force_enum_int<decltype(cv::Param::ALGORITHM)>::Type)cv::Param::ALGORITHM);
    mod.set_const("cv_PARAM_ALGORITHM", (force_enum_int<decltype(cv::Param::ALGORITHM)>::Type)cv::Param::ALGORITHM);
    mod.set_const("cv_Param_BOOLEAN", (force_enum_int<decltype(cv::Param::BOOLEAN)>::Type)cv::Param::BOOLEAN);
    mod.set_const("cv_PARAM_BOOLEAN", (force_enum_int<decltype(cv::Param::BOOLEAN)>::Type)cv::Param::BOOLEAN);
    mod.set_const("cv_Param_FLOAT", (force_enum_int<decltype(cv::Param::FLOAT)>::Type)cv::Param::FLOAT);
    mod.set_const("cv_PARAM_FLOAT", (force_enum_int<decltype(cv::Param::FLOAT)>::Type)cv::Param::FLOAT);
    mod.set_const("cv_Param_INT", (force_enum_int<decltype(cv::Param::INT)>::Type)cv::Param::INT);
    mod.set_const("cv_PARAM_INT", (force_enum_int<decltype(cv::Param::INT)>::Type)cv::Param::INT);
    mod.set_const("cv_Param_MAT", (force_enum_int<decltype(cv::Param::MAT)>::Type)cv::Param::MAT);
    mod.set_const("cv_PARAM_MAT", (force_enum_int<decltype(cv::Param::MAT)>::Type)cv::Param::MAT);
    mod.set_const("cv_Param_MAT_VECTOR", (force_enum_int<decltype(cv::Param::MAT_VECTOR)>::Type)cv::Param::MAT_VECTOR);
    mod.set_const("cv_PARAM_MAT_VECTOR", (force_enum_int<decltype(cv::Param::MAT_VECTOR)>::Type)cv::Param::MAT_VECTOR);
    mod.set_const("cv_Param_REAL", (force_enum_int<decltype(cv::Param::REAL)>::Type)cv::Param::REAL);
    mod.set_const("cv_PARAM_REAL", (force_enum_int<decltype(cv::Param::REAL)>::Type)cv::Param::REAL);
    mod.set_const("cv_Param_SCALAR", (force_enum_int<decltype(cv::Param::SCALAR)>::Type)cv::Param::SCALAR);
    mod.set_const("cv_PARAM_SCALAR", (force_enum_int<decltype(cv::Param::SCALAR)>::Type)cv::Param::SCALAR);
    mod.set_const("cv_Param_STRING", (force_enum_int<decltype(cv::Param::STRING)>::Type)cv::Param::STRING);
    mod.set_const("cv_PARAM_STRING", (force_enum_int<decltype(cv::Param::STRING)>::Type)cv::Param::STRING);
    mod.set_const("cv_Param_UCHAR", (force_enum_int<decltype(cv::Param::UCHAR)>::Type)cv::Param::UCHAR);
    mod.set_const("cv_PARAM_UCHAR", (force_enum_int<decltype(cv::Param::UCHAR)>::Type)cv::Param::UCHAR);
    mod.set_const("cv_Param_UINT64", (force_enum_int<decltype(cv::Param::UINT64)>::Type)cv::Param::UINT64);
    mod.set_const("cv_PARAM_UINT64", (force_enum_int<decltype(cv::Param::UINT64)>::Type)cv::Param::UINT64);
    mod.set_const("cv_Param_UNSIGNED_INT", (force_enum_int<decltype(cv::Param::UNSIGNED_INT)>::Type)cv::Param::UNSIGNED_INT);
    mod.set_const("cv_PARAM_UNSIGNED_INT", (force_enum_int<decltype(cv::Param::UNSIGNED_INT)>::Type)cv::Param::UNSIGNED_INT);
    mod.set_const("cv_QT_CHECKBOX", (force_enum_int<decltype(cv::QT_CHECKBOX)>::Type)cv::QT_CHECKBOX);
    mod.set_const("cv_QT_FONT_BLACK", (force_enum_int<decltype(cv::QT_FONT_BLACK)>::Type)cv::QT_FONT_BLACK);
    mod.set_const("cv_QT_FONT_BOLD", (force_enum_int<decltype(cv::QT_FONT_BOLD)>::Type)cv::QT_FONT_BOLD);
    mod.set_const("cv_QT_FONT_DEMIBOLD", (force_enum_int<decltype(cv::QT_FONT_DEMIBOLD)>::Type)cv::QT_FONT_DEMIBOLD);
    mod.set_const("cv_QT_FONT_LIGHT", (force_enum_int<decltype(cv::QT_FONT_LIGHT)>::Type)cv::QT_FONT_LIGHT);
    mod.set_const("cv_QT_FONT_NORMAL", (force_enum_int<decltype(cv::QT_FONT_NORMAL)>::Type)cv::QT_FONT_NORMAL);
    mod.set_const("cv_QT_NEW_BUTTONBAR", (force_enum_int<decltype(cv::QT_NEW_BUTTONBAR)>::Type)cv::QT_NEW_BUTTONBAR);
    mod.set_const("cv_QT_PUSH_BUTTON", (force_enum_int<decltype(cv::QT_PUSH_BUTTON)>::Type)cv::QT_PUSH_BUTTON);
    mod.set_const("cv_QT_RADIOBOX", (force_enum_int<decltype(cv::QT_RADIOBOX)>::Type)cv::QT_RADIOBOX);
    mod.set_const("cv_QT_STYLE_ITALIC", (force_enum_int<decltype(cv::QT_STYLE_ITALIC)>::Type)cv::QT_STYLE_ITALIC);
    mod.set_const("cv_QT_STYLE_NORMAL", (force_enum_int<decltype(cv::QT_STYLE_NORMAL)>::Type)cv::QT_STYLE_NORMAL);
    mod.set_const("cv_QT_STYLE_OBLIQUE", (force_enum_int<decltype(cv::QT_STYLE_OBLIQUE)>::Type)cv::QT_STYLE_OBLIQUE);
    mod.set_const("cv_REDUCE_AVG", (force_enum_int<decltype(cv::REDUCE_AVG)>::Type)cv::REDUCE_AVG);
    mod.set_const("cv_REDUCE_MAX", (force_enum_int<decltype(cv::REDUCE_MAX)>::Type)cv::REDUCE_MAX);
    mod.set_const("cv_REDUCE_MIN", (force_enum_int<decltype(cv::REDUCE_MIN)>::Type)cv::REDUCE_MIN);
    mod.set_const("cv_REDUCE_SUM", (force_enum_int<decltype(cv::REDUCE_SUM)>::Type)cv::REDUCE_SUM);
    mod.set_const("cv_RETR_CCOMP", (force_enum_int<decltype(cv::RETR_CCOMP)>::Type)cv::RETR_CCOMP);
    mod.set_const("cv_RETR_EXTERNAL", (force_enum_int<decltype(cv::RETR_EXTERNAL)>::Type)cv::RETR_EXTERNAL);
    mod.set_const("cv_RETR_FLOODFILL", (force_enum_int<decltype(cv::RETR_FLOODFILL)>::Type)cv::RETR_FLOODFILL);
    mod.set_const("cv_RETR_LIST", (force_enum_int<decltype(cv::RETR_LIST)>::Type)cv::RETR_LIST);
    mod.set_const("cv_RETR_TREE", (force_enum_int<decltype(cv::RETR_TREE)>::Type)cv::RETR_TREE);
    mod.set_const("cv_RNG_NORMAL", (force_enum_int<decltype(cv::RNG::NORMAL)>::Type)cv::RNG::NORMAL);
    mod.set_const("cv_RNG_UNIFORM", (force_enum_int<decltype(cv::RNG::UNIFORM)>::Type)cv::RNG::UNIFORM);
    mod.set_const("cv_ROTATE_180", (force_enum_int<decltype(cv::ROTATE_180)>::Type)cv::ROTATE_180);
    mod.set_const("cv_ROTATE_90_CLOCKWISE", (force_enum_int<decltype(cv::ROTATE_90_CLOCKWISE)>::Type)cv::ROTATE_90_CLOCKWISE);
    mod.set_const("cv_ROTATE_90_COUNTERCLOCKWISE", (force_enum_int<decltype(cv::ROTATE_90_COUNTERCLOCKWISE)>::Type)cv::ROTATE_90_COUNTERCLOCKWISE);
    mod.set_const("cv_SOLVELP_MULTI", (force_enum_int<decltype(cv::SOLVELP_MULTI)>::Type)cv::SOLVELP_MULTI);
    mod.set_const("cv_SOLVELP_SINGLE", (force_enum_int<decltype(cv::SOLVELP_SINGLE)>::Type)cv::SOLVELP_SINGLE);
    mod.set_const("cv_SOLVELP_UNBOUNDED", (force_enum_int<decltype(cv::SOLVELP_UNBOUNDED)>::Type)cv::SOLVELP_UNBOUNDED);
    mod.set_const("cv_SOLVELP_UNFEASIBLE", (force_enum_int<decltype(cv::SOLVELP_UNFEASIBLE)>::Type)cv::SOLVELP_UNFEASIBLE);
    mod.set_const("cv_SORT_ASCENDING", (force_enum_int<decltype(cv::SORT_ASCENDING)>::Type)cv::SORT_ASCENDING);
    mod.set_const("cv_SORT_DESCENDING", (force_enum_int<decltype(cv::SORT_DESCENDING)>::Type)cv::SORT_DESCENDING);
    mod.set_const("cv_SORT_EVERY_COLUMN", (force_enum_int<decltype(cv::SORT_EVERY_COLUMN)>::Type)cv::SORT_EVERY_COLUMN);
    mod.set_const("cv_SORT_EVERY_ROW", (force_enum_int<decltype(cv::SORT_EVERY_ROW)>::Type)cv::SORT_EVERY_ROW);
    mod.set_const("cv_SVD_FULL_UV", (force_enum_int<decltype(cv::SVD::FULL_UV)>::Type)cv::SVD::FULL_UV);
    mod.set_const("cv_SVD_MODIFY_A", (force_enum_int<decltype(cv::SVD::MODIFY_A)>::Type)cv::SVD::MODIFY_A);
    mod.set_const("cv_SVD_NO_UV", (force_enum_int<decltype(cv::SVD::NO_UV)>::Type)cv::SVD::NO_UV);
    mod.set_const("cv_Subdiv2D_NEXT_AROUND_DST", (force_enum_int<decltype(cv::Subdiv2D::NEXT_AROUND_DST)>::Type)cv::Subdiv2D::NEXT_AROUND_DST);
    mod.set_const("cv_SUBDIV2D_NEXT_AROUND_DST", (force_enum_int<decltype(cv::Subdiv2D::NEXT_AROUND_DST)>::Type)cv::Subdiv2D::NEXT_AROUND_DST);
    mod.set_const("cv_Subdiv2D_NEXT_AROUND_LEFT", (force_enum_int<decltype(cv::Subdiv2D::NEXT_AROUND_LEFT)>::Type)cv::Subdiv2D::NEXT_AROUND_LEFT);
    mod.set_const("cv_SUBDIV2D_NEXT_AROUND_LEFT", (force_enum_int<decltype(cv::Subdiv2D::NEXT_AROUND_LEFT)>::Type)cv::Subdiv2D::NEXT_AROUND_LEFT);
    mod.set_const("cv_Subdiv2D_NEXT_AROUND_ORG", (force_enum_int<decltype(cv::Subdiv2D::NEXT_AROUND_ORG)>::Type)cv::Subdiv2D::NEXT_AROUND_ORG);
    mod.set_const("cv_SUBDIV2D_NEXT_AROUND_ORG", (force_enum_int<decltype(cv::Subdiv2D::NEXT_AROUND_ORG)>::Type)cv::Subdiv2D::NEXT_AROUND_ORG);
    mod.set_const("cv_Subdiv2D_NEXT_AROUND_RIGHT", (force_enum_int<decltype(cv::Subdiv2D::NEXT_AROUND_RIGHT)>::Type)cv::Subdiv2D::NEXT_AROUND_RIGHT);
    mod.set_const("cv_SUBDIV2D_NEXT_AROUND_RIGHT", (force_enum_int<decltype(cv::Subdiv2D::NEXT_AROUND_RIGHT)>::Type)cv::Subdiv2D::NEXT_AROUND_RIGHT);
    mod.set_const("cv_Subdiv2D_PREV_AROUND_DST", (force_enum_int<decltype(cv::Subdiv2D::PREV_AROUND_DST)>::Type)cv::Subdiv2D::PREV_AROUND_DST);
    mod.set_const("cv_SUBDIV2D_PREV_AROUND_DST", (force_enum_int<decltype(cv::Subdiv2D::PREV_AROUND_DST)>::Type)cv::Subdiv2D::PREV_AROUND_DST);
    mod.set_const("cv_Subdiv2D_PREV_AROUND_LEFT", (force_enum_int<decltype(cv::Subdiv2D::PREV_AROUND_LEFT)>::Type)cv::Subdiv2D::PREV_AROUND_LEFT);
    mod.set_const("cv_SUBDIV2D_PREV_AROUND_LEFT", (force_enum_int<decltype(cv::Subdiv2D::PREV_AROUND_LEFT)>::Type)cv::Subdiv2D::PREV_AROUND_LEFT);
    mod.set_const("cv_Subdiv2D_PREV_AROUND_ORG", (force_enum_int<decltype(cv::Subdiv2D::PREV_AROUND_ORG)>::Type)cv::Subdiv2D::PREV_AROUND_ORG);
    mod.set_const("cv_SUBDIV2D_PREV_AROUND_ORG", (force_enum_int<decltype(cv::Subdiv2D::PREV_AROUND_ORG)>::Type)cv::Subdiv2D::PREV_AROUND_ORG);
    mod.set_const("cv_Subdiv2D_PREV_AROUND_RIGHT", (force_enum_int<decltype(cv::Subdiv2D::PREV_AROUND_RIGHT)>::Type)cv::Subdiv2D::PREV_AROUND_RIGHT);
    mod.set_const("cv_SUBDIV2D_PREV_AROUND_RIGHT", (force_enum_int<decltype(cv::Subdiv2D::PREV_AROUND_RIGHT)>::Type)cv::Subdiv2D::PREV_AROUND_RIGHT);
    mod.set_const("cv_Subdiv2D_PTLOC_ERROR", (force_enum_int<decltype(cv::Subdiv2D::PTLOC_ERROR)>::Type)cv::Subdiv2D::PTLOC_ERROR);
    mod.set_const("cv_SUBDIV2D_PTLOC_ERROR", (force_enum_int<decltype(cv::Subdiv2D::PTLOC_ERROR)>::Type)cv::Subdiv2D::PTLOC_ERROR);
    mod.set_const("cv_Subdiv2D_PTLOC_INSIDE", (force_enum_int<decltype(cv::Subdiv2D::PTLOC_INSIDE)>::Type)cv::Subdiv2D::PTLOC_INSIDE);
    mod.set_const("cv_SUBDIV2D_PTLOC_INSIDE", (force_enum_int<decltype(cv::Subdiv2D::PTLOC_INSIDE)>::Type)cv::Subdiv2D::PTLOC_INSIDE);
    mod.set_const("cv_Subdiv2D_PTLOC_ON_EDGE", (force_enum_int<decltype(cv::Subdiv2D::PTLOC_ON_EDGE)>::Type)cv::Subdiv2D::PTLOC_ON_EDGE);
    mod.set_const("cv_SUBDIV2D_PTLOC_ON_EDGE", (force_enum_int<decltype(cv::Subdiv2D::PTLOC_ON_EDGE)>::Type)cv::Subdiv2D::PTLOC_ON_EDGE);
    mod.set_const("cv_Subdiv2D_PTLOC_OUTSIDE_RECT", (force_enum_int<decltype(cv::Subdiv2D::PTLOC_OUTSIDE_RECT)>::Type)cv::Subdiv2D::PTLOC_OUTSIDE_RECT);
    mod.set_const("cv_SUBDIV2D_PTLOC_OUTSIDE_RECT", (force_enum_int<decltype(cv::Subdiv2D::PTLOC_OUTSIDE_RECT)>::Type)cv::Subdiv2D::PTLOC_OUTSIDE_RECT);
    mod.set_const("cv_Subdiv2D_PTLOC_VERTEX", (force_enum_int<decltype(cv::Subdiv2D::PTLOC_VERTEX)>::Type)cv::Subdiv2D::PTLOC_VERTEX);
    mod.set_const("cv_SUBDIV2D_PTLOC_VERTEX", (force_enum_int<decltype(cv::Subdiv2D::PTLOC_VERTEX)>::Type)cv::Subdiv2D::PTLOC_VERTEX);
    mod.set_const("cv_THRESH_BINARY", (force_enum_int<decltype(cv::THRESH_BINARY)>::Type)cv::THRESH_BINARY);
    mod.set_const("cv_THRESH_BINARY_INV", (force_enum_int<decltype(cv::THRESH_BINARY_INV)>::Type)cv::THRESH_BINARY_INV);
    mod.set_const("cv_THRESH_MASK", (force_enum_int<decltype(cv::THRESH_MASK)>::Type)cv::THRESH_MASK);
    mod.set_const("cv_THRESH_OTSU", (force_enum_int<decltype(cv::THRESH_OTSU)>::Type)cv::THRESH_OTSU);
    mod.set_const("cv_THRESH_TOZERO", (force_enum_int<decltype(cv::THRESH_TOZERO)>::Type)cv::THRESH_TOZERO);
    mod.set_const("cv_THRESH_TOZERO_INV", (force_enum_int<decltype(cv::THRESH_TOZERO_INV)>::Type)cv::THRESH_TOZERO_INV);
    mod.set_const("cv_THRESH_TRIANGLE", (force_enum_int<decltype(cv::THRESH_TRIANGLE)>::Type)cv::THRESH_TRIANGLE);
    mod.set_const("cv_THRESH_TRUNC", (force_enum_int<decltype(cv::THRESH_TRUNC)>::Type)cv::THRESH_TRUNC);
    mod.set_const("cv_TM_CCOEFF", (force_enum_int<decltype(cv::TM_CCOEFF)>::Type)cv::TM_CCOEFF);
    mod.set_const("cv_TM_CCOEFF_NORMED", (force_enum_int<decltype(cv::TM_CCOEFF_NORMED)>::Type)cv::TM_CCOEFF_NORMED);
    mod.set_const("cv_TM_CCORR", (force_enum_int<decltype(cv::TM_CCORR)>::Type)cv::TM_CCORR);
    mod.set_const("cv_TM_CCORR_NORMED", (force_enum_int<decltype(cv::TM_CCORR_NORMED)>::Type)cv::TM_CCORR_NORMED);
    mod.set_const("cv_TM_SQDIFF", (force_enum_int<decltype(cv::TM_SQDIFF)>::Type)cv::TM_SQDIFF);
    mod.set_const("cv_TM_SQDIFF_NORMED", (force_enum_int<decltype(cv::TM_SQDIFF_NORMED)>::Type)cv::TM_SQDIFF_NORMED);
    mod.set_const("cv_TermCriteria_COUNT", (force_enum_int<decltype(cv::TermCriteria::COUNT)>::Type)cv::TermCriteria::COUNT);
    mod.set_const("cv_TERM_CRITERIA_COUNT", (force_enum_int<decltype(cv::TermCriteria::COUNT)>::Type)cv::TermCriteria::COUNT);
    mod.set_const("cv_TermCriteria_EPS", (force_enum_int<decltype(cv::TermCriteria::EPS)>::Type)cv::TermCriteria::EPS);
    mod.set_const("cv_TERM_CRITERIA_EPS", (force_enum_int<decltype(cv::TermCriteria::EPS)>::Type)cv::TermCriteria::EPS);
    mod.set_const("cv_TermCriteria_MAX_ITER", (force_enum_int<decltype(cv::TermCriteria::MAX_ITER)>::Type)cv::TermCriteria::MAX_ITER);
    mod.set_const("cv_TERM_CRITERIA_MAX_ITER", (force_enum_int<decltype(cv::TermCriteria::MAX_ITER)>::Type)cv::TermCriteria::MAX_ITER);
    mod.set_const("cv_VIDEOWRITER_PROP_FRAMEBYTES", (force_enum_int<decltype(cv::VIDEOWRITER_PROP_FRAMEBYTES)>::Type)cv::VIDEOWRITER_PROP_FRAMEBYTES);
    mod.set_const("cv_VIDEOWRITER_PROP_IS_COLOR", (force_enum_int<decltype(cv::VIDEOWRITER_PROP_IS_COLOR)>::Type)cv::VIDEOWRITER_PROP_IS_COLOR);
    mod.set_const("cv_VIDEOWRITER_PROP_NSTRIPES", (force_enum_int<decltype(cv::VIDEOWRITER_PROP_NSTRIPES)>::Type)cv::VIDEOWRITER_PROP_NSTRIPES);
    mod.set_const("cv_VIDEOWRITER_PROP_QUALITY", (force_enum_int<decltype(cv::VIDEOWRITER_PROP_QUALITY)>::Type)cv::VIDEOWRITER_PROP_QUALITY);
    mod.set_const("cv_WARP_FILL_OUTLIERS", (force_enum_int<decltype(cv::WARP_FILL_OUTLIERS)>::Type)cv::WARP_FILL_OUTLIERS);
    mod.set_const("cv_WARP_INVERSE_MAP", (force_enum_int<decltype(cv::WARP_INVERSE_MAP)>::Type)cv::WARP_INVERSE_MAP);
    mod.set_const("cv_WARP_POLAR_LINEAR", (force_enum_int<decltype(cv::WARP_POLAR_LINEAR)>::Type)cv::WARP_POLAR_LINEAR);
    mod.set_const("cv_WARP_POLAR_LOG", (force_enum_int<decltype(cv::WARP_POLAR_LOG)>::Type)cv::WARP_POLAR_LOG);
    mod.set_const("cv_WINDOW_AUTOSIZE", (force_enum_int<decltype(cv::WINDOW_AUTOSIZE)>::Type)cv::WINDOW_AUTOSIZE);
    mod.set_const("cv_WINDOW_FREERATIO", (force_enum_int<decltype(cv::WINDOW_FREERATIO)>::Type)cv::WINDOW_FREERATIO);
    mod.set_const("cv_WINDOW_FULLSCREEN", (force_enum_int<decltype(cv::WINDOW_FULLSCREEN)>::Type)cv::WINDOW_FULLSCREEN);
    mod.set_const("cv_WINDOW_GUI_EXPANDED", (force_enum_int<decltype(cv::WINDOW_GUI_EXPANDED)>::Type)cv::WINDOW_GUI_EXPANDED);
    mod.set_const("cv_WINDOW_GUI_NORMAL", (force_enum_int<decltype(cv::WINDOW_GUI_NORMAL)>::Type)cv::WINDOW_GUI_NORMAL);
    mod.set_const("cv_WINDOW_KEEPRATIO", (force_enum_int<decltype(cv::WINDOW_KEEPRATIO)>::Type)cv::WINDOW_KEEPRATIO);
    mod.set_const("cv_WINDOW_NORMAL", (force_enum_int<decltype(cv::WINDOW_NORMAL)>::Type)cv::WINDOW_NORMAL);
    mod.set_const("cv_WINDOW_OPENGL", (force_enum_int<decltype(cv::WINDOW_OPENGL)>::Type)cv::WINDOW_OPENGL);
    mod.set_const("cv_WND_PROP_ASPECT_RATIO", (force_enum_int<decltype(cv::WND_PROP_ASPECT_RATIO)>::Type)cv::WND_PROP_ASPECT_RATIO);
    mod.set_const("cv_WND_PROP_AUTOSIZE", (force_enum_int<decltype(cv::WND_PROP_AUTOSIZE)>::Type)cv::WND_PROP_AUTOSIZE);
    mod.set_const("cv_WND_PROP_FULLSCREEN", (force_enum_int<decltype(cv::WND_PROP_FULLSCREEN)>::Type)cv::WND_PROP_FULLSCREEN);
    mod.set_const("cv_WND_PROP_OPENGL", (force_enum_int<decltype(cv::WND_PROP_OPENGL)>::Type)cv::WND_PROP_OPENGL);
    mod.set_const("cv_WND_PROP_TOPMOST", (force_enum_int<decltype(cv::WND_PROP_TOPMOST)>::Type)cv::WND_PROP_TOPMOST);
    mod.set_const("cv_WND_PROP_VISIBLE", (force_enum_int<decltype(cv::WND_PROP_VISIBLE)>::Type)cv::WND_PROP_VISIBLE);
    mod.set_const("cv_Error_BadAlign", (force_enum_int<decltype(cv::Error::BadAlign)>::Type)cv::Error::BadAlign);
    mod.set_const("cv_Error_BAD_ALIGN", (force_enum_int<decltype(cv::Error::BadAlign)>::Type)cv::Error::BadAlign);
    mod.set_const("cv_Error_BadAlphaChannel", (force_enum_int<decltype(cv::Error::BadAlphaChannel)>::Type)cv::Error::BadAlphaChannel);
    mod.set_const("cv_Error_BAD_ALPHA_CHANNEL", (force_enum_int<decltype(cv::Error::BadAlphaChannel)>::Type)cv::Error::BadAlphaChannel);
    mod.set_const("cv_Error_BadCOI", (force_enum_int<decltype(cv::Error::BadCOI)>::Type)cv::Error::BadCOI);
    mod.set_const("cv_Error_BAD_COI", (force_enum_int<decltype(cv::Error::BadCOI)>::Type)cv::Error::BadCOI);
    mod.set_const("cv_Error_BadCallBack", (force_enum_int<decltype(cv::Error::BadCallBack)>::Type)cv::Error::BadCallBack);
    mod.set_const("cv_Error_BAD_CALL_BACK", (force_enum_int<decltype(cv::Error::BadCallBack)>::Type)cv::Error::BadCallBack);
    mod.set_const("cv_Error_BadDataPtr", (force_enum_int<decltype(cv::Error::BadDataPtr)>::Type)cv::Error::BadDataPtr);
    mod.set_const("cv_Error_BAD_DATA_PTR", (force_enum_int<decltype(cv::Error::BadDataPtr)>::Type)cv::Error::BadDataPtr);
    mod.set_const("cv_Error_BadDepth", (force_enum_int<decltype(cv::Error::BadDepth)>::Type)cv::Error::BadDepth);
    mod.set_const("cv_Error_BAD_DEPTH", (force_enum_int<decltype(cv::Error::BadDepth)>::Type)cv::Error::BadDepth);
    mod.set_const("cv_Error_BadImageSize", (force_enum_int<decltype(cv::Error::BadImageSize)>::Type)cv::Error::BadImageSize);
    mod.set_const("cv_Error_BAD_IMAGE_SIZE", (force_enum_int<decltype(cv::Error::BadImageSize)>::Type)cv::Error::BadImageSize);
    mod.set_const("cv_Error_BadModelOrChSeq", (force_enum_int<decltype(cv::Error::BadModelOrChSeq)>::Type)cv::Error::BadModelOrChSeq);
    mod.set_const("cv_Error_BAD_MODEL_OR_CH_SEQ", (force_enum_int<decltype(cv::Error::BadModelOrChSeq)>::Type)cv::Error::BadModelOrChSeq);
    mod.set_const("cv_Error_BadNumChannel1U", (force_enum_int<decltype(cv::Error::BadNumChannel1U)>::Type)cv::Error::BadNumChannel1U);
    mod.set_const("cv_Error_BAD_NUM_CHANNEL1U", (force_enum_int<decltype(cv::Error::BadNumChannel1U)>::Type)cv::Error::BadNumChannel1U);
    mod.set_const("cv_Error_BadNumChannels", (force_enum_int<decltype(cv::Error::BadNumChannels)>::Type)cv::Error::BadNumChannels);
    mod.set_const("cv_Error_BAD_NUM_CHANNELS", (force_enum_int<decltype(cv::Error::BadNumChannels)>::Type)cv::Error::BadNumChannels);
    mod.set_const("cv_Error_BadOffset", (force_enum_int<decltype(cv::Error::BadOffset)>::Type)cv::Error::BadOffset);
    mod.set_const("cv_Error_BAD_OFFSET", (force_enum_int<decltype(cv::Error::BadOffset)>::Type)cv::Error::BadOffset);
    mod.set_const("cv_Error_BadOrder", (force_enum_int<decltype(cv::Error::BadOrder)>::Type)cv::Error::BadOrder);
    mod.set_const("cv_Error_BAD_ORDER", (force_enum_int<decltype(cv::Error::BadOrder)>::Type)cv::Error::BadOrder);
    mod.set_const("cv_Error_BadOrigin", (force_enum_int<decltype(cv::Error::BadOrigin)>::Type)cv::Error::BadOrigin);
    mod.set_const("cv_Error_BAD_ORIGIN", (force_enum_int<decltype(cv::Error::BadOrigin)>::Type)cv::Error::BadOrigin);
    mod.set_const("cv_Error_BadROISize", (force_enum_int<decltype(cv::Error::BadROISize)>::Type)cv::Error::BadROISize);
    mod.set_const("cv_Error_BAD_ROISIZE", (force_enum_int<decltype(cv::Error::BadROISize)>::Type)cv::Error::BadROISize);
    mod.set_const("cv_Error_BadStep", (force_enum_int<decltype(cv::Error::BadStep)>::Type)cv::Error::BadStep);
    mod.set_const("cv_Error_BAD_STEP", (force_enum_int<decltype(cv::Error::BadStep)>::Type)cv::Error::BadStep);
    mod.set_const("cv_Error_BadTileSize", (force_enum_int<decltype(cv::Error::BadTileSize)>::Type)cv::Error::BadTileSize);
    mod.set_const("cv_Error_BAD_TILE_SIZE", (force_enum_int<decltype(cv::Error::BadTileSize)>::Type)cv::Error::BadTileSize);
    mod.set_const("cv_Error_GpuApiCallError", (force_enum_int<decltype(cv::Error::GpuApiCallError)>::Type)cv::Error::GpuApiCallError);
    mod.set_const("cv_Error_GPU_API_CALL_ERROR", (force_enum_int<decltype(cv::Error::GpuApiCallError)>::Type)cv::Error::GpuApiCallError);
    mod.set_const("cv_Error_GpuNotSupported", (force_enum_int<decltype(cv::Error::GpuNotSupported)>::Type)cv::Error::GpuNotSupported);
    mod.set_const("cv_Error_GPU_NOT_SUPPORTED", (force_enum_int<decltype(cv::Error::GpuNotSupported)>::Type)cv::Error::GpuNotSupported);
    mod.set_const("cv_Error_HeaderIsNull", (force_enum_int<decltype(cv::Error::HeaderIsNull)>::Type)cv::Error::HeaderIsNull);
    mod.set_const("cv_Error_HEADER_IS_NULL", (force_enum_int<decltype(cv::Error::HeaderIsNull)>::Type)cv::Error::HeaderIsNull);
    mod.set_const("cv_Error_MaskIsTiled", (force_enum_int<decltype(cv::Error::MaskIsTiled)>::Type)cv::Error::MaskIsTiled);
    mod.set_const("cv_Error_MASK_IS_TILED", (force_enum_int<decltype(cv::Error::MaskIsTiled)>::Type)cv::Error::MaskIsTiled);
    mod.set_const("cv_Error_OpenCLApiCallError", (force_enum_int<decltype(cv::Error::OpenCLApiCallError)>::Type)cv::Error::OpenCLApiCallError);
    mod.set_const("cv_Error_OPEN_CLAPI_CALL_ERROR", (force_enum_int<decltype(cv::Error::OpenCLApiCallError)>::Type)cv::Error::OpenCLApiCallError);
    mod.set_const("cv_Error_OpenCLDoubleNotSupported", (force_enum_int<decltype(cv::Error::OpenCLDoubleNotSupported)>::Type)cv::Error::OpenCLDoubleNotSupported);
    mod.set_const("cv_Error_OPEN_CLDOUBLE_NOT_SUPPORTED", (force_enum_int<decltype(cv::Error::OpenCLDoubleNotSupported)>::Type)cv::Error::OpenCLDoubleNotSupported);
    mod.set_const("cv_Error_OpenCLInitError", (force_enum_int<decltype(cv::Error::OpenCLInitError)>::Type)cv::Error::OpenCLInitError);
    mod.set_const("cv_Error_OPEN_CLINIT_ERROR", (force_enum_int<decltype(cv::Error::OpenCLInitError)>::Type)cv::Error::OpenCLInitError);
    mod.set_const("cv_Error_OpenCLNoAMDBlasFft", (force_enum_int<decltype(cv::Error::OpenCLNoAMDBlasFft)>::Type)cv::Error::OpenCLNoAMDBlasFft);
    mod.set_const("cv_Error_OPEN_CLNO_AMDBLAS_FFT", (force_enum_int<decltype(cv::Error::OpenCLNoAMDBlasFft)>::Type)cv::Error::OpenCLNoAMDBlasFft);
    mod.set_const("cv_Error_OpenGlApiCallError", (force_enum_int<decltype(cv::Error::OpenGlApiCallError)>::Type)cv::Error::OpenGlApiCallError);
    mod.set_const("cv_Error_OPEN_GL_API_CALL_ERROR", (force_enum_int<decltype(cv::Error::OpenGlApiCallError)>::Type)cv::Error::OpenGlApiCallError);
    mod.set_const("cv_Error_OpenGlNotSupported", (force_enum_int<decltype(cv::Error::OpenGlNotSupported)>::Type)cv::Error::OpenGlNotSupported);
    mod.set_const("cv_Error_OPEN_GL_NOT_SUPPORTED", (force_enum_int<decltype(cv::Error::OpenGlNotSupported)>::Type)cv::Error::OpenGlNotSupported);
    mod.set_const("cv_Error_StsAssert", (force_enum_int<decltype(cv::Error::StsAssert)>::Type)cv::Error::StsAssert);
    mod.set_const("cv_Error_STS_ASSERT", (force_enum_int<decltype(cv::Error::StsAssert)>::Type)cv::Error::StsAssert);
    mod.set_const("cv_Error_StsAutoTrace", (force_enum_int<decltype(cv::Error::StsAutoTrace)>::Type)cv::Error::StsAutoTrace);
    mod.set_const("cv_Error_STS_AUTO_TRACE", (force_enum_int<decltype(cv::Error::StsAutoTrace)>::Type)cv::Error::StsAutoTrace);
    mod.set_const("cv_Error_StsBackTrace", (force_enum_int<decltype(cv::Error::StsBackTrace)>::Type)cv::Error::StsBackTrace);
    mod.set_const("cv_Error_STS_BACK_TRACE", (force_enum_int<decltype(cv::Error::StsBackTrace)>::Type)cv::Error::StsBackTrace);
    mod.set_const("cv_Error_StsBadArg", (force_enum_int<decltype(cv::Error::StsBadArg)>::Type)cv::Error::StsBadArg);
    mod.set_const("cv_Error_STS_BAD_ARG", (force_enum_int<decltype(cv::Error::StsBadArg)>::Type)cv::Error::StsBadArg);
    mod.set_const("cv_Error_StsBadFlag", (force_enum_int<decltype(cv::Error::StsBadFlag)>::Type)cv::Error::StsBadFlag);
    mod.set_const("cv_Error_STS_BAD_FLAG", (force_enum_int<decltype(cv::Error::StsBadFlag)>::Type)cv::Error::StsBadFlag);
    mod.set_const("cv_Error_StsBadFunc", (force_enum_int<decltype(cv::Error::StsBadFunc)>::Type)cv::Error::StsBadFunc);
    mod.set_const("cv_Error_STS_BAD_FUNC", (force_enum_int<decltype(cv::Error::StsBadFunc)>::Type)cv::Error::StsBadFunc);
    mod.set_const("cv_Error_StsBadMask", (force_enum_int<decltype(cv::Error::StsBadMask)>::Type)cv::Error::StsBadMask);
    mod.set_const("cv_Error_STS_BAD_MASK", (force_enum_int<decltype(cv::Error::StsBadMask)>::Type)cv::Error::StsBadMask);
    mod.set_const("cv_Error_StsBadMemBlock", (force_enum_int<decltype(cv::Error::StsBadMemBlock)>::Type)cv::Error::StsBadMemBlock);
    mod.set_const("cv_Error_STS_BAD_MEM_BLOCK", (force_enum_int<decltype(cv::Error::StsBadMemBlock)>::Type)cv::Error::StsBadMemBlock);
    mod.set_const("cv_Error_StsBadPoint", (force_enum_int<decltype(cv::Error::StsBadPoint)>::Type)cv::Error::StsBadPoint);
    mod.set_const("cv_Error_STS_BAD_POINT", (force_enum_int<decltype(cv::Error::StsBadPoint)>::Type)cv::Error::StsBadPoint);
    mod.set_const("cv_Error_StsBadSize", (force_enum_int<decltype(cv::Error::StsBadSize)>::Type)cv::Error::StsBadSize);
    mod.set_const("cv_Error_STS_BAD_SIZE", (force_enum_int<decltype(cv::Error::StsBadSize)>::Type)cv::Error::StsBadSize);
    mod.set_const("cv_Error_StsDivByZero", (force_enum_int<decltype(cv::Error::StsDivByZero)>::Type)cv::Error::StsDivByZero);
    mod.set_const("cv_Error_STS_DIV_BY_ZERO", (force_enum_int<decltype(cv::Error::StsDivByZero)>::Type)cv::Error::StsDivByZero);
    mod.set_const("cv_Error_StsError", (force_enum_int<decltype(cv::Error::StsError)>::Type)cv::Error::StsError);
    mod.set_const("cv_Error_STS_ERROR", (force_enum_int<decltype(cv::Error::StsError)>::Type)cv::Error::StsError);
    mod.set_const("cv_Error_StsFilterOffsetErr", (force_enum_int<decltype(cv::Error::StsFilterOffsetErr)>::Type)cv::Error::StsFilterOffsetErr);
    mod.set_const("cv_Error_STS_FILTER_OFFSET_ERR", (force_enum_int<decltype(cv::Error::StsFilterOffsetErr)>::Type)cv::Error::StsFilterOffsetErr);
    mod.set_const("cv_Error_StsFilterStructContentErr", (force_enum_int<decltype(cv::Error::StsFilterStructContentErr)>::Type)cv::Error::StsFilterStructContentErr);
    mod.set_const("cv_Error_STS_FILTER_STRUCT_CONTENT_ERR", (force_enum_int<decltype(cv::Error::StsFilterStructContentErr)>::Type)cv::Error::StsFilterStructContentErr);
    mod.set_const("cv_Error_StsInplaceNotSupported", (force_enum_int<decltype(cv::Error::StsInplaceNotSupported)>::Type)cv::Error::StsInplaceNotSupported);
    mod.set_const("cv_Error_STS_INPLACE_NOT_SUPPORTED", (force_enum_int<decltype(cv::Error::StsInplaceNotSupported)>::Type)cv::Error::StsInplaceNotSupported);
    mod.set_const("cv_Error_StsInternal", (force_enum_int<decltype(cv::Error::StsInternal)>::Type)cv::Error::StsInternal);
    mod.set_const("cv_Error_STS_INTERNAL", (force_enum_int<decltype(cv::Error::StsInternal)>::Type)cv::Error::StsInternal);
    mod.set_const("cv_Error_StsKernelStructContentErr", (force_enum_int<decltype(cv::Error::StsKernelStructContentErr)>::Type)cv::Error::StsKernelStructContentErr);
    mod.set_const("cv_Error_STS_KERNEL_STRUCT_CONTENT_ERR", (force_enum_int<decltype(cv::Error::StsKernelStructContentErr)>::Type)cv::Error::StsKernelStructContentErr);
    mod.set_const("cv_Error_StsNoConv", (force_enum_int<decltype(cv::Error::StsNoConv)>::Type)cv::Error::StsNoConv);
    mod.set_const("cv_Error_STS_NO_CONV", (force_enum_int<decltype(cv::Error::StsNoConv)>::Type)cv::Error::StsNoConv);
    mod.set_const("cv_Error_StsNoMem", (force_enum_int<decltype(cv::Error::StsNoMem)>::Type)cv::Error::StsNoMem);
    mod.set_const("cv_Error_STS_NO_MEM", (force_enum_int<decltype(cv::Error::StsNoMem)>::Type)cv::Error::StsNoMem);
    mod.set_const("cv_Error_StsNotImplemented", (force_enum_int<decltype(cv::Error::StsNotImplemented)>::Type)cv::Error::StsNotImplemented);
    mod.set_const("cv_Error_STS_NOT_IMPLEMENTED", (force_enum_int<decltype(cv::Error::StsNotImplemented)>::Type)cv::Error::StsNotImplemented);
    mod.set_const("cv_Error_StsNullPtr", (force_enum_int<decltype(cv::Error::StsNullPtr)>::Type)cv::Error::StsNullPtr);
    mod.set_const("cv_Error_STS_NULL_PTR", (force_enum_int<decltype(cv::Error::StsNullPtr)>::Type)cv::Error::StsNullPtr);
    mod.set_const("cv_Error_StsObjectNotFound", (force_enum_int<decltype(cv::Error::StsObjectNotFound)>::Type)cv::Error::StsObjectNotFound);
    mod.set_const("cv_Error_STS_OBJECT_NOT_FOUND", (force_enum_int<decltype(cv::Error::StsObjectNotFound)>::Type)cv::Error::StsObjectNotFound);
    mod.set_const("cv_Error_StsOk", (force_enum_int<decltype(cv::Error::StsOk)>::Type)cv::Error::StsOk);
    mod.set_const("cv_Error_STS_OK", (force_enum_int<decltype(cv::Error::StsOk)>::Type)cv::Error::StsOk);
    mod.set_const("cv_Error_StsOutOfRange", (force_enum_int<decltype(cv::Error::StsOutOfRange)>::Type)cv::Error::StsOutOfRange);
    mod.set_const("cv_Error_STS_OUT_OF_RANGE", (force_enum_int<decltype(cv::Error::StsOutOfRange)>::Type)cv::Error::StsOutOfRange);
    mod.set_const("cv_Error_StsParseError", (force_enum_int<decltype(cv::Error::StsParseError)>::Type)cv::Error::StsParseError);
    mod.set_const("cv_Error_STS_PARSE_ERROR", (force_enum_int<decltype(cv::Error::StsParseError)>::Type)cv::Error::StsParseError);
    mod.set_const("cv_Error_StsUnmatchedFormats", (force_enum_int<decltype(cv::Error::StsUnmatchedFormats)>::Type)cv::Error::StsUnmatchedFormats);
    mod.set_const("cv_Error_STS_UNMATCHED_FORMATS", (force_enum_int<decltype(cv::Error::StsUnmatchedFormats)>::Type)cv::Error::StsUnmatchedFormats);
    mod.set_const("cv_Error_StsUnmatchedSizes", (force_enum_int<decltype(cv::Error::StsUnmatchedSizes)>::Type)cv::Error::StsUnmatchedSizes);
    mod.set_const("cv_Error_STS_UNMATCHED_SIZES", (force_enum_int<decltype(cv::Error::StsUnmatchedSizes)>::Type)cv::Error::StsUnmatchedSizes);
    mod.set_const("cv_Error_StsUnsupportedFormat", (force_enum_int<decltype(cv::Error::StsUnsupportedFormat)>::Type)cv::Error::StsUnsupportedFormat);
    mod.set_const("cv_Error_STS_UNSUPPORTED_FORMAT", (force_enum_int<decltype(cv::Error::StsUnsupportedFormat)>::Type)cv::Error::StsUnsupportedFormat);
    mod.set_const("cv_Error_StsVecLengthErr", (force_enum_int<decltype(cv::Error::StsVecLengthErr)>::Type)cv::Error::StsVecLengthErr);
    mod.set_const("cv_Error_STS_VEC_LENGTH_ERR", (force_enum_int<decltype(cv::Error::StsVecLengthErr)>::Type)cv::Error::StsVecLengthErr);

    mod.method("jlopencv_cv_ipp_cv_ipp_useIPP",  []() { auto retval = cv::ipp::useIPP(); return retval;});
    mod.method("jlopencv_cv_ipp_cv_ipp_setUseIPP",  [](bool flag) { cv::ipp::setUseIPP(flag); ;});
    mod.method("jlopencv_cv_ipp_cv_ipp_getIppVersion",  []() { auto retval = cv::ipp::getIppVersion(); return retval;});
    mod.method("jlopencv_cv_ipp_cv_ipp_useIPP_NotExact",  []() { auto retval = cv::ipp::useIPP_NotExact(); return retval;});
    mod.method("jlopencv_cv_ipp_cv_ipp_setUseIPP_NotExact",  [](bool flag) { cv::ipp::setUseIPP_NotExact(flag); ;});
    mod.method("jlopencv_cv_utils_cv_utils_dumpInputArray",  [](Mat& argument) { auto retval = cv::utils::dumpInputArray(argument); return retval;});
    mod.method("jlopencv_cv_utils_cv_utils_dumpInputArrayOfArrays",  [](vector<Mat>& argument) { auto retval = cv::utils::dumpInputArrayOfArrays(argument); return retval;});
    mod.method("jlopencv_cv_utils_cv_utils_dumpInputOutputArray",  [](Mat& argument) { auto retval = cv::utils::dumpInputOutputArray(argument); return make_tuple(move(retval),move(argument));});
    mod.method("jlopencv_cv_utils_cv_utils_dumpInputOutputArrayOfArrays",  [](vector<Mat>& argument) { auto retval = cv::utils::dumpInputOutputArrayOfArrays(argument); return make_tuple(move(retval),move(argument));});
    mod.method("jlopencv_cv_utils_cv_utils_dumpBool",  [](bool argument) { auto retval = cv::utils::dumpBool(argument); return retval;});
    mod.method("jlopencv_cv_utils_cv_utils_dumpInt",  [](int& argument) { auto retval = cv::utils::dumpInt(argument); return retval;});
    mod.method("jlopencv_cv_utils_cv_utils_dumpSizeT",  [](size_t& argument) { auto retval = cv::utils::dumpSizeT(argument); return retval;});
    mod.method("jlopencv_cv_utils_cv_utils_dumpFloat",  [](float& argument) { auto retval = cv::utils::dumpFloat(argument); return retval;});
    mod.method("jlopencv_cv_utils_cv_utils_dumpDouble",  [](double& argument) { auto retval = cv::utils::dumpDouble(argument); return retval;});
    mod.method("jlopencv_cv_utils_cv_utils_dumpCString",  [](c_string& argument) { auto retval = cv::utils::dumpCString(argument); return retval;});
    mod.method("jlopencv_cv_utils_cv_utils_testAsyncArray",  [](Mat& argument) { auto retval = cv::utils::testAsyncArray(argument); return retval;});
    mod.method("jlopencv_cv_utils_cv_utils_testAsyncException",  []() { auto retval = cv::utils::testAsyncException(); return retval;});

mod.method("jlopencv_Layer_set_blobs", [](cv::Ptr<cv::dnn::Layer> cobj, const force_enum_int<vector_Mat>::Type &v) {cobj->blobs=(vector_Mat)v;});

mod.method("jlopencv_Layer_get_blobs", [](const cv::Ptr<cv::dnn::Layer> &cobj) {return cobj->blobs;});
mod.method("jlopencv_Layer_get_name", [](const cv::Ptr<cv::dnn::Layer> &cobj) {return cobj->name;});
mod.method("jlopencv_Layer_get_type", [](const cv::Ptr<cv::dnn::Layer> &cobj) {return cobj->type;});
mod.method("jlopencv_Layer_get_preferableTarget", [](const cv::Ptr<cv::dnn::Layer> &cobj) {return cobj->preferableTarget;});;mod.method("jlopencv_cv_dnn_cv_dnn_Net_cv_dnn_Net_Net", []() {  return jlcxx::create<cv::dnn::Net>();});

;
    mod.method("jlopencv_cv_dnn_cv_dnn_Net_cv_dnn_Net_empty",  [](cv::dnn::Net& cobj) { auto retval = cobj.empty();  return retval;});
    mod.method("jlopencv_cv_dnn_cv_dnn_Net_cv_dnn_Net_dump",  [](cv::dnn::Net& cobj) { auto retval = cobj.dump();  return retval;});
    mod.method("jlopencv_cv_dnn_cv_dnn_Net_cv_dnn_Net_dumpToFile",  [](cv::dnn::Net& cobj, string& path) { cobj.dumpToFile(path);  ;});
    mod.method("jlopencv_cv_dnn_cv_dnn_Net_cv_dnn_Net_setInputShape",  [](cv::dnn::Net& cobj, string& inputName, MatShape& shape) { cobj.setInputShape(inputName, shape);  ;});
    mod.method("jlopencv_cv_dnn_cv_dnn_Net_cv_dnn_Net_forward",  [](cv::dnn::Net& cobj, string& outputName) { auto retval = cobj.forward(outputName);  return retval;});
    mod.method("jlopencv_cv_dnn_cv_dnn_Net_cv_dnn_Net_forward",  [](cv::dnn::Net& cobj, vector<Mat>& outputBlobs, string& outputName) { cobj.forward(outputBlobs, outputName);  return outputBlobs;});
    mod.method("jlopencv_cv_dnn_cv_dnn_Net_cv_dnn_Net_forward",  [](cv::dnn::Net& cobj, vector<string>& outBlobNames, vector<Mat>& outputBlobs) { cobj.forward(outputBlobs, outBlobNames);  return outputBlobs;});
    mod.method("jlopencv_cv_dnn_cv_dnn_Net_cv_dnn_Net_forward",  [](cv::dnn::Net& cobj, vector<string>& outBlobNames) {vector<vector<Mat>> outputBlobs; cobj.forward(outputBlobs, outBlobNames);  return outputBlobs;});
    mod.method("jlopencv_cv_dnn_cv_dnn_Net_cv_dnn_Net_forwardAsync",  [](cv::dnn::Net& cobj, string& outputName) { auto retval = cobj.forwardAsync(outputName);  return retval;});
    mod.method("jlopencv_cv_dnn_cv_dnn_Net_cv_dnn_Net_setPreferableBackend",  [](cv::dnn::Net& cobj, int& backendId) { cobj.setPreferableBackend(backendId);  ;});
    mod.method("jlopencv_cv_dnn_cv_dnn_Net_cv_dnn_Net_setPreferableTarget",  [](cv::dnn::Net& cobj, int& targetId) { cobj.setPreferableTarget(targetId);  ;});
    mod.method("jlopencv_cv_dnn_cv_dnn_Net_cv_dnn_Net_setInput",  [](cv::dnn::Net& cobj, Mat& blob, string& name, double& scalefactor, Scalar& mean) { cobj.setInput(blob, name, scalefactor, mean);  ;});
    mod.method("jlopencv_cv_dnn_cv_dnn_Net_cv_dnn_Net_setParam",  [](cv::dnn::Net& cobj, LayerId& layer, int& numParam, Mat& blob) { cobj.setParam(layer, numParam, blob);  ;});
    mod.method("jlopencv_cv_dnn_cv_dnn_Net_cv_dnn_Net_getParam",  [](cv::dnn::Net& cobj, LayerId& layer, int& numParam) { auto retval = cobj.getParam(layer, numParam);  return retval;});
    mod.method("jlopencv_cv_dnn_cv_dnn_Net_cv_dnn_Net_getFLOPS",  [](cv::dnn::Net& cobj, vector<MatShape>& netInputShapes) { auto retval = cobj.getFLOPS(netInputShapes);  return retval;});
    mod.method("jlopencv_cv_dnn_cv_dnn_Net_cv_dnn_Net_getFLOPS",  [](cv::dnn::Net& cobj, MatShape& netInputShape) { auto retval = cobj.getFLOPS(netInputShape);  return retval;});
    mod.method("jlopencv_cv_dnn_cv_dnn_Net_cv_dnn_Net_getFLOPS",  [](cv::dnn::Net& cobj, int& layerId, vector<MatShape>& netInputShapes) { auto retval = cobj.getFLOPS(layerId, netInputShapes);  return retval;});
    mod.method("jlopencv_cv_dnn_cv_dnn_Net_cv_dnn_Net_getFLOPS",  [](cv::dnn::Net& cobj, int& layerId, MatShape& netInputShape) { auto retval = cobj.getFLOPS(layerId, netInputShape);  return retval;});
    mod.method("jlopencv_cv_dnn_cv_dnn_Net_cv_dnn_Net_getMemoryConsumption",  [](cv::dnn::Net& cobj, MatShape& netInputShape) {size_t weights;size_t blobs; cobj.getMemoryConsumption(netInputShape, weights, blobs);  return make_tuple(move(weights),move(blobs));});
    mod.method("jlopencv_cv_dnn_cv_dnn_Net_cv_dnn_Net_getMemoryConsumption",  [](cv::dnn::Net& cobj, int& layerId, vector<MatShape>& netInputShapes) {size_t weights;size_t blobs; cobj.getMemoryConsumption(layerId, netInputShapes, weights, blobs);  return make_tuple(move(weights),move(blobs));});
    mod.method("jlopencv_cv_dnn_cv_dnn_Net_cv_dnn_Net_getMemoryConsumption",  [](cv::dnn::Net& cobj, int& layerId, MatShape& netInputShape) {size_t weights;size_t blobs; cobj.getMemoryConsumption(layerId, netInputShape, weights, blobs);  return make_tuple(move(weights),move(blobs));});
    mod.method("jlopencv_cv_dnn_cv_dnn_Net_cv_dnn_Net_enableFusion",  [](cv::dnn::Net& cobj, bool fusion) { cobj.enableFusion(fusion);  ;});
    mod.method("jlopencv_cv_dnn_cv_dnn_Net_cv_dnn_Net_getPerfProfile",  [](cv::dnn::Net& cobj) {vector<double> timings; auto retval = cobj.getPerfProfile(timings);  return make_tuple(move(retval),move(timings));});mod.method("jlopencv_cv_dnn_cv_dnn_Model_cv_dnn_Model_Model", [](string& model, string& config) {  return jlcxx::create<cv::dnn::Model>(model ,config);});mod.method("jlopencv_cv_dnn_cv_dnn_Model_cv_dnn_Model_Model", [](Net& network) {  return jlcxx::create<cv::dnn::Model>(network);});

;
    mod.method("jlopencv_cv_dnn_cv_dnn_Model_cv_dnn_Model_setInputSize",  [](cv::dnn::Model& cobj, Size& size) { auto retval = cobj.setInputSize(size);  return retval;});
    mod.method("jlopencv_cv_dnn_cv_dnn_Model_cv_dnn_Model_setInputSize",  [](cv::dnn::Model& cobj, int& width, int& height) { auto retval = cobj.setInputSize(width, height);  return retval;});
    mod.method("jlopencv_cv_dnn_cv_dnn_Model_cv_dnn_Model_setInputMean",  [](cv::dnn::Model& cobj, Scalar& mean) { auto retval = cobj.setInputMean(mean);  return retval;});
    mod.method("jlopencv_cv_dnn_cv_dnn_Model_cv_dnn_Model_setInputScale",  [](cv::dnn::Model& cobj, double& scale) { auto retval = cobj.setInputScale(scale);  return retval;});
    mod.method("jlopencv_cv_dnn_cv_dnn_Model_cv_dnn_Model_setInputCrop",  [](cv::dnn::Model& cobj, bool crop) { auto retval = cobj.setInputCrop(crop);  return retval;});
    mod.method("jlopencv_cv_dnn_cv_dnn_Model_cv_dnn_Model_setInputSwapRB",  [](cv::dnn::Model& cobj, bool swapRB) { auto retval = cobj.setInputSwapRB(swapRB);  return retval;});
    mod.method("jlopencv_cv_dnn_cv_dnn_Model_cv_dnn_Model_setInputParams",  [](cv::dnn::Model& cobj, double& scale, Size& size, Scalar& mean, bool swapRB, bool crop) { cobj.setInputParams(scale, size, mean, swapRB, crop);  ;});
    mod.method("jlopencv_cv_dnn_cv_dnn_Model_cv_dnn_Model_predict",  [](cv::dnn::Model& cobj, Mat& frame, vector<Mat>& outs) { cobj.predict(frame, outs);  return outs;});mod.method("jlopencv_cv_dnn_cv_dnn_ClassificationModel_cv_dnn_ClassificationModel_ClassificationModel", [](string& model, string& config) {  return jlcxx::create<cv::dnn::ClassificationModel>(model ,config);});mod.method("jlopencv_cv_dnn_cv_dnn_ClassificationModel_cv_dnn_ClassificationModel_ClassificationModel", [](Net& network) {  return jlcxx::create<cv::dnn::ClassificationModel>(network);});

;
    mod.method("jlopencv_cv_dnn_cv_dnn_ClassificationModel_cv_dnn_ClassificationModel_classify",  [](cv::dnn::ClassificationModel& cobj, Mat& frame) {int classId;float conf; cobj.classify(frame, classId, conf);  return make_tuple(move(classId),move(conf));});mod.method("jlopencv_cv_dnn_cv_dnn_KeypointsModel_cv_dnn_KeypointsModel_KeypointsModel", [](string& model, string& config) {  return jlcxx::create<cv::dnn::KeypointsModel>(model ,config);});mod.method("jlopencv_cv_dnn_cv_dnn_KeypointsModel_cv_dnn_KeypointsModel_KeypointsModel", [](Net& network) {  return jlcxx::create<cv::dnn::KeypointsModel>(network);});

;
    mod.method("jlopencv_cv_dnn_cv_dnn_KeypointsModel_cv_dnn_KeypointsModel_estimate",  [](cv::dnn::KeypointsModel& cobj, Mat& frame, float& thresh) { auto retval = cobj.estimate(frame, thresh);  return retval;});mod.method("jlopencv_cv_dnn_cv_dnn_SegmentationModel_cv_dnn_SegmentationModel_SegmentationModel", [](string& model, string& config) {  return jlcxx::create<cv::dnn::SegmentationModel>(model ,config);});mod.method("jlopencv_cv_dnn_cv_dnn_SegmentationModel_cv_dnn_SegmentationModel_SegmentationModel", [](Net& network) {  return jlcxx::create<cv::dnn::SegmentationModel>(network);});

;
    mod.method("jlopencv_cv_dnn_cv_dnn_SegmentationModel_cv_dnn_SegmentationModel_segment",  [](cv::dnn::SegmentationModel& cobj, Mat& frame, Mat& mask) { cobj.segment(frame, mask);  return mask;});mod.method("jlopencv_cv_dnn_cv_dnn_DetectionModel_cv_dnn_DetectionModel_DetectionModel", [](string& model, string& config) {  return jlcxx::create<cv::dnn::DetectionModel>(model ,config);});mod.method("jlopencv_cv_dnn_cv_dnn_DetectionModel_cv_dnn_DetectionModel_DetectionModel", [](Net& network) {  return jlcxx::create<cv::dnn::DetectionModel>(network);});

;
    mod.method("jlopencv_cv_dnn_cv_dnn_DetectionModel_cv_dnn_DetectionModel_detect",  [](cv::dnn::DetectionModel& cobj, Mat& frame, float& confThreshold, float& nmsThreshold) {vector<int> classIds;vector<float> confidences;vector<Rect> boxes; cobj.detect(frame, classIds, confidences, boxes, confThreshold, nmsThreshold);  return make_tuple(move(classIds),move(confidences),move(boxes));});
    mod.method("jlopencv_cv_dnn_cv_dnn_Net_readFromModelOptimizer",  [](string& xml, string& bin) { auto retval = cv::dnn::Net::readFromModelOptimizer(xml, bin); return retval;});
    mod.method("jlopencv_cv_dnn_cv_dnn_Net_readFromModelOptimizer",  [](vector<uchar>& bufferModelConfig, vector<uchar>& bufferWeights) { auto retval = cv::dnn::Net::readFromModelOptimizer(bufferModelConfig, bufferWeights); return retval;});
    mod.method("jlopencv_cv_dnn_cv_dnn_readNetFromDarknet",  [](string& cfgFile, string& darknetModel) { auto retval = cv::dnn::readNetFromDarknet(cfgFile, darknetModel); return retval;});
    mod.method("jlopencv_cv_dnn_cv_dnn_readNetFromDarknet",  [](vector<uchar>& bufferCfg, vector<uchar>& bufferModel) { auto retval = cv::dnn::readNetFromDarknet(bufferCfg, bufferModel); return retval;});
    mod.method("jlopencv_cv_dnn_cv_dnn_readNetFromCaffe",  [](string& prototxt, string& caffeModel) { auto retval = cv::dnn::readNetFromCaffe(prototxt, caffeModel); return retval;});
    mod.method("jlopencv_cv_dnn_cv_dnn_readNetFromCaffe",  [](vector<uchar>& bufferProto, vector<uchar>& bufferModel) { auto retval = cv::dnn::readNetFromCaffe(bufferProto, bufferModel); return retval;});
    mod.method("jlopencv_cv_dnn_cv_dnn_readNetFromTensorflow",  [](string& model, string& config) { auto retval = cv::dnn::readNetFromTensorflow(model, config); return retval;});
    mod.method("jlopencv_cv_dnn_cv_dnn_readNetFromTensorflow",  [](vector<uchar>& bufferModel, vector<uchar>& bufferConfig) { auto retval = cv::dnn::readNetFromTensorflow(bufferModel, bufferConfig); return retval;});
    mod.method("jlopencv_cv_dnn_cv_dnn_readNetFromTorch",  [](string& model, bool isBinary, bool evaluate) { auto retval = cv::dnn::readNetFromTorch(model, isBinary, evaluate); return retval;});
    mod.method("jlopencv_cv_dnn_cv_dnn_readNet",  [](string& model, string& config, string& framework) { auto retval = cv::dnn::readNet(model, config, framework); return retval;});
    mod.method("jlopencv_cv_dnn_cv_dnn_readNet",  [](string& framework, vector<uchar>& bufferModel, vector<uchar>& bufferConfig) { auto retval = cv::dnn::readNet(framework, bufferModel, bufferConfig); return retval;});
    mod.method("jlopencv_cv_dnn_cv_dnn_readTorchBlob",  [](string& filename, bool isBinary) { auto retval = cv::dnn::readTorchBlob(filename, isBinary); return retval;});
    mod.method("jlopencv_cv_dnn_cv_dnn_readNetFromModelOptimizer",  [](string& xml, string& bin) { auto retval = cv::dnn::readNetFromModelOptimizer(xml, bin); return retval;});
    mod.method("jlopencv_cv_dnn_cv_dnn_readNetFromModelOptimizer",  [](vector<uchar>& bufferModelConfig, vector<uchar>& bufferWeights) { auto retval = cv::dnn::readNetFromModelOptimizer(bufferModelConfig, bufferWeights); return retval;});
    mod.method("jlopencv_cv_dnn_cv_dnn_readNetFromONNX",  [](string& onnxFile) { auto retval = cv::dnn::readNetFromONNX(onnxFile); return retval;});
    mod.method("jlopencv_cv_dnn_cv_dnn_readNetFromONNX",  [](vector<uchar>& buffer) { auto retval = cv::dnn::readNetFromONNX(buffer); return retval;});
    mod.method("jlopencv_cv_dnn_cv_dnn_readTensorFromONNX",  [](string& path) { auto retval = cv::dnn::readTensorFromONNX(path); return retval;});
    mod.method("jlopencv_cv_dnn_cv_dnn_blobFromImage",  [](Mat& image, double& scalefactor, Size& size, Scalar& mean, bool swapRB, bool crop, int& ddepth) { auto retval = cv::dnn::blobFromImage(image, scalefactor, size, mean, swapRB, crop, ddepth); return retval;});
    mod.method("jlopencv_cv_dnn_cv_dnn_blobFromImages",  [](vector<Mat>& images, double& scalefactor, Size& size, Scalar& mean, bool swapRB, bool crop, int& ddepth) { auto retval = cv::dnn::blobFromImages(images, scalefactor, size, mean, swapRB, crop, ddepth); return retval;});
    mod.method("jlopencv_cv_dnn_cv_dnn_imagesFromBlob",  [](Mat& blob_, vector<Mat>& images_) { cv::dnn::imagesFromBlob(blob_, images_); return images_;});
    mod.method("jlopencv_cv_dnn_cv_dnn_shrinkCaffeModel",  [](string& src, string& dst, vector<string>& layersTypes) { cv::dnn::shrinkCaffeModel(src, dst, layersTypes); ;});
    mod.method("jlopencv_cv_dnn_cv_dnn_writeTextGraph",  [](string& model, string& output) { cv::dnn::writeTextGraph(model, output); ;});
    mod.method("jlopencv_cv_dnn_cv_dnn_NMSBoxes",  [](vector<Rect2d>& bboxes, vector<float>& scores, float& score_threshold, float& nms_threshold, float& eta, int& top_k) {vector<int> indices; cv::dnn::NMSBoxes(bboxes, scores, score_threshold, nms_threshold, indices, eta, top_k); return indices;});
    mod.method("jlopencv_cv_dnn_cv_dnn_NMSBoxes",  [](vector<RotatedRect>& bboxes, vector<float>& scores, float& score_threshold, float& nms_threshold, float& eta, int& top_k) {vector<int> indices; cv::dnn::NMSBoxes(bboxes, scores, score_threshold, nms_threshold, indices, eta, top_k); return indices;});    mod.set_const("cv_dnn_DNN_BACKEND_CUDA", (force_enum_int<decltype(cv::dnn::DNN_BACKEND_CUDA)>::Type)cv::dnn::DNN_BACKEND_CUDA);
    mod.set_const("cv_dnn_DNN_BACKEND_DEFAULT", (force_enum_int<decltype(cv::dnn::DNN_BACKEND_DEFAULT)>::Type)cv::dnn::DNN_BACKEND_DEFAULT);
    mod.set_const("cv_dnn_DNN_BACKEND_HALIDE", (force_enum_int<decltype(cv::dnn::DNN_BACKEND_HALIDE)>::Type)cv::dnn::DNN_BACKEND_HALIDE);
    mod.set_const("cv_dnn_DNN_BACKEND_INFERENCE_ENGINE", (force_enum_int<decltype(cv::dnn::DNN_BACKEND_INFERENCE_ENGINE)>::Type)cv::dnn::DNN_BACKEND_INFERENCE_ENGINE);
    mod.set_const("cv_dnn_DNN_BACKEND_OPENCV", (force_enum_int<decltype(cv::dnn::DNN_BACKEND_OPENCV)>::Type)cv::dnn::DNN_BACKEND_OPENCV);
    mod.set_const("cv_dnn_DNN_BACKEND_VKCOM", (force_enum_int<decltype(cv::dnn::DNN_BACKEND_VKCOM)>::Type)cv::dnn::DNN_BACKEND_VKCOM);
    mod.set_const("cv_dnn_DNN_TARGET_CPU", (force_enum_int<decltype(cv::dnn::DNN_TARGET_CPU)>::Type)cv::dnn::DNN_TARGET_CPU);
    mod.set_const("cv_dnn_DNN_TARGET_CUDA", (force_enum_int<decltype(cv::dnn::DNN_TARGET_CUDA)>::Type)cv::dnn::DNN_TARGET_CUDA);
    mod.set_const("cv_dnn_DNN_TARGET_CUDA_FP16", (force_enum_int<decltype(cv::dnn::DNN_TARGET_CUDA_FP16)>::Type)cv::dnn::DNN_TARGET_CUDA_FP16);
    mod.set_const("cv_dnn_DNN_TARGET_FPGA", (force_enum_int<decltype(cv::dnn::DNN_TARGET_FPGA)>::Type)cv::dnn::DNN_TARGET_FPGA);
    mod.set_const("cv_dnn_DNN_TARGET_MYRIAD", (force_enum_int<decltype(cv::dnn::DNN_TARGET_MYRIAD)>::Type)cv::dnn::DNN_TARGET_MYRIAD);
    mod.set_const("cv_dnn_DNN_TARGET_OPENCL", (force_enum_int<decltype(cv::dnn::DNN_TARGET_OPENCL)>::Type)cv::dnn::DNN_TARGET_OPENCL);
    mod.set_const("cv_dnn_DNN_TARGET_OPENCL_FP16", (force_enum_int<decltype(cv::dnn::DNN_TARGET_OPENCL_FP16)>::Type)cv::dnn::DNN_TARGET_OPENCL_FP16);
    mod.set_const("cv_dnn_DNN_TARGET_VULKAN", (force_enum_int<decltype(cv::dnn::DNN_TARGET_VULKAN)>::Type)cv::dnn::DNN_TARGET_VULKAN);
    mod.method("MatOP", [](){return (force_enum_int<decltype(Mat())>::Type)Mat();});
    mod.method("stdggvectoriStringkOP", [](){return (force_enum_int<decltype(std::vector<String>())>::Type)std::vector<String>();});
    mod.method("ScalarOP", [](){return (force_enum_int<decltype(Scalar())>::Type)Scalar();});
    mod.method("PointOTXSTXP", [](){return (force_enum_int<decltype(Point(-1,-1))>::Type)Point(-1,-1);});
    mod.method("morphologyDefaultBorderValueOP", [](){return (force_enum_int<decltype(morphologyDefaultBorderValue())>::Type)morphologyDefaultBorderValue();});
    mod.method("PointOTXSGTXP", [](){return (force_enum_int<decltype(Point(-1, -1))>::Type)Point(-1, -1);});
    mod.method("SizeOP", [](){return (force_enum_int<decltype(Size())>::Type)Size();});
    mod.method("ScalarOXP", [](){return (force_enum_int<decltype(Scalar(1))>::Type)Scalar(1);});
    mod.method("TermCriteriaOTermCriteriaggMAXRITERRTermCriteriaggEPSSbSXP", [](){return (force_enum_int<decltype(TermCriteria(TermCriteria::MAX_ITER+TermCriteria::EPS,5,1))>::Type)TermCriteria(TermCriteria::MAX_ITER+TermCriteria::EPS,5,1);});
    mod.method("PtrifloatkOP", [](){return (force_enum_int<decltype(Ptr<float>())>::Type)Ptr<float>();});
    mod.method("StringOP", [](){return (force_enum_int<decltype(String())>::Type)String();});
    mod.method("stdggvectoriintkOP", [](){return (force_enum_int<decltype(std::vector<int>())>::Type)std::vector<int>();});
    mod.method("ScalarggallOWP", [](){return (force_enum_int<decltype(Scalar::all(0))>::Type)Scalar::all(0);});
    mod.method("SizeOeSGeP", [](){return (force_enum_int<decltype(Size(8, 8))>::Type)Size(8, 8);});
    mod.method("stdggvectoriucharkOP", [](){return (force_enum_int<decltype(std::vector<uchar>())>::Type)std::vector<uchar>();});
    mod.method("PointOP", [](){return (force_enum_int<decltype(Point())>::Type)Point();});



}
